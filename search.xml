<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JAVA】AtomicLong LongAdder 性能对比</title>
      <link href="/2020/11/22/java-atomiclong-longadder-xing-neng-dui-bi/"/>
      <url>/2020/11/22/java-atomiclong-longadder-xing-neng-dui-bi/</url>
      
        <content type="html"><![CDATA[<p>LongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务… </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一天，组长找来小bin</p><p>组长：“小bin啊，最近我们服务器上的a模块出现几次异常，每次都是用户反馈了之后我们才去解决，领导们很重视这个问题，所以要求我们要在a模块上添加业务指标监控。这里你先去调研下 AtomicLong 和 LongAdder 性能差异吧，之后我们再一起看看怎么添加监控指标”</p><p>小bin：“这个我知道啊，多线程下 LongAdder 比 AtomicLong 性能好啊…”</p><p>说着在浏览器的搜索栏上输入 “LongAdder 和 AtomicLong 性能对比” ，打开了一个测试对比页面</p><p>组长：“我想让你做的是基于我们当前系统来做个对比，基于当前系统可能两者的性能差异不会特别明显，但是两者的使用方式还是有所区别的，这又涉及这次添加监控的工作量了”</p><p>组长：“你等会出份报告，下班前我再来找你”</p><p>小bin：“好的，保证完成任务”</p><h2 id="源码简单分析"><a href="#源码简单分析" class="headerlink" title="源码简单分析"></a>源码简单分析</h2><p>拿到了任务，先从何下手呢？小bin想了想，啪的一下，很快啊，打开了 LongAdder 和 AtomicLong 的源码。</p><p>想要做性能对比，也得先大概了解这两者的实现有什么区别吧</p><h3 id="AtomicLong"><a href="#AtomicLong" class="headerlink" title="AtomicLong"></a>AtomicLong</h3><p>AtomicLong 的实现比较简单，基本思路就是维护了一个 volatile 的 value 变量，累加时候通过自旋保证了数据增加的原子性。</p><p>当多个线程同时要进行数据操作时，就有可能增加自旋的时间。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用volatile 保证可见性</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">AtomicLong</span><span class="token punctuation">(</span><span class="token keyword">long</span> initialValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主要看 getAndAddLong 的实现</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过自旋方式来保证原子性</span><span class="token comment" spellcheck="true">// compareAndSwapLong 和 getLongVolatile 都是 native ，需要查看 jvm 源码</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getAndAddLong</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> var6<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        var6 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLongVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var6<span class="token punctuation">,</span> var6 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var6<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">,</span> <span class="token keyword">long</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">getLongVolatile</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h3><p>LongAdder 就比  AtomicLong 复杂了点。  LongAdder 继承了 Striped64，Striped64 是在 java8 中添加用来支持累加器的并发组件，设计思路是在竞争激烈的时候尽量分散竞争。</p><p>LongAdder  核心思路是先使用cas操作base值，当发生碰撞后，若发生碰撞的线程对应的cells位置为null时，将添加的值放入cells数组对应位置中，若已经有数值了，则尝试cas该数值，若此处还是方式碰撞，则想办法将值添加到其他竞争不激烈的cells位置上。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先尝试直接在base上加x</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 如果当前线程在 cells 对应槽位上已经有值，尝试在槽位值上加x；失败才执行 longAccumulate </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>            <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> null<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// sum 求和把base值和cells上的值加起来</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> cells<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>    <span class="token keyword">long</span> sum <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> as<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                sum <span class="token operator">+=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Striped64 实现的较为复杂的 longAccumulate</p><p>初始化或扩容cells，若cells 没有初始化则初始化为cells[2] ；若当前线程 probe&amp;cells.length 为null，则将该位置初始化为cell(x)；若 probe&amp;cells.length 发生碰撞，则扩容cells 为 4,8,16… 2^n ；然后将当前线程 probe advanceProbe</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">casBase</span><span class="token punctuation">(</span><span class="token keyword">long</span> cmp<span class="token punctuation">,</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> BASE<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">longAccumulate</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> LongBinaryOperator fn<span class="token punctuation">,</span>                          <span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getProbe 获取当前线程的"探针"值，其实就是一个数。（可以理解为当前线程的hash值）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// force initialization</span>        h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// True if last slot nonempty</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果已经初始化过cells了，初始化后 cells 长度 为2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// Try to attach new Cell</span>                    Cell r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Optimistically create</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 加完锁后进行二次check</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// Recheck under lock</span>                            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> j<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rs <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span>m <span class="token operator">=</span> rs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                                rs<span class="token punctuation">[</span>j <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                rs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                                created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Slot is now non-empty</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// CAS already known to fail</span>                wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Continue after rehash</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span>                                         fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> NCPU <span class="token operator">||</span> cells <span class="token operator">!=</span> as<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 碰撞标记</span>                collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// At max size or stale</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span>                collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 扩容cells，每次扩容为原来的两倍</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Expand table unless stale</span>                        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                            rs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// Retry with expanded table</span>            <span class="token punctuation">}</span>            h <span class="token operator">=</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化 cells ， cellsBusy 一个 Spinlock ， 0 表示未上锁。</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true">// Initialize table</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    rs<span class="token punctuation">[</span>h <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                    init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 尝试使用cas往base上添加v值， 从 LongAdder 调用add 到此方法 fn 为null</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casBase</span><span class="token punctuation">(</span>v <span class="token operator">=</span> base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span>                                    fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// Fall back on using base</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Benchmark-基准测试"><a href="#Benchmark-基准测试" class="headerlink" title="Benchmark 基准测试"></a>Benchmark 基准测试</h2><p>梳理完两者的大概流程后，小bin摸了摸头上日渐稀少的头发，想到 “该上benchmark测试下性能了吧”</p><p>两分钟后，小bin写了个测试<a href="https://github.com/yibiner/blog-demo-code/tree/master/BenchMarkTest-thread-AtomicLong-AddrLong" target="_blank" rel="noopener">demo</a></p><p>基本流程：long 值每次累加到100000，预热5次，每个测试3s，测试10次取平均值。测试线程数量为1，2，4，8，16，32，64，96，128</p><p><img src="breachmark.png" alt="breachmark"></p><p>看到了上面的测试结果，小bin心想：“果然还是 LongAdder 性能更好啊，AtomicLong 也差太多了”</p><h2 id="线程池模拟测试"><a href="#线程池模拟测试" class="headerlink" title="线程池模拟测试"></a>线程池模拟测试</h2><p>“啊，我是不是还得确认下当前系统业务框架下这两者带来的性能影响差异？”小bin一边想着，一边开始撸起了另一个测试<a href="https://github.com/yibiner/blog-demo-code/tree/master/test-thread-AtomicLong-AddrLong" target="_blank" rel="noopener">demo</a></p><p>基本流程：long 值每次累加到100000，测试50次，去掉最大最小值取平均</p><p><img src="%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B5%8B%E8%AF%95%E5%B9%B6%E5%8F%91.png" alt="线程池测试并发"></p><p>看着眼前的统计结果，小bin迷惑了“为什么这次的结果显示两者差距没多少呢？”</p><p>带着迷惑，小bin又复查了一边测试，这次有了新的发现：在benchmark测试中，CPU的使用率在线程数为8之前，都是跟着线程数上去的，如线程数为1，跑测试时，cpu占用率在100% 左右，线程数为4，cpu占用率为400%，线程数为8及更大，cpu占用率就占满到600%了；但是在使用线程池进行测试性能中（模拟实际模块使用情景），cpu的最大占用率也就150%多。</p><p>“如果我在测试环境的a模块中加入包含 LongAdder 和 AtomicLong 的代码，是不是能更准确的表现出两者对于实际的影响？”一边想着，小bin一边改起了代码。</p><p>分别测试没有添加 LongAdder 和 AtomicLong 逻辑，加了 LongAdder， 加了 AtomicLong；业务线程池大小96；模拟现网qps给测试环境加压；模拟实际的瞬时20倍正常qps加压，查看恢复情况。 结果发现性能影响还是不太明显，没有业务代码造成的性能影响大。</p><p>于是乎，小bin发现这时候已经到了晚上的10点了…</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在追求极限性能下，LongAdder 比 AtomicLong 性能要更好。但是在实际的使用场景中，需要根据业务情况具体的选择使用哪个，首先简单的实现业务场景可能大部分情况下是优先考虑的。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="操作平台与环境"><a href="#操作平台与环境" class="headerlink" title="操作平台与环境"></a>操作平台与环境</h3><p>IDEA 版本：Ultimate 2020.2.1</p><p>台式机 CPU：i5-9400f 6C6T  内存：32GB</p><pre class="line-numbers language-shell"><code class="language-shell">$ uname -aLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux$ java -versionjava version "1.8.0_241"Java(TM) SE Runtime Environment (build 1.8.0_241-b07)Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p> <a href="https://zhuanlan.zhihu.com/p/133851347" target="_blank" rel="noopener">volatile底层原理详解</a></p><p><a href="https://www.jianshu.com/p/30d328e9353b" target="_blank" rel="noopener">Java 并发计数组件Striped64详解</a></p><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 程序员的一天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他】小米6解BL锁，获取ROOT权限</title>
      <link href="/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/"/>
      <url>/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。</p><p>小米有一点我比较喜欢的就是至今（2020年11月7日）还有官方解锁渠道，手里有旧手机，或者就是想折腾的人也能有较为方便的获取 root 权限的途径（安卓手机拿到 root 权限，可就想怎么折腾都可以了）。</p><p>不过在 root 小米6的过程中也遇到了许多问题，这里记录一下给需要的同学一个参考。</p><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>手机：小米6 </p><p>手机系统版本：MIUI11.0.5.0 稳定版</p><img src="手机系统信息.jpg" alt="手机系统信息" style="zoom:50%;"><p>操作的电脑系统版本：</p><pre class="line-numbers language-powershell"><code class="language-powershell">版本    Windows 10 专业版版本号    20H2安装日期    ‎2020<span class="token operator">/</span>‎6<span class="token operator">/</span>‎25操作系统版本    19042<span class="token punctuation">.</span>610体验    Windows Feature Experience Pack 120<span class="token punctuation">.</span>2212<span class="token punctuation">.</span>31<span class="token punctuation">.</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解BL锁"><a href="#解BL锁" class="headerlink" title="解BL锁"></a>解BL锁</h2><h3 id="正常流程下步骤"><a href="#正常流程下步骤" class="headerlink" title="正常流程下步骤"></a>正常流程下步骤</h3><ol><li>先阅读下<a href="https://www.xiaomi.cn/post/4378807" target="_blank" rel="noopener">小米手机解锁 Bootloader 教程以及常见问题</a> ，了解下解锁 Bootloader 的基本步骤</li><li>手机上操作，“设置 - 我的设备 - 所有参数” 连续按 MIUI版本，进入开发者模式</li><li>手机上操作，“设置 - 更多设置 - 开发者选项 - 设备解锁状态”，进行账号绑定和确认状态</li></ol><img src="设备解锁状态-未解锁.jpg" alt="设备解锁状态-未解锁" style="zoom:50%;"><p><strong>注意：这个步骤需要断开wifi，使用手机流量操作。且账号要与步骤5中登录账号一致</strong></p><ol start="4"><li>下载小米解锁工具，<a href="http://www.miui.com/unlock/download.html" target="_blank" rel="noopener">中文版</a>，<a href="https://en.miui.com/unlock/download_en.html" target="_blank" rel="noopener">英文版</a></li></ol><img src="下载小米解锁工具.png" alt="下载小米解锁工具" style="zoom:80%;"><ol start="5"><li>打开小米解锁工具，登录小米账号</li></ol><img src="登录小米解锁工具.png" alt="登录小米解锁工具" style="zoom:60%;"><ol start="6"><li><p>按照提示将手机关机后，长按音量下键 + 电源键进入 FastBoot 页面</p></li><li><p>安装驱动。要么将手机连接到电脑后自动安装好驱动，要么在小米解锁工具的设置页面手动安装驱动</p></li></ol><img src="安装驱动.png" alt="安装驱动" style="zoom:60%;"><ol start="8"><li>若是一切正常，这时候解锁工具页面应该是以下样子（我没有这么幸运能一次成功）</li></ol><img src="手机连接上解锁工具.png" alt="手机连接上解锁工具" style="zoom:60%;"><ol start="9"><li>点击解锁。<strong>注意：解锁会将手机恢复出厂设置，请提前备份数据</strong></li></ol><img src="准备开始解锁.png" alt="准备开始解锁" style="zoom:60%;"><ol start="10"><li>等待解锁完成</li></ol><img src="解锁到95.png" alt="解锁到95%" style="zoom:60%;"><img src="解锁成功.png" alt="解锁成功" style="zoom:60%;"><ol start="11"><li>等到手机重启后查看 “设置 - 更多设置 - 开发者选项 - 设备解锁状态” （在开机的时候屏幕下方会有“unlock”字符）</li></ol><img src="解锁完成后手机状态.jpg" alt="解锁完成后手机状态" style="zoom:50%;"><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul><li>问题一：手机连接上电脑后，在解锁工具中检测不到设备</li></ul><img src="检测不到手机.png" alt="检测不到手机" style="zoom:80%;"><p>尝试解决：</p><ol><li><p>换线，换USB接口，都无效</p></li><li><p>卸载驱动后重新安装，无效</p></li><li><p>换了另一台win10的电脑尝试，问题仍存在</p></li><li><p>只能通过重启电脑后才能检测到设备，如果重启后拔插了usb，又检测不到了</p></li></ol><ul><li>问题二：开始解锁后，验证设备信息到50%后验证失败（重启电脑后解锁工具能检测到手机，此时可以点击解锁）</li></ul><img src="50验证失败.png" alt="50验证失败" style="zoom:80%;"><p>尝试解决：</p><ol><li><p>换了老版本解锁工具，无效</p></li><li><p>参考<a href="https://miuiver.com/unable-to-get-phone-info/" target="_blank" rel="noopener">小米解锁无法获取手机信息解决方法</a>，换英文版的解锁工具，无效</p></li><li><p>根据问题一需要重启解锁工具才能显示检测到手机推测应该是驱动有问题。参考 <a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=905825&amp;archive=1&amp;extra=page%3D1&amp;page=2" target="_blank" rel="noopener">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=905825&amp;archive=1&amp;extra=page%3D1&amp;page=2</a>  中提到的解决方法继续以下的尝试解决方法</p></li><li><p>使用 <a href="http://zhushou.xiaomi.com/" target="_blank" rel="noopener">小米助手3.0</a>  安装驱动，使用原装线，无效</p></li><li><p>使用 <a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1169553&highlight=%B8%E3%BB%FA%D6%FA%CA%D6" target="_blank" rel="noopener">搞机助手</a> 小米usb3.0 修复补丁，安装后重启电脑，再使用解锁工具解锁，【 成功】</p></li></ol><img src="搞机助手安装修复补丁.png" alt="搞机助手安装修复补丁" style="zoom:80%;"><ol start="6"><li>下载360手机管家安装安卓驱动，未测试</li><li>换win7系统，再使用解锁工具安装驱动解锁，未测试</li></ol><p>其他参考：</p><ul><li><p><a href="https://www.mi.com/service/special/BL-loc" target="_blank" rel="noopener">BL锁解锁失败必看</a></p></li><li><p><a href="https://www.v2ex.com/t/589868" target="_blank" rel="noopener">小米 9 解 bl 锁,在 fastboot 界面，解锁工具始终显示未连接</a></p></li></ul><h2 id="线刷开发版系统"><a href="#线刷开发版系统" class="headerlink" title="线刷开发版系统"></a>线刷开发版系统</h2><ol><li><p><a href="http://www.miui.com/shuaji-393.html" target="_blank" rel="noopener">通过线刷升级</a>，下载通用刷机工具</p></li><li><p><a href="https://www.xiaomi.cn/post/5896315" target="_blank" rel="noopener">小米全系列机型刷机包下载站汇总（长期更新）</a>，查找对应的系统包（我这里下载的是 9.8.22（9.0） 的线刷包，当前系统里面升级页面找不到卡刷包的入口）。说明：应官方要求，9.9.3版本往后暂不提供开发版下载方式，请大家移步<a href="https://web-alpha.vip.miui.com/page/info/mio/mio/internalTest?type=2" target="_blank" rel="noopener">内测中心</a>申请开发板公测/内侧体验。</p></li><li><p>在手机上操作：关机状态下，同时按住 音量下+电源键 进入Fastboot模式将手机USB连接电脑</p></li><li><p>线刷包下载完成后解压，打开线刷包文件夹，复制地址栏地址到刷机工具中，点击刷机</p></li></ol><img src="线刷中.png" alt="线刷中" style="zoom:80%;"><ol start="5"><li>等待刷机完成。手机刷机完后会重启，第一次启动的时间有点久的，别以为是刷成砖了，耐心等待下。注意：这里有个坑爹的地方：默认情况下，解了BL锁右下角会选择全部删除并lock，这样线刷完后BL又锁上了。需要手动选择下全部删除选项</li></ol><img src="线刷完成.png" alt="线刷完成" style="zoom:80%;"><ol start="6"><li>查看手机是否已经是开发版本了</li></ol><img src="刷到开发板.jpg" alt="刷到开发板" style="zoom:60%;"><h2 id="开启ROOT权限"><a href="#开启ROOT权限" class="headerlink" title="开启ROOT权限"></a>开启ROOT权限</h2><p>参考<a href="https://www.xiaomi.cn/post/4471505" target="_blank" rel="noopener">【原创】小米手机获取完整ROOT权限教程</a></p><ol><li>打开手机管家</li></ol><img src="root1.png" alt="打开手机管家" style="zoom:60%;"><ol start="2"><li>点击应用管理</li></ol><img src="root2.png" alt="点击应用管理" style="zoom:60%;"><ol start="3"><li>点击权限</li></ol><img src="root3.png" alt="点击权限" style="zoom:60%;"><ol start="4"><li>点击开启ROOT权限</li></ol><img src="root4.png" alt="点击开启" style="zoom:60%;"><ol start="5"><li>开启ROOT。注意：需要网络连接，成功后会重启。如果更新了开发版系统，需要重新再开启ROOT</li></ol><img src="root5.png" alt="开启ROOT" style="zoom:60%;"><ol start="6"><li>解锁System分区。系统提供的ROOT功能并不是完整的；要获取完整的权限，必须解锁System分区！下载 <a href="https://www.coolapk.com/apk/com.lerist.syslock" target="_blank" rel="noopener">Syslock</a>，开启解锁后重启即可生效。（应用获取ROOT权限也提示太多次了吧，每次都要等待5s）</li></ol><img src="获取root权限提示太多.jpg" alt="获取root权限提示太多" style="zoom:50%;"><img src="解锁system.jpg" alt="解锁system" style="zoom:50%;"><h3 id="刷入TWRP"><a href="#刷入TWRP" class="headerlink" title="刷入TWRP"></a>刷入TWRP</h3><p>如果需要刷入TWRP，可以参考以下步骤。能获取ROOT权限应该开发版也够用了。如果刷第三方，还是可以装下TWRP</p><ol><li>下载TWRP。到 <a href="https://twrp.me/Devices/" target="_blank" rel="noopener">TWRP设备列表</a> 中找到小米（<a href="https://twrp.me/Devices/Xiaomi/" target="_blank" rel="noopener">Xiaomi</a>），进入找到<a href="https://twrp.me/xiaomi/xiaomimi6.html" target="_blank" rel="noopener">小米6机型</a>。</li></ol><img src="下载TWRP.png" alt="下载TWRP" style="zoom:80%;"><ol start="2"><li>手机开启USB调试模式</li><li>打开搞机助手</li></ol><img src="打开搞机助手.png" alt="打开搞机助手" style="zoom:80%;"><ol start="4"><li>点击系统模式下重启到引导模式，或者直接音量下+电源键进入</li></ol><img src="刷入REC.png" alt="刷入REC" style="zoom:80%;"><ol start="5"><li>选择刚才下载的img</li></ol><img src="刷入REC1.png" alt="选择刚下载的文件" style="zoom:80%;"><ol start="6"><li>等待刷入成功，默认会重启进入引导模式</li></ol><img src="刷入REC成功.png" alt="刷入REC成功" style="zoom:80%;"><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他】SmartGit申请非商业版证书</title>
      <link href="/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/"/>
      <url>/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SmartGit 作为一个不错的Git图形化工具，没有证书情况下每次打开时候都会提醒你，要等30秒才可以关闭提示窗口。作为个人在家使用是可以申请非商业证书来解决这一烦人的问题。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>打开 <a href="https://www.syntevo.com/cn/smartgit/register-non-commercial/" target="_blank" rel="noopener">https://www.syntevo.com/cn/smartgit/register-non-commercial/</a></li><li>只勾选“在家”选项</li></ul><p><img src="%E5%8B%BE%E9%80%89%E5%9C%A8%E5%AE%B6.png" alt="勾选在家"></p><ul><li>填写相关信息（只要邮箱正确即可）<strong>注意：此处填写的邮箱要与项目邮箱一致，不然还是会有弹窗提示</strong></li></ul><p><img src="%E5%A1%AB%E5%86%99%E4%BF%A1%E6%81%AF.png" alt="填写信息"></p><ul><li>等待邮箱收件，附件里面有个 smartgit.lic 证书文件，下载下来备用</li></ul><p><img src="%E6%94%B6%E5%88%B0%E9%82%AE%E4%BB%B6.png" alt="收到邮件"></p><ul><li>打开 SmartGit ，点击 “Help -&gt; Register”，选择刚才下载的证书文件即可</li></ul><p><img src="%E9%80%89%E6%8B%A9%E8%AF%81%E4%B9%A6.png" alt="选择证书"></p><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开箱】Sonoff ZigBee 套装初体验</title>
      <link href="/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/"/>
      <url>/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为自己的生活添加点智能设备？</p><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>包括ZigBee网关、无线按键传感器、温湿度传感器、门窗传感器、人体红外传感器</p><img src="./2.jpg" alt="2" style="zoom: 50%;"><ul><li>ZigBee Bridge 网关</li></ul><img src="./4.jpg" alt="4" style="zoom: 50%;"><ul><li>Motion Sensor 人体红外传感器</li></ul><img src="./6.jpg" alt="6" style="zoom: 50%;"><p>用来监测是否有人的</p><ul><li>Wireless Door/Window Sensor 门窗传感器</li></ul><img src="./7.jpg" alt="7" style="zoom: 50%;"><ul><li>Wireless Switch 无线按键</li></ul><img src="./8.jpg" alt="8" style="zoom: 50%;"><ul><li>Temperature and Humidity Sensor 温湿度传感器</li></ul><img src="./9.jpg" alt="9" style="zoom: 50%;"><h2 id="安装吐槽"><a href="#安装吐槽" class="headerlink" title="安装吐槽"></a>安装吐槽</h2><ol><li>网关电源是 micro usb ，但是没有附带线</li><li>网关、人体红外、门窗等设备的配网按键都是需要拿针去捅按键，但是整个套件没有附带根针，为了配网找针找了半天</li></ol><img src="./3.jpg" alt="3" style="zoom: 50%;"><ol start="3"><li>子设备拿到手还要打开外壳，将电池的绝缘垫抽出才能使用。外壳卡扣这么紧，也没有工具方便拆开，我掏出了两个螺丝刀翘外壳，一度以为要把外壳翘坏了，边缘不可避免会被划到。</li><li>每个子设备外壳打开后的结构还不一样…</li></ol><img src="./11.jpg" alt="11" style="zoom: 50%;"><img src="./12.jpg" alt="12" style="zoom: 50%;"><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 开箱 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开箱 </tag>
            
            <tag> 折腾 </tag>
            
            <tag> ZigBee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unraid】NAS 小主机配置分享</title>
      <link href="/2020/10/08/unraid-nas-xiao-zhu-ji-pei-zhi-fen-xiang/"/>
      <url>/2020/10/08/unraid-nas-xiao-zhu-ji-pei-zhi-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><table><thead><tr><th></th><th>名称</th><th>价格</th><th>说明</th></tr></thead><tbody><tr><td>主板</td><td>铭瑄的H81 itx</td><td>150</td><td>建议买之前确认下网卡是百兆的还是千兆，要是不在意那就无所谓</td></tr><tr><td>内存</td><td>三星 ddr3 8gx2</td><td>240</td><td>上16g的内存是因为用得上，unraid 系统运行时内存占用很少</td></tr><tr><td>CPU</td><td>i3-4160T/E3-1265L v3</td><td>195/520</td><td>计划是7*24 运行，所以CPU只考虑低功耗的了。整机加上两个机械硬盘，一个固态硬盘功耗正常运行时大概在20W</td></tr><tr><td>机箱</td><td>万由代工的暴风酷播云二代机箱</td><td>175</td><td>血亏的机箱，矿灾后的产物。双盘位</td></tr><tr><td>散热器</td><td>大镰刀S950M</td><td>44</td><td>高31mm。</td></tr><tr><td>网卡</td><td>AX88179 USB3.0 千兆网卡</td><td>40</td><td>主板上的网卡是百兆的，拓展一个千兆网卡， 局域网下千兆还是舒服点。使用usb的网卡主要是因为机箱大小不支持pcie类型的，这块网卡确认unraid 免驱</td></tr><tr><td>U盘</td><td>随便</td><td></td><td>最好用品牌的U盘，其他便宜U盘有可能会在做系统的时候出问题。如果正常做了启动盘后，系统起不来，那最好换个U盘试下</td></tr></tbody></table><p>以上的价格都是2020年1月左右的，部分全新，部分二手</p><h2 id="重启不丢配置及项目文件说明"><a href="#重启不丢配置及项目文件说明" class="headerlink" title="重启不丢配置及项目文件说明"></a>重启不丢配置及项目文件说明</h2><h3 id="重启不丢配置"><a href="#重启不丢配置" class="headerlink" title="重启不丢配置"></a>重启不丢配置</h3><p>unraid 系统默认会在重启时，恢复默认设置。如果安装了oh-my-zsh ，重启后会发现什么都没了，这时候可以参考插件的做法，将修改后的配置文件拷贝到 /boot 目录下，然后在启动脚本中恢复下个人配置。 unraid 系统的启动脚本 <code>/boot/config/go</code> 。</p><p>重启不丢配置可以参考个人当前unraid恢复配置项目 <a href="https://github.com/yibiner/custom.script" target="_blank" rel="noopener">custom.scripts</a> </p><p>直接将项目clone到 <code>/boot/config</code>下，在 <code>/boot/config/go</code> 文件中最后添加 </p><pre class="line-numbers language-shell"><code class="language-shell">cp -r /boot/config/custom.scripts /tmpbash /tmp/custom.scripts/startall.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h3><ul><li><p>config.sh 配置文件。</p></li><li><p>commfunc.sh 公共函数文件。一些日志输出函数。</p></li><li><p>startall.sh 运行所有设置配置脚本的入口。会运行所有 set 开头的脚本文件，会 nohup 运行 loop 开头的脚本文件，这样后续添加设置文件更加清晰。</p></li><li><p>updateconfig.sh 将一些配置保存到U盘中</p></li><li><p>setddns.sh 定时检查外网ip</p></li><li><p>setohmyzsh.sh 恢复oh-my-zsh</p></li><li><p>setssh.sh 恢复ssh 的配置，禁用密码登录、重启sshd 等</p></li><li><p>setplugins.sh autofan设置风扇根据CPU温度调节</p></li><li><p>setroute.sh 设置路由</p></li></ul><h2 id="Oh-My-Zsh-安装"><a href="#Oh-My-Zsh-安装" class="headerlink" title="Oh My Zsh 安装"></a>Oh My Zsh 安装</h2><ul><li>先安装了zsh<ul><li>在 APPS 中搜索并安装 Nerd Pack</li><li>在 SETTINGS -&gt; Nerd Pack 中安装 zsh</li></ul></li><li>安装oh-my-zsh</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># curl 安装sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"# wget 安装sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bash /tmp/updateconfig.sh</code> 执行下脚本，将当前的设置和文件保存到 <code>/boot</code> 下，方便重启后恢复</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 项目 custom.scripts(https://github.com/yibiner/custom.script)  中 恢复oh-my-zsh$ cat setohmyzsh.sh #!/bin/bash# 将 oh-my-zsh 解压到目录if [ ! -d /root/.oh-my-zsh  ] ; then    tar -zxvf oh-my-zsh.tar.gz -C /rootfi# 将配置文件拷贝回目录cp $BASE_PATH/.bash* /rootcp $BASE_PATH/.zsh* /root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSH-密钥登录并关闭密码登录"><a href="#SSH-密钥登录并关闭密码登录" class="headerlink" title="SSH 密钥登录并关闭密码登录"></a>SSH 密钥登录并关闭密码登录</h2><ul><li><p>命令行下执行 <code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code> 生成密钥对</p></li><li><p>将<code>~/.ssh/id_rsa.pub</code> 公钥添加到unraid 的 <code>~/.ssh/authorized_keys</code> 中。如果没有 .ssh 目录和 authorized_keys 文件，自己新建即可，authorized_keys 文件权限为 644。</p></li><li><p>关闭密码登录。 <code>/etc/ssh/sshd_config</code> 将 <code>PasswordAuthentication yes</code> 改成 <code>PasswordAuthentication no</code>。重启下sshd即可生效</p></li><li><p><code>bash /tmp/updateconfig.sh</code> 执行下脚本，将当前的设置和文件保存到 <code>/boot</code> 下，方便重启后恢复</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 恢复ssh，将配置文件覆盖原有的配置后，重启服务$ cat setssh.sh #!/usr/bin/bash# 从boot中恢复ssh文件ssh_start()                                                                                        {                                                                                                    # no-op if already running                                                                         if [ -f /var/run/sshd.pid ]; then                                                                    #echo "SSH already running"                                                                        #sleep 1                                                                                           return                                                                                           fi                                                                                                 echo "Starting SSH..."                                                                             sleep 1                                                                                            /usr/sbin/sshd                                                                                     echo "... OK"                                                                                      sleep 1                                                                                          }                                                                                                  ssh_stop()                                                                                         {                                                                                                    # no-op if already running                                                                         if [ ! -f /var/run/sshd.pid ]; then                                                                  #echo "SSH already stopped"                                                                        #sleep 1                                                                                           return                                                                                           fi                                                                                                 echo "Stopping SSH..."                                                                             sleep 1                                                                                            killall sshd                                                                                       echo "... OK"                                                                                      sleep 1                                                                                          }                                                                                                  ssh_restart() {                                                                                      if [ -r /var/run/sshd.pid ]; then                                                                    echo "Restarting parent listener process only. To kill every sshd process, you must use stop"      sleep 3                                                                                            kill `cat /var/run/sshd.pid`                                                                     else                                                                                                 echo "Warning: there does not appear to be a parent instance of sshd running."                     sleep 3                                                                                            exit 1                                                                                           fi                                                                                                 sleep 1                                                                                            ssh_start                                                                                        }if [ -d "/root/.ssh" ]; then  cp $BASE_PATH/.ssh/* /root/.ssh/fiif [ ! -d "/root/.ssh" ]; then  cp -r $BASE_PATH/.ssh /rootfichmod 644 /root/.ssh/id_rsa.pubchmod 644 /root/.ssh/authorized_keyscp $BASE_PATH/sshd_config /etc/ssh/sshd_configssh_restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CPU-风扇根据CPU温度动态调节转速"><a href="#CPU-风扇根据CPU温度动态调节转速" class="headerlink" title="CPU 风扇根据CPU温度动态调节转速"></a>CPU 风扇根据CPU温度动态调节转速</h2><ul><li>unraid 管理页面 APPS 下搜索 autofan 安装 Dynamix System <strong>Autofan</strong></li><li>然后在 SETTINGS -&gt; Fan Auto Control 里 Enabled 该功能，需要注意下 PWM controller 和 PWM fan 是否选到了对应的设备。</li><li>Minimum PWM value 设置最小转速PWM，最大值是255</li><li>Low temperature threshold 温度下限阈值， High temperature threshold  温度上限阈值</li><li>修改 <code>/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan</code> ，根据CPU温度添加转速， 默认是根据硬盘温度</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 完整见项目 custom.scripts (https://github.com/yibiner/custom.script) 中的 autofan function_get_current_cpu_temp() {    HIGHEST_TEMP=0    HIGHEST_TEMP=`sensors | grep "CPU Temp" | awk '{print $3}' | tr -cd "[0-9.]" | sed "s/\..*//g"`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 设置autofan$ cat setplugins.sh #!/usr/bin/bash# autofan 修改为根据 CPU 温度调节转速filename=/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofanif [ -e $filename ] ; then    # sed -i 'N;196afunction_get_current_cpu_temp() {\nHIGHEST_TEMP=0\nHIGHEST_TEMP=`sensors | grep "CPU Temp" | awk "{print $3}" | tr -cd "[0-9.]" | sed "s/\..*//g"`\n}' $filename    # sed -i 'N;292afunction_get_current_cpu_temp' $filename    # sed -i '292 d' $filename    cp $BASE_PATH/autofan $filename    /usr/local/emhttp/plugins/dynamix.system.autofan/scripts/rc.autofan restartfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双网卡同一局域网设置"><a href="#双网卡同一局域网设置" class="headerlink" title="双网卡同一局域网设置"></a>双网卡同一局域网设置</h2><pre class="line-numbers language-shell"><code class="language-shell">$ cat setroute.sh#!/usr/bin/bash# 设置百兆、千兆网卡走不同路由，互不影响hadlan=`grep "lan" /etc/iproute2/rt_tables`# 新建一个编号为200 ，名字为lan的路由表if [ -z "$hadlan" ] ; then    echo "200 lan" >> /etc/iproute2/rt_tablesfi# 删除default路由表中千兆网的配置had1G=`ip route list | grep "192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5"`if [ -n "$had1G" ] ; then    ip route del 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215fi# 往 lan 路由表 中新增路由had1G=`ip route list table lan | grep "192.168.1.5"`if [ -z "$had1G" ] ; then    ip route add 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215 table lanfi# 设置千兆网卡流量只看 lan 路由表had1G=`ip rule | grep "from 192.168.1.5 lookup lan"`if [ -z "$had1G" ] ; then    ip rule add from 192.168.1.5 table lanfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多网卡连接同一局域网时， 不做设置下是只会走一个物理链路的，默认路由就是这样。这里将两个IP的路由区别开来，这样就能实现访问不同IP走的是不同的物理链路，具体细节请搜索 linux 高级路由设置。</p><h2 id="DNSPod-实现-ddns"><a href="#DNSPod-实现-ddns" class="headerlink" title="DNSPod 实现 ddns"></a>DNSPod 实现 ddns</h2><ul><li><a href="https://console.dnspod.cn/dns/list" target="_blank" rel="noopener">https://console.dnspod.cn/dns/list</a> 注册个域名</li><li><a href="https://console.dnspod.cn/account/token" target="_blank" rel="noopener">https://console.dnspod.cn/account/token</a> 账号中心 -&gt; 密钥管理，创建个密钥</li><li><a href="https://github.com/yibiner/custom.script" target="_blank" rel="noopener">custom.scripts</a>  项目中 dns.conf 文件中填入创建的密钥对</li></ul><h3 id="ddns脚本修改"><a href="#ddns脚本修改" class="headerlink" title="ddns脚本修改"></a>ddns脚本修改</h3><p>脚本参考  <a href="https://github.com/imki911/ArDNSPod，做了以下修改，见" target="_blank" rel="noopener">https://github.com/imki911/ArDNSPod，做了以下修改，见</a>  <a href="https://github.com/yibiner/custom.script/blob/master/ddnspod.sh" target="_blank" rel="noopener">ddnspod.sh</a>：</p><ul><li>获取本机的外网IP时，循环遍历几个能通过curl直接获取外网IP的网址，避免因为某个网址打不开而失败（是的，我经历过</li><li>将上次的外网IP记录在本地文件，而不是每次都去网页获取上次的IP记录</li></ul><h3 id="使用-cron-设置定时，每10分钟检查一次"><a href="#使用-cron-设置定时，每10分钟检查一次" class="headerlink" title="使用 cron 设置定时，每10分钟检查一次"></a>使用 cron 设置定时，每10分钟检查一次</h3><pre class="line-numbers language-shell"><code class="language-shell"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中设置ddns，参考了dynamix.schedules  的思路$ cat setddns.sh #!/bin/bashcrontab -l > /tmp/cron.tmpecho "*/10 * * * * bash /tmp/custom.scripts/onetimeddns.sh" >> /tmp/cron.tmpcrontab /tmp/cron.tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是频率能接受每小时检查一次， 可以参考下文。将脚本放到 <code>/etc/cron.hourly/</code> 目录下即可，需要安装 <code>dynamix.schedules</code>插件</p><pre class="line-numbers language-shell"><code class="language-shell"># cp /tmp/custom.scripts/runddns.sh /etc/cron.hourly/# chmod +x /etc/cron.hourly/runddns.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="山克UPS不间断电源配置"><a href="#山克UPS不间断电源配置" class="headerlink" title="山克UPS不间断电源配置"></a>山克UPS不间断电源配置</h2><p>一个合格的NAS主机，注定了是要7*24小时不间断工作的，可是呢，谁也保不准家里什么时候会断电（组完机器的一个月内我就遇到了两次无预警断电）。所以呢，一个UPS就很重要了，可以让NAS在断电后能主动关机。</p><p>入了最便宜的山克UPS 600VA的那款。</p><p>顺带一提，UPS本身的功耗就10多W了。</p><p>unraid 的 SETTINGS 中有UPS Setting ，直接支持一系列的UPS。不过山克这款尝试过后并不能直接支持，不确定是不是我设置有问题。</p><p>所以当前使用了个折中方案，通过ping 家里路由器判断是否断电。详细见 <a href="https://github.com/yibiner/custom.script/loopping4ups.sh" target="_blank" rel="noopener">loopping4ups.sh</a></p><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unraid </tag>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python3】单脚本运行时限制内存</title>
      <link href="/2020/09/16/python3-dan-jiao-ben-yun-xing-shi-xian-zhi-nei-cun/"/>
      <url>/2020/09/16/python3-dan-jiao-ben-yun-xing-shi-xian-zhi-nei-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存。</p><p>比如日志文件是每小时进行一次归档，单个日志文件1GB，需要获取一天内的日志统计信息，那将会有24GB日志信息，如果在8GB内存机器上分析，同时还有其他任务在运行，最好能直接限制单个脚本的内存占用。</p><h2 id="释放、限制内存"><a href="#释放、限制内存" class="headerlink" title="释放、限制内存"></a>释放、限制内存</h2><p>释放内存： 读取分析完单个文件后，在读取分析下个文件前及时del</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> filename <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        tmpdata <span class="token operator">=</span> dealwithdata<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>        <span class="token keyword">del</span> lines<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单个脚本限制内存：避免脚本将剩余内存全部使用完</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">limit_memory</span><span class="token punctuation">(</span>maxsize<span class="token punctuation">)</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span> hard <span class="token operator">=</span> resource<span class="token punctuation">.</span>getrlimit<span class="token punctuation">(</span>resource<span class="token punctuation">.</span>RLIMIT_AS<span class="token punctuation">)</span>    resource<span class="token punctuation">.</span>setrlimit<span class="token punctuation">(</span>resource<span class="token punctuation">.</span>RLIMIT_AS<span class="token punctuation">,</span> <span class="token punctuation">(</span>maxsize<span class="token punctuation">,</span> hard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 单位字节</span>limit_memory<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JAVA】线程池代码的一次深入分析</title>
      <link href="/2020/09/13/java-xian-cheng-chi-dai-ma-de-yi-ci-shen-ru-fen-xi/"/>
      <url>/2020/09/13/java-xian-cheng-chi-dai-ma-de-yi-ci-shen-ru-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析。作者水平有限，非喜勿喷。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在一次统计线上系统每秒处理消息的线程数中，发现有些机器有37个线程在运行，有些机器在重启了服务后由之前的500个线程变为8个线程。在确认了所有机器的JAVA版本、启动参数没有问题后，将分析重点放到了代码中的线程池部分。</p><p>将系统中线程池部分的代码单独摘出，写了个demo，方便在单机上分析和复现，代码在<a href="https://github.com/yibiner/blog-demo-code/tree/master/test-thread" target="_blank" rel="noopener">test-thread</a>，下文中的实例分析和代码验证都是在这个demo上跑的，读者可以自行验证。</p><p>系统版本</p><pre class="line-numbers language-sh"><code class="language-sh">$ uname -aLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JAVA版本</p><pre class="line-numbers language-sh"><code class="language-sh">$ java -versionjava version "1.8.0_241"Java(TM) SE Runtime Environment (build 1.8.0_241-b07)Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程池源码简单分析"><a href="#线程池源码简单分析" class="headerlink" title="线程池源码简单分析"></a>线程池源码简单分析</h2><p>由示例代码中可以看到</p><pre class="line-numbers language-java"><code class="language-java">BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RejectedExecutionHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> executorMaximumPoolSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>线程池直接使用了 ThreadPoolExecutor ，任务队列使用了 LinkedBlockingQueue 并设置了size，拒绝策略自行实现了 RejectedExecutionHandler 。</p><p>所以重点在于 ThreadPoolExecutor 的内部实现。</p><h3 id="源码与简单解释"><a href="#源码与简单解释" class="headerlink" title="源码与简单解释"></a>源码与简单解释</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Creates a new {@code ThreadPoolExecutor} with the given initial     * parameters and default thread factory.     *     * @param corePoolSize the number of threads to keep in the pool, even     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set     * @param maximumPoolSize the maximum number of threads to allow in the     *        pool     * @param keepAliveTime when the number of threads is greater than     *        the core, this is the maximum time that excess idle threads     *        will wait for new tasks before terminating.     * @param unit the time unit for the {@code keepAliveTime} argument     * @param workQueue the queue to use for holding tasks before they are     *        executed.  This queue will hold only the {@code Runnable}     *        tasks submitted by the {@code execute} method.     * @param handler the handler to use when execution is blocked     *        because the thread bounds and queue capacities are reached     * @throws IllegalArgumentException if one of the following holds:&lt;br>     *         {@code corePoolSize &lt; 0}&lt;br>     *         {@code keepAliveTime &lt; 0}&lt;br>     *         {@code maximumPoolSize &lt;= 0}&lt;br>     *         {@code maximumPoolSize &lt; corePoolSize}     * @throws NullPointerException if {@code workQueue}     *         or {@code handler} is null     */</span>    <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>corePoolSize</p><p>线程池中的核心线程数。除非设置了allowCoreThreadTimeOut，否则一直存活。</p></li><li><p>maximumPoolSize</p><p>线程池中的最大线程数。</p></li><li><p>workQueue</p><p>用于保存还没执行到的任务的队列。</p></li><li><p>handler</p><p>线程池的饱和策略，当线程池中的阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，需要进行某种处理，默认是抛出异常，这里是将任务放入workQueue中</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//只是对参数做了判空</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                null <span class="token operator">:</span>                AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//提交任务时调用    execute ，源码中的注释已经将基本的流程说明清楚了，这里就不翻译了。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*         * Proceed in 3 steps:         *         * 1. If fewer than corePoolSize threads are running, try to         * start a new thread with the given command as its first         * task.  The call to addWorker atomically checks runState and         * workerCount, and so prevents false alarms that would add         * threads when it shouldn't, by returning false.         *         * 2. If a task can be successfully queued, then we still need         * to double-check whether we should have added a thread         * (because existing ones died since last checking) or that         * the pool shut down since entry into this method. So we         * recheck state and if necessary roll back the enqueuing if         * stopped, or start a new thread if there are none.         *         * 3. If we cannot queue task, then we try to add a new         * thread.  If it fails, we know we are shut down or saturated         * and so reject the task.         */</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//isRunning 线程池使用int 的前个二进制3位表示状态，后29位表示数量，具体值看下面说明。</span>    <span class="token comment" spellcheck="true">//当当前运行的线程数量大于设定的核心线程数量时，会优先将任务放入队列中。</span>    <span class="token comment" spellcheck="true">//代入实际业务处理，此处会导致任务数小于队列最大值时，线程池中只有核心线程在处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//若队列已经满了，则会尝试将直接添加worker，若当前核心线程数小于设定的最大线程数，则会新增线程。</span>    <span class="token comment" spellcheck="true">//代入实际业务处理，此处会导致当模块启动时，待处理任务数为70，大于队列最大长度50，若核心线程数是8，最大线程数是30，则会使线程数增加到20处理任务；若核心线程数是8，最大线程数是10，则会增加到10个线程数，且有部分任务会执行reject策略。详细见下面实例分析</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//29</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1左移29位后，二进制表示： 10 0000 0000 0000 0000 0000 0000 0000 ，-1 后则为 1 1111 1111 1111 1111 1111 1111 1111</span><span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//11100000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//100000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//1000000000000000000000000000000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1100000000000000000000000000000</span><span class="token comment" spellcheck="true">// Packing and unpacking ctl</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据设定的核心线程数和最大线程数来决定是否要新增线程来处理任务</span><span class="token comment" spellcheck="true">/**     * Checks if a new worker can be added with respect to current     * pool state and the given bound (either core or maximum). If so,     * the worker count is adjusted accordingly, and, if possible, a     * new worker is created and started, running firstTask as its     * first task. This method returns false if the pool is stopped or     * eligible to shut down. It also returns false if the thread     * factory fails to create a thread when asked.  If the thread     * creation fails, either due to the thread factory returning     * null, or due to an exception (typically OutOfMemoryError in     * Thread.start()), we roll back cleanly.     *     * @param firstTask the task the new thread should run first (or     * null if none). Workers are created with an initial first task     * (in method execute()) to bypass queuing when there are fewer     * than corePoolSize threads (in which case we always start one),     * or when the queue is full (in which case we must bypass queue).     * Initially idle threads are usually created via     * prestartCoreThread or to replace other dying workers.     *     * @param core if true use corePoolSize as bound, else     * maximumPoolSize. (A boolean indicator is used here rather than a     * value to ensure reads of fresh values after checking other pool     * state).     * @return true if successful     */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例分析与代码验证"><a href="#实例分析与代码验证" class="headerlink" title="实例分析与代码验证"></a>实例分析与代码验证</h3><ul><li>核心线程数4，最大线程数10，队列长度20，任务数20</li></ul><pre class="line-numbers language-shell"><code class="language-shell">$ mvn spring-boot:run2020-09-13 13:58:54.531  INFO 19092 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.176 seconds (JVM running for 1.413)2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:02020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:02020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:02020-09-13 13:58:54.537  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:162020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:152020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:142020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:132020-09-13 13:58:54.547  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:122020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 9 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:102020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 8 ActiveCount: 3 PoolSize:4 TaskCount:19 Queue size:102020-09-13 13:58:54.554  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 10 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:92020-09-13 13:58:54.557  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:82020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 13 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:62020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 12 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:72020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 14 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:52020-09-13 13:58:54.567  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 15 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:42020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 17 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:22020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 18 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:12020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 16 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:32020-09-13 13:58:54.578  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 19 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务数量小于队列最大长度时，20个任务由4个线程消费完</p><ul><li>核心线程数4，最大线程数10，队列长度20，任务数30</li></ul><pre class="line-numbers language-shell"><code class="language-shell">2020-09-13 14:06:55.919  INFO 20216 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.177 seconds (JVM running for 1.412)2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:02020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:02020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:5 Queue size:12020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:202020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 6 PoolSize:6 TaskCount:26 Queue size:202020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:202020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:202020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 9 PoolSize:9 TaskCount:29 Queue size:202020-09-13 14:06:55.925  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:202020-09-13 14:06:55.925  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:202020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:192020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:182020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:172020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:162020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:152020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 9 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:142020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:132020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:122020-09-13 14:06:55.935  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:112020-09-13 14:06:55.935  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:102020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:92020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:82020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:72020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:62020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:52020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:42020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:32020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:22020-09-13 14:06:55.945  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:12020-09-13 14:06:55.945  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 23 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务数量大于队列最大长度，任务数量-队列最大长度&lt;最大线程数量时，超过队列最大长度的任务会尝试新增线程（由日志中第6行可以推断出），30个任务由10个线程消费完。</p><p>且如果任务数设置为27，则处理任务线程数为7，这也就解释了实际环境中为什么有时候会有37个线程处理消息，有时候有500个线程处理（最大线程数值模块设置为500）。</p><ul><li>核心线程数4，最大线程数10，队列长度20，任务数50</li></ul><pre class="line-numbers language-shell"><code class="language-shell">2020-09-13 14:14:11.501  INFO 20899 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.17 seconds (JVM running for 1.402)2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:02020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:02020-09-13 14:14:11.509  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:202020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:02020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:202020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:202020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:202020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:202020-09-13 14:14:11.510  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:202020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:202020-09-13 14:14:11.515  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:192020-09-13 14:14:11.519  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:31 Queue size:192020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:32 Queue size:192020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:33 Queue size:192020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 9 ActiveCount: 9 PoolSize:10 TaskCount:34 Queue size:192020-09-13 14:14:11.522  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:202020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:192020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:37 Queue size:192020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:202020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:39 Queue size:202020-09-13 14:14:11.525  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:192020-09-13 14:14:11.529  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:202020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:192020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:202020-09-13 14:14:11.532  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:45 Queue size:192020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:192020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:182020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:182020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:48 Queue size:182020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 23 ActiveCount: 9 PoolSize:10 TaskCount:48 Queue size:182020-09-13 14:14:11.535  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 30 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:192020-09-13 14:14:11.539  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 31 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:182020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 32 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:172020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 33 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:162020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 36 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:132020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 37 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:122020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 38 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:112020-09-13 14:14:11.544  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 39 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:102020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 35 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:132020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 34 ActiveCount: 8 PoolSize:10 TaskCount:50 Queue size:142020-09-13 14:14:11.545  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 40 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:92020-09-13 14:14:11.550  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 41 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:82020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 42 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:72020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 43 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:62020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 45 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:42020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 44 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:42020-09-13 14:14:11.555  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 46 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:32020-09-13 14:14:11.555  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 47 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:22020-09-13 14:14:11.556  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 48 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:12020-09-13 14:14:11.558  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 49 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务数量大于最大线程数加上队列长度，会执行拒绝策略，在此处重写了 rejectedExecution 使用put阻塞将消息插入队列，所以所有任务都会被处理。</p><p>至此，如何产生不同数量线程的原因找到了，但更进一步思考，非核心线程在产生之后 就会一直存在去处理消息吗？有没有什么情况下整个线程池的线程数量会下降为核心线程数量？</p><h2 id="添加线程后续"><a href="#添加线程后续" class="headerlink" title="添加线程后续"></a>添加线程后续</h2><h3 id="源码与简单解释-1"><a href="#源码与简单解释-1" class="headerlink" title="源码与简单解释"></a>源码与简单解释</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取锁</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//workers是hashset， getPoolSize 方法获取的就是workers的大小</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**         * Creates with given first task and thread from ThreadFactory.         * @param firstTask the first task (null if none)         */</span><span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** Delegates main run loop to outer runWorker  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Main worker run loop.  Repeatedly gets tasks from queue and     * executes them, while coping with a number of issues:     *     * 1. We may start out with an initial task, in which case we     * don't need to get the first one. Otherwise, as long as pool is     * running, we get tasks from getTask. If it returns null then the     * worker exits due to changed pool state or configuration     * parameters.  Other exits result from exception throws in     * external code, in which case completedAbruptly holds, which     * usually leads processWorkerExit to replace this thread.     *     * 2. Before running any task, the lock is acquired to prevent     * other pool interrupts while the task is executing, and then we     * ensure that unless pool is stopping, this thread does not have     * its interrupt set.     *     * 3. Each task run is preceded by a call to beforeExecute, which     * might throw an exception, in which case we cause thread to die     * (breaking loop with completedAbruptly true) without processing     * the task.     *     * 4. Assuming beforeExecute completes normally, we run the task,     * gathering any of its thrown exceptions to send to afterExecute.     * We separately handle RuntimeException, Error (both of which the     * specs guarantee that we trap) and arbitrary Throwables.     * Because we cannot rethrow Throwables within Runnable.run, we     * wrap them within Errors on the way out (to the thread's     * UncaughtExceptionHandler).  Any thrown exception also     * conservatively causes thread to die.     *     * 5. After task.run completes, we call afterExecute, which may     * also throw an exception, which will also cause thread to     * die. According to JLS Sec 14.20, this exception is the one that     * will be in effect even if task.run throws.     *     * The net effect of the exception mechanics is that afterExecute     * and the thread's UncaughtExceptionHandler have as accurate     * information as we can provide about any problems encountered by     * user code.     *     * @param w the worker     */</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span>        <span class="token comment" spellcheck="true">//当启动了一个worker之后，会一直去获取队列里面的任务。 这也就是当 任务数量大于队列长度时，新增的线程会一直工作下去的原因</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// If pool is stopping, ensure thread is interrupted;</span>            <span class="token comment" spellcheck="true">// if not, ensure thread is not interrupted.  This</span>            <span class="token comment" spellcheck="true">// requires a recheck in second case to deal with</span>            <span class="token comment" spellcheck="true">// shutdownNow race while clearing interrupt</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                 <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Performs blocking or timed wait for a task, depending on     * current configuration settings, or returns null if this worker     * must exit because of any of:     * 1. There are more than maximumPoolSize workers (due to     *    a call to setMaximumPoolSize).     * 2. The pool is stopped.     * 3. The pool is shutdown and the queue is empty.     * 4. This worker timed out waiting for a task, and timed-out     *    workers are subject to termination (that is,     *    {@code allowCoreThreadTimeOut || workerCount > corePoolSize})     *    both before and after the timed wait, and if the queue is     *    non-empty, this worker is not the last thread in the pool.     *     * @return task, or null if the worker must exit, in which case     *         workerCount is decremented     */</span><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Are workers subject to culling?</span>        <span class="token comment" spellcheck="true">//在本次设置中没有设置allowCoreThreadTimeOut，所以为默认值false。 任务数量大于队列长度时， wc > corePoolSize 成立，不过也就是会让下面获取下个任务多了个超时检查而已。 若60s（在本案例中的设置）队列为空，就会关闭超过核心线程的部分（不过对于当前业务来说，永远不会关闭 :)  ）</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//poll和take差别在于poll多了keepAliveTime的检查，最后都是调用dequeue</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>            workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例分析与代码验证-1"><a href="#实例分析与代码验证-1" class="headerlink" title="实例分析与代码验证"></a>实例分析与代码验证</h3><ul><li>将线程池设置参数 keepAliveTime 设为1s，在所有任务处理完后查看线程池中的线程数量，可以验证。2s 后线程数量等于设置的核心线程数</li></ul><pre class="line-numbers language-shell"><code class="language-shell">2020-09-14 13:42:01.380  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:02020-09-14 13:42:03.381  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:4 TaskCount:50 Queue size:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>将  allowCoreThreadTimeOut 设置为 true。2s 后线程池中线程数连核心线程也不在保持</li></ul><pre class="line-numbers language-shell"><code class="language-shell">2020-09-14 13:47:39.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:02020-09-14 13:47:41.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:0 TaskCount:50 Queue size:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="结论与参数说明"><a href="#结论与参数说明" class="headerlink" title="结论与参数说明"></a>结论与参数说明</h2><ul><li><strong>corePoolSize</strong> :核心线程数。根据正常情况下每秒的任务数量，单个任务消耗时间来确定。若正常情况下每秒600个请求，平均每个请求耗时20ms，那么需要设置为12，同时还要考虑线程因为其他任务被占用或因为异常导致线程停滞，还有业务主要是CPU密集还是IO密集，避免增加过多线程引起上下文切换开销大于业务开销。</li><li><strong>maximumPoolSize</strong>: 当任务数量超过队列长度后，允许开启的最大线程数。需要注意的是若不存在空闲时间来让线程消亡，会一直保持当前的线程数量处理消息。即 corePoolSize &lt;= 实际线程数 &lt;= maximumPoolSize</li><li><strong>keepAliveTime</strong>: worker 获取task时，最大等待的时间。 即当线程处理完成当前任务，从任务队列中获取下一个任务时，最大允许队列为空的时间。</li><li><strong>workQueue</strong>: 任务队列。这里需要关注的是队列的长度。需要考虑自身业务是否允许消息延时处理？最大允许多久的延时？若可接受5s的延时，平均每个请求处理时间为20ms，核心线程数为4，则5s内允许积压1000条请求。若队列长度设置为1000 ，当请求数量积压超过1000时， 会增加不超过最大线程数的线程处理，若 maximumPoolSize 为20，假设此时处理请求线程数为最大20，则允许积压5000条消息。所以需要根据业务突增来确定</li><li><strong>allowCoreThreadTimeOut</strong> : 允许核心线程超时。请求量不大可以考虑设置为true，一直有消息处理的情况下设置true也没啥用。</li></ul><p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
