{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/md5.min.js","path":"libs/others/md5.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/md5.min.js.map","path":"libs/others/md5.min.js.map","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/contact.jpg","path":"medias/contact.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.png","path":"medias/avatars/avatar.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js.map","path":"libs/gitalk/gitalk.min.js.map","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599446099959},{"_id":"source/404.md","hash":"b93da050b09cdae1d0d38adbbc0cc90a22c9f4ef","modified":1599446477516},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1586054623000},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1586054623000},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1586054623000},{"_id":"themes/matery/README_CN.md","hash":"6642329285a429c48e8e06b5df9eec13770a1eb8","modified":1600185198566},{"_id":"themes/matery/_config.yml","hash":"9bc5edbe77ee261325ebabf53dc42b8ec80529f2","modified":1606145959547},{"_id":"source/_data/friends.json","hash":"48cce76568db3690d3cbf1259224cefe1b967bdb","modified":1600359900770},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1586054623000},{"_id":"source/_posts/【JAVA】AtomicLong-LongAdder-性能对比.md","hash":"27951a70517a8af57656393a085e711b9521b50d","modified":1606142456752},{"_id":"source/_posts/【JAVA】线程池代码的一次深入分析.md","hash":"56a1a14bc0d095d58e486634970d4e6da0fb7639","modified":1606142072153},{"_id":"source/_posts/【Python3】单脚本运行时限制内存.md","hash":"f8cc63a5229b7c6e120c4ed0e7ca018bde0da2a0","modified":1606144295699},{"_id":"source/_posts/【Unraid】NAS-小主机配置分享.md","hash":"278e1f30ecf249465aabb9fd4fd97ed5ded248ee","modified":1606142459920},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限.md","hash":"d23598342f1c5d75f3b4c4043fa7c0a101bfd58c","modified":1606148668733},{"_id":"source/about/index.md","hash":"03b24d5b6f759d4f643daf7aaef01adadb2fbd5d","modified":1600185410750},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1586054623000},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1586054623000},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验.md","hash":"174e80d5b22de77545e943eb18926ceee8691000","modified":1606142453900},{"_id":"source/contact/index.md","hash":"e740f40d43d896dd2138b8b8cfb55c40d44ec0c3","modified":1600359740459},{"_id":"source/friends/index.md","hash":"8dd052eb8458e2785b33f8bec0a8505f4fc8fe08","modified":1600359780020},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1586054623000},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1586054623000},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1586054623000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1586054623000},{"_id":"themes/matery/layout/about.ejs","hash":"1d26298ef794bfab311b8a66084dfc54b60f3d93","modified":1600870429128},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1586054623000},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1586054623000},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1586054623000},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1586054623000},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1586054623000},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1586054623000},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1586054623000},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1586054623000},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1586054623000},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1586054623000},{"_id":"themes/matery/source/favicon.png","hash":"47a2857085d15e32baaa5544382a957c488a8de3","modified":1599665657133},{"_id":"source/_posts/【JAVA】AtomicLong-LongAdder-性能对比/breachmark.png","hash":"0f33363981042eeeb9055595f4469164b0e6cc89","modified":1605958199690},{"_id":"source/_posts/【JAVA】AtomicLong-LongAdder-性能对比/线程池测试并发.png","hash":"3ea700a52fc3e942e8cd5d5a4df96a6383578768","modified":1605959905040},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/50验证失败.png","hash":"6ce3c81ab3607e9e45f4af2bcdcc8be525b00402","modified":1604587456000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root4.png","hash":"440b536d008e44d87caa0490e63935490db83e4e","modified":1604769317000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/下载小米解锁工具.png","hash":"75af736498b2fed0043fc445145787819426d85a","modified":1604507298000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/准备开始解锁.png","hash":"e3d0379cf2afb8a2c0c0fd3234256447a116f4c4","modified":1604586578000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/下载TWRP.png","hash":"c2a8f02eb569c5d45d07a178b3f0c8dcd9bbf3a9","modified":1604770003000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷入REC.png","hash":"e26641b900b6285dd68607dc5d2400b5d3b5e220","modified":1604770406000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷入REC1.png","hash":"13b1e2e2fddcd811a81972a564a1f219a33130a3","modified":1604770429000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷入REC成功.png","hash":"da11b3bd7632717751d7e9c9614b4102b8c9e53e","modified":1604770623000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/打开搞机助手.png","hash":"b41275cfa9df48aa1ee3c04c1a1a65b62e8b5b77","modified":1604770342000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/搞机助手安装修复补丁.png","hash":"89dfd12ed1f93afdf41abb5e21c76f7fb687882c","modified":1604733324000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/手机连接上解锁工具.png","hash":"6480f34f2076e88f03ea45a921a8c54629133343","modified":1604749788000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/线刷中.png","hash":"30e10761eba611a3dfa564096e10637f442a7a92","modified":1604767567000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/检测不到手机.png","hash":"aa42f1dbfb6f8c1694ac8730661dbbeb2931f7d7","modified":1604751389000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/线刷完成.png","hash":"eb7671684eb60e29bd86621f630fc21b1f7b2d79","modified":1604767777000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/登录小米解锁工具.png","hash":"54626291c95b8b21f1ec53274cb48a2f3d6b7511","modified":1604507196000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁95.png","hash":"8002ad45c9ebfec18f92cca4a7fe86d4d3e2a6c2","modified":1604732854000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁工具连接上手机.png","hash":"bc207392e442e226040f9769915bceef1ae069a9","modified":1604749273000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁成功.png","hash":"6c9d9a13a002035d6731e887a4a3d5f5b6601e73","modified":1604732864000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1586054623000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"ab610754bf6aea844b5ae0802ed37c73b5f1dc9f","modified":1586054623000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1586054623000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1586054623000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"22997503d643e09a486589adf8d6bfee094ba67a","modified":1600568382706},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"d4a2eaa6f733e80ce6385132cd6746f9a2e139d5","modified":1600572138821},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1586054623000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1586054623000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1586054623000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1586054623000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"e8e5b5980ee869e7f773de0a979b8582acbbc029","modified":1599756123196},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1586054623000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1586054623000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1586054623000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1586054623000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1586054623000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1586054623000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1586054623000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1586054623000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1586054623000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1586054623000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e2865b3003ec07892e9112692e7ec786ee926ae8","modified":1586054623000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1586054623000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1586054623000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"e653845d25308f573a4aea91f4d4774c822bcdda","modified":1600185420982},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1586054623000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1586054623000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1586054623000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1586054623000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1586054623000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1586054623000},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1586054623000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1586054623000},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1586054623000},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1586054623000},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1586054623000},{"_id":"themes/matery/source/css/matery.css","hash":"0d345a72318fd7aadcb6fcaa6f3abac94b91001c","modified":1586054623000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1586054623000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1586054623000},{"_id":"themes/matery/source/medias/logo.png","hash":"47a2857085d15e32baaa5544382a957c488a8de3","modified":1599665657133},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root2.png","hash":"4621bdbd6e8dd8c6a1bf666a417f8664e0e472ab","modified":1604769278000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root5.png","hash":"9d11cea00d7f847b15fef048df059a55ee13bee6","modified":1604769338000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/手机系统信息.jpg","hash":"1afb4f148f282f1b0b9c7c8581999f8c85197d1a","modified":1604747431000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/获取root权限提示太多.jpg","hash":"d965290401419e675e13a566c1af0149f0435593","modified":1604772216000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁完成后手机状态.jpg","hash":"65c7e1438c7492db30ae5b436ae09754d0af640d","modified":1230739542000},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/11.jpg","hash":"f2c76daf2dd15d6763a4a7849724fcf5846049df","modified":1603036529012},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/12.jpg","hash":"04534c15c54e7153a4c3804b0f8ae952c79e90b5","modified":1603036528944},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/2.jpg","hash":"f4a9d61298df91611126b9326c93e23a7dd3989e","modified":1603036529036},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/3.jpg","hash":"23c20b4b91f7ea89a04800a660f233f14afd66ed","modified":1603036528972},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/4.jpg","hash":"8106e14bc69a0faf870ffcb7ab5e51126a0746ef","modified":1603036528960},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/6.jpg","hash":"a3d1280ad0fc9e91d70d06caaf312415d5af0d18","modified":1603036529024},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/7.jpg","hash":"24478f0dfbf22053f3610bbb7256df3405dfbd9c","modified":1603036528988},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/8.jpg","hash":"ada522abebc6a02397c7b0c1ee3e346cf8da2f0c","modified":1603036529000},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/9.jpg","hash":"d76fdb415a582d16835261d062293665baea391a","modified":1603036529048},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root3.png","hash":"6aec4c1860ace3b6250c50b93ac2e77ea941622e","modified":1604769299000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/安装驱动.png","hash":"1d02f537d4805312c31e21c49535648755f6c687","modified":1604749578000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1586054623000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1586054623000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1586054623000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1586054623000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1586054623000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1586054623000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"fe5406a41cf222f39919630efd9012d08b7414aa","modified":1600571645718},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1586054623000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1586054623000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1586054623000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1586054623000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1586054623000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1586054623000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1586054623000},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1586054623000},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1586054623000},{"_id":"themes/matery/source/libs/others/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1600569411169},{"_id":"themes/matery/source/libs/others/md5.min.js.map","hash":"a832c3d9d8f5f48f3ba05f6e6b864210947c309f","modified":1600570699441},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1586054623000},{"_id":"themes/matery/source/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1586054623000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1586054623000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1586054623000},{"_id":"themes/matery/source/medias/contact.jpg","hash":"e368fe87f640b9d51783e6adef219c313ed362dd","modified":1600186132789},{"_id":"themes/matery/source/medias/avatars/avatar.png","hash":"47a2857085d15e32baaa5544382a957c488a8de3","modified":1599665657133},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"b6b2023553e655ec0f66bae42b7bc2169c51c969","modified":1600274887105},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"dbd55ea98652d5c6814713ff1c1f19fce4ab4277","modified":1600359034070},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"56fba51ebfb95b6058c99a333ef6033338e38dd1","modified":1600359033298},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"b9f648c3f8367431df15656622fe8ff1f03f2a1c","modified":1600489126615},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"84b835caf0098e1feced97d78320c62eae21e059","modified":1600359034638},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"4be0b8eb65a1a47577dfe766793ce8003aee6068","modified":1600274889217},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"0cd500b6855dea30efa162b6ef691d7bad8d2a4f","modified":1600274887865},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"c97e9c16ca5cd98b50d3d96443735aa22ca310b1","modified":1600359034946},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷到开发板.jpg","hash":"54d38bae301b1627dcc674b7e097ac2c318bc037","modified":1230739359000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1586054623000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1586054623000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1586054623000},{"_id":"themes/matery/source/medias/reward/wechat.jpg","hash":"a341108110471ca267866bccb1913f35a420371f","modified":1600184980565},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"c05279be2f777ed9014a93c0ee6a573d45a0e89a","modified":1600274889553},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"078434c1e6f32a4bab3c912d64a81885406a76a7","modified":1600274889093},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"d24f54567e777d47ba84c06dd92108eb285ea4b7","modified":1600274888961},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"2b7a7acfbd777079934e4abf7919ca67cfb997a0","modified":1600274888209},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"7d231ba09367b5286916ba1e0d0bcce1f07cbb12","modified":1600359034826},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"6fe0d3bb8bdec3f4fe45fb564d48ac1a1ab9a802","modified":1600359033998},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"c838db97efe291dc57c201d9ea0990f4efbfda55","modified":1600274889937},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"e3555a900260ac37e54bbdefb58f6557206089de","modified":1600359033550},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"e6c14bbcdef9d0f4e8dac0fe3bc6a4436b2c89a0","modified":1600274887673},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"29c55a1361d3caea993510a3eb0ecefa96b45070","modified":1600359034342},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁system.jpg","hash":"871c8828a1c17981bbf89ad74ce1998be3b90ee1","modified":1604772242000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1586054623000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1586054623000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1586054623000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"df22430618f81906cb36eb85fa8e6d40a4b225a5","modified":1600359033190},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"f2ac8776f235892ef4a0f0965f1ace9842a043a9","modified":1600360315868},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"df22430618f81906cb36eb85fa8e6d40a4b225a5","modified":1600359033190},{"_id":"themes/matery/source/medias/banner/7.jpg","hash":"685da2ebf684d39b9acc356c65c0429b87edfa91","modified":1600489126503},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1586054623000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"b64e92c4de62ea8f295ba4c0b005024291d5ee84","modified":1600184925428},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"9d0af8f3e2d5faf7e9bb98733cbd882a39a5cfcf","modified":1600359033786},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"c28687f7cc1a5513d929261555a551666e1d3683","modified":1600359034550},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"8338f8e1ddfe0f920cb6685754a7d0f603dbd298","modified":1600274887613},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586054623000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"c0046f94426c11f353a03e42785f989546262bc9","modified":1600571610989},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"34c9d123151c8f3284e5b9097b593889f266cdf5","modified":1600274889709},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"750156db5e4907c6bb358e5c5a1d76aa72b5c183","modified":1600270766405},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"258a39b9c9dd8dd3edd495e423294c454338a1c4","modified":1600487189518},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586054623000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1586054623000},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/设备解锁状态-未解锁.jpg","hash":"d2ae0be09be3659fdf7aa387b6337225ad0d8382","modified":1604507044000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586054623000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1586054623000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"604d19d20b3abf60e0172a4244bc390bbfbecfa3","modified":1600489126579},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"7514068b16940a909aaa95ccb0c049ebd1629320","modified":1600274888849},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root1.png","hash":"0696732def0fc0c7a1f72bde3d737212b05a57a2","modified":1604769253000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"5ab3285419150acf2ca24f685e47e3baeaecff60","modified":1600487246980},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"313dd2cfb2cc203a182d4728465c2201287a286b","modified":1600489126343},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"1f9211baf5b4444291482de80f23135b4def1204","modified":1600186362198},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"22e35ade9ddd757a1494978084cc406eedf04584","modified":1600186166554},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js.map","hash":"62f519169cf3458302c326cf4b1f4c766a3b3bea","modified":1600571666726},{"_id":"public/baidu_urls.txt","hash":"9f3ed93144bb6d25cce66994a4edeb20bd3045c1","modified":1606148141510},{"_id":"public/baidusitemap.xml","hash":"f75a19cabbf65c5480fd6b4d0f512c829e0e3ec4","modified":1606148693390},{"_id":"public/atom.xml","hash":"5f66a676f0b1553fa25ce579b7f70bd25db883eb","modified":1606148693392},{"_id":"public/search.xml","hash":"0efabee222097f01ab089ec88f620f3363ce0409","modified":1606148693709},{"_id":"public/sitemap.xml","hash":"68791c6128d70876b4fe6071247eef4a7b62eba7","modified":1606148693781},{"_id":"public/404.html","hash":"be1bdc374a3c5f3b0306b97dfdc96ab3f6f05ce5","modified":1606148141902},{"_id":"public/about/index.html","hash":"54bb4b0e1e3c91d10a6cee5e02b5e61892afc49c","modified":1606148141902},{"_id":"public/archives/index.html","hash":"81c04c28ea255aadc5774ec5024ab99597611b09","modified":1606148141921},{"_id":"public/categories/index.html","hash":"17e856b60dc33af2e5783843fb418d72d8e1bf5f","modified":1606148141924},{"_id":"public/contact/index.html","hash":"72fe0232d5efe0f2f7a07bfd2246a3aa69498ba5","modified":1606148141924},{"_id":"public/friends/index.html","hash":"0575a91c7725656d083e21c05a9ca29556624513","modified":1606148141924},{"_id":"public/tags/index.html","hash":"136e710ae156d9270c47f58f98a4007db9bf4c8c","modified":1606148141924},{"_id":"public/2020/11/22/java-atomiclong-longadder-xing-neng-dui-bi/index.html","hash":"8559e5e165bd1e6f80e6446dc7cafb3cb6197683","modified":1606148141924},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/index.html","hash":"0b123157b1114731b359cd321a5ba1efab300840","modified":1606148693789},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/index.html","hash":"8b39dbdc0a8ccfb8e74acb25401735446820a67d","modified":1606148141924},{"_id":"public/2020/10/08/unraid-nas-xiao-zhu-ji-pei-zhi-fen-xiang/index.html","hash":"fc90ce28221942c49874233e4f5a7480a71ad12a","modified":1606148141924},{"_id":"public/2020/09/16/python3-dan-jiao-ben-yun-xing-shi-xian-zhi-nei-cun/index.html","hash":"2e1c4a810369f72c52d109b0a7b28ccefb9a60f9","modified":1606148141924},{"_id":"public/2020/09/13/java-xian-cheng-chi-dai-ma-de-yi-ci-shen-ru-fen-xi/index.html","hash":"cb8e369f7e161f84ba08c5517e50d5c45403295f","modified":1606148141924},{"_id":"public/archives/2020/index.html","hash":"dbfbcdbe5fd47cfe25e8d8647c226e32819d16d7","modified":1606148141925},{"_id":"public/archives/2020/09/index.html","hash":"274a63cb6c64d89f07f14b20f42f84fba5f26827","modified":1606148141925},{"_id":"public/archives/2020/10/index.html","hash":"89a2a330fb095fb2707bf2be17d5627395c26999","modified":1606148141925},{"_id":"public/archives/2020/11/index.html","hash":"4d178b159db5091c442ff47d8a5c57f1dfe562c2","modified":1606148141925},{"_id":"public/categories/编程/index.html","hash":"c7616e0fd8767ecfcecef36b749abcbbf5849622","modified":1606148141924},{"_id":"public/categories/小技巧/index.html","hash":"51a52d7c9a5d9c3976eb256bafd339af778d2011","modified":1606148141925},{"_id":"public/categories/折腾/index.html","hash":"ab578b3df08b827e3b1e7fea7c1608dc639ffc57","modified":1606148141925},{"_id":"public/categories/开箱/index.html","hash":"bf6e9dc749800343777175a8a354d59337cd228e","modified":1606148141925},{"_id":"public/categories/开箱/折腾/index.html","hash":"f67550373218465626642050228e69e8b8adef9c","modified":1606148141925},{"_id":"public/index.html","hash":"b16047172319ec395a4629f2985bacfbf4aa09f1","modified":1606148141925},{"_id":"public/tags/JAVA/index.html","hash":"a4a062f2867b171831ff87ecdda62c294d7bdcd9","modified":1606148141925},{"_id":"public/tags/源码分析/index.html","hash":"37dcd8b20089d9603b5f4d4641e68637044846cd","modified":1606148141925},{"_id":"public/tags/程序员的一天/index.html","hash":"99520f890aa7100c6aaed4e3540f8212e4d12c0d","modified":1606148141925},{"_id":"public/tags/线程池/index.html","hash":"ad1bfeb321878153346d7c866c282ed69c5a0c97","modified":1606148141925},{"_id":"public/tags/Python/index.html","hash":"64cecb15decff11c8d5520be2902c943dd3dd8ea","modified":1606148141925},{"_id":"public/tags/内存/index.html","hash":"d231e03eaf7f03c66cfccef27d800d151421cf30","modified":1606148141925},{"_id":"public/tags/Unraid/index.html","hash":"e49b5ad57bc752d5a10ecb36cafdc597cc909ebb","modified":1606148141925},{"_id":"public/tags/NAS/index.html","hash":"fc083a023d32ae53822ce923e5ab18fbc4fbc9c3","modified":1606148141925},{"_id":"public/tags/其他/index.html","hash":"9549e4e43fe3da333b8bd77b6f8bc83a85613832","modified":1606148141925},{"_id":"public/tags/刷机/index.html","hash":"ef4cc23b0297ee7e9cbdb9de3214bce4d16d95a2","modified":1606148141925},{"_id":"public/tags/开箱/index.html","hash":"e8d1cd59fdb73f35dda9770a66aca3f744b9b0aa","modified":1606148141925},{"_id":"public/tags/折腾/index.html","hash":"04c52c4f98c54f2783559f30fe6ba9c4f60be5b3","modified":1606148141925},{"_id":"public/tags/ZigBee/index.html","hash":"9a4e2eb76e3e71ef78603e8318dab57beb8f37e7","modified":1606148141925},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1606146242528},{"_id":"public/favicon.png","hash":"47a2857085d15e32baaa5544382a957c488a8de3","modified":1606146242544},{"_id":"public/medias/logo.png","hash":"47a2857085d15e32baaa5544382a957c488a8de3","modified":1606146242544},{"_id":"public/libs/others/md5.min.js.map","hash":"a832c3d9d8f5f48f3ba05f6e6b864210947c309f","modified":1606146242544},{"_id":"public/medias/avatars/avatar.png","hash":"47a2857085d15e32baaa5544382a957c488a8de3","modified":1606146242544},{"_id":"public/medias/banner/2.jpg","hash":"b6b2023553e655ec0f66bae42b7bc2169c51c969","modified":1606146242544},{"_id":"public/medias/featureimages/16.jpg","hash":"dbd55ea98652d5c6814713ff1c1f19fce4ab4277","modified":1606146242544},{"_id":"public/medias/featureimages/19.jpg","hash":"56fba51ebfb95b6058c99a333ef6033338e38dd1","modified":1606146242544},{"_id":"public/medias/featureimages/25.jpg","hash":"b9f648c3f8367431df15656622fe8ff1f03f2a1c","modified":1606146242544},{"_id":"public/medias/featureimages/5.jpg","hash":"84b835caf0098e1feced97d78320c62eae21e059","modified":1606146242544},{"_id":"public/medias/featureimages/6.jpg","hash":"4be0b8eb65a1a47577dfe766793ce8003aee6068","modified":1606146242544},{"_id":"public/medias/featureimages/7.jpg","hash":"0cd500b6855dea30efa162b6ef691d7bad8d2a4f","modified":1606146242544},{"_id":"public/medias/featureimages/9.jpg","hash":"c97e9c16ca5cd98b50d3d96443735aa22ca310b1","modified":1606146242544},{"_id":"public/medias/featureimages/0.jpg","hash":"c05279be2f777ed9014a93c0ee6a573d45a0e89a","modified":1606146242544},{"_id":"public/medias/reward/wechat.jpg","hash":"a341108110471ca267866bccb1913f35a420371f","modified":1606146242544},{"_id":"public/medias/featureimages/1.jpg","hash":"078434c1e6f32a4bab3c912d64a81885406a76a7","modified":1606146242544},{"_id":"public/medias/featureimages/10.jpg","hash":"d24f54567e777d47ba84c06dd92108eb285ea4b7","modified":1606146242544},{"_id":"public/medias/featureimages/15.jpg","hash":"7d231ba09367b5286916ba1e0d0bcce1f07cbb12","modified":1606146242545},{"_id":"public/medias/featureimages/18.jpg","hash":"6fe0d3bb8bdec3f4fe45fb564d48ac1a1ab9a802","modified":1606146242545},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606146242545},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1606146242545},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606146242545},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606146242545},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606146242545},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1606146242545},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1606146242545},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1606146242545},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606146242545},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1606146242545},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606146242545},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606146242545},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1606146242545},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1606146242545},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1606146242545},{"_id":"public/2020/11/22/java-atomiclong-longadder-xing-neng-dui-bi/breachmark.png","hash":"0f33363981042eeeb9055595f4469164b0e6cc89","modified":1606146242546},{"_id":"public/2020/11/22/java-atomiclong-longadder-xing-neng-dui-bi/线程池测试并发.png","hash":"3ea700a52fc3e942e8cd5d5a4df96a6383578768","modified":1606146242546},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/50验证失败.png","hash":"6ce3c81ab3607e9e45f4af2bcdcc8be525b00402","modified":1606146242546},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/root4.png","hash":"440b536d008e44d87caa0490e63935490db83e4e","modified":1606146242546},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/下载小米解锁工具.png","hash":"75af736498b2fed0043fc445145787819426d85a","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/下载TWRP.png","hash":"c2a8f02eb569c5d45d07a178b3f0c8dcd9bbf3a9","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/准备开始解锁.png","hash":"e3d0379cf2afb8a2c0c0fd3234256447a116f4c4","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/刷入REC.png","hash":"e26641b900b6285dd68607dc5d2400b5d3b5e220","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/刷入REC1.png","hash":"13b1e2e2fddcd811a81972a564a1f219a33130a3","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/刷入REC成功.png","hash":"da11b3bd7632717751d7e9c9614b4102b8c9e53e","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/手机连接上解锁工具.png","hash":"6480f34f2076e88f03ea45a921a8c54629133343","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/打开搞机助手.png","hash":"b41275cfa9df48aa1ee3c04c1a1a65b62e8b5b77","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/搞机助手安装修复补丁.png","hash":"89dfd12ed1f93afdf41abb5e21c76f7fb687882c","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/检测不到手机.png","hash":"aa42f1dbfb6f8c1694ac8730661dbbeb2931f7d7","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/线刷中.png","hash":"30e10761eba611a3dfa564096e10637f442a7a92","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/登录小米解锁工具.png","hash":"54626291c95b8b21f1ec53274cb48a2f3d6b7511","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/线刷完成.png","hash":"eb7671684eb60e29bd86621f630fc21b1f7b2d79","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁95.png","hash":"8002ad45c9ebfec18f92cca4a7fe86d4d3e2a6c2","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁工具连接上手机.png","hash":"bc207392e442e226040f9769915bceef1ae069a9","modified":1606146242547},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁成功.png","hash":"6c9d9a13a002035d6731e887a4a3d5f5b6601e73","modified":1606146242547},{"_id":"public/css/prism-tomorrow.css","hash":"7efd268869bf07673639975ec764c9bdffd0fb04","modified":1606146242547},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1606146242548},{"_id":"public/medias/featureimages/11.jpg","hash":"2b7a7acfbd777079934e4abf7919ca67cfb997a0","modified":1606146242557},{"_id":"public/medias/featureimages/2.jpg","hash":"c838db97efe291dc57c201d9ea0990f4efbfda55","modified":1606146242559},{"_id":"public/medias/featureimages/20.jpg","hash":"e3555a900260ac37e54bbdefb58f6557206089de","modified":1606146242562},{"_id":"public/medias/featureimages/3.jpg","hash":"e6c14bbcdef9d0f4e8dac0fe3bc6a4436b2c89a0","modified":1606146242562},{"_id":"public/medias/featureimages/8.jpg","hash":"29c55a1361d3caea993510a3eb0ecefa96b45070","modified":1606146242562},{"_id":"public/medias/banner/7.jpg","hash":"685da2ebf684d39b9acc356c65c0429b87edfa91","modified":1606146242562},{"_id":"public/medias/reward/alipay.jpg","hash":"b64e92c4de62ea8f295ba4c0b005024291d5ee84","modified":1606146242562},{"_id":"public/medias/featureimages/17.jpg","hash":"c28687f7cc1a5513d929261555a551666e1d3683","modified":1606146242562},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1606146242563},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/11.jpg","hash":"f2c76daf2dd15d6763a4a7849724fcf5846049df","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/12.jpg","hash":"04534c15c54e7153a4c3804b0f8ae952c79e90b5","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/2.jpg","hash":"f4a9d61298df91611126b9326c93e23a7dd3989e","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/3.jpg","hash":"23c20b4b91f7ea89a04800a660f233f14afd66ed","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/4.jpg","hash":"8106e14bc69a0faf870ffcb7ab5e51126a0746ef","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/6.jpg","hash":"a3d1280ad0fc9e91d70d06caaf312415d5af0d18","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/7.jpg","hash":"24478f0dfbf22053f3610bbb7256df3405dfbd9c","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/8.jpg","hash":"ada522abebc6a02397c7b0c1ee3e346cf8da2f0c","modified":1606146242563},{"_id":"public/2020/10/18/kai-xiang-sonoff-zigbee-tao-zhuang-chu-ti-yan/9.jpg","hash":"d76fdb415a582d16835261d062293665baea391a","modified":1606146242563},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/root2.png","hash":"4621bdbd6e8dd8c6a1bf666a417f8664e0e472ab","modified":1606146242563},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/root3.png","hash":"6aec4c1860ace3b6250c50b93ac2e77ea941622e","modified":1606146242564},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/root5.png","hash":"9d11cea00d7f847b15fef048df059a55ee13bee6","modified":1606146242564},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/手机系统信息.jpg","hash":"1afb4f148f282f1b0b9c7c8581999f8c85197d1a","modified":1606146242564},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/获取root权限提示太多.jpg","hash":"d965290401419e675e13a566c1af0149f0435593","modified":1606146242564},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁完成后手机状态.jpg","hash":"65c7e1438c7492db30ae5b436ae09754d0af640d","modified":1606146242564},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606146242573},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1606146242573},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606146242576},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1606146242576},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1606146242576},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606146242576},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606146242576},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1606146242576},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1606146242576},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606146242576},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1606146242576},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606146242576},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606146242576},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606146242576},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606146242576},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606146242576},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1606146242576},{"_id":"public/libs/others/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1606146242576},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1606146242576},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1606146242576},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1606146242576},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1606146242576},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606146242576},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606146242576},{"_id":"public/css/matery.css","hash":"caa63c2c7908e45ebbbea0fbdc72d09b7b6d5b76","modified":1606146242576},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606146242576},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1606146242577},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606146242577},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606146242577},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606146242577},{"_id":"public/libs/gitalk/gitalk.css","hash":"fe5406a41cf222f39919630efd9012d08b7414aa","modified":1606146242577},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606146242577},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606146242577},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606146242577},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606146242577},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1606146242577},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1606146242577},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606146242577},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606146242577},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1606146242577},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1606146242577},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606146242577},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"c0046f94426c11f353a03e42785f989546262bc9","modified":1606146242577},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1606146242577},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606146242577},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1606146242577},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1606146242578},{"_id":"public/medias/banner/1.jpg","hash":"df22430618f81906cb36eb85fa8e6d40a4b225a5","modified":1606146242578},{"_id":"public/medias/banner/4.jpg","hash":"f2ac8776f235892ef4a0f0965f1ace9842a043a9","modified":1606146242578},{"_id":"public/medias/banner/5.jpg","hash":"df22430618f81906cb36eb85fa8e6d40a4b225a5","modified":1606146242578},{"_id":"public/medias/featureimages/4.jpg","hash":"8338f8e1ddfe0f920cb6685754a7d0f603dbd298","modified":1606146242578},{"_id":"public/medias/featureimages/14.jpg","hash":"34c9d123151c8f3284e5b9097b593889f266cdf5","modified":1606146242578},{"_id":"public/medias/featureimages/22.jpg","hash":"258a39b9c9dd8dd3edd495e423294c454338a1c4","modified":1606146242578},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1606146242578},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1606146242578},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1606146242578},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/安装驱动.png","hash":"1d02f537d4805312c31e21c49535648755f6c687","modified":1606146242579},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606146242582},{"_id":"public/medias/contact.jpg","hash":"e368fe87f640b9d51783e6adef219c313ed362dd","modified":1606146242583},{"_id":"public/medias/featureimages/12.jpg","hash":"9d0af8f3e2d5faf7e9bb98733cbd882a39a5cfcf","modified":1606146242583},{"_id":"public/medias/featureimages/21.jpg","hash":"750156db5e4907c6bb358e5c5a1d76aa72b5c183","modified":1606146242583},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁system.jpg","hash":"871c8828a1c17981bbf89ad74ce1998be3b90ee1","modified":1606146242583},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1606146242587},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/刷到开发板.jpg","hash":"54d38bae301b1627dcc674b7e097ac2c318bc037","modified":1606146242587},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/设备解锁状态-未解锁.jpg","hash":"d2ae0be09be3659fdf7aa387b6337225ad0d8382","modified":1606146242592},{"_id":"public/medias/banner/6.jpg","hash":"604d19d20b3abf60e0172a4244bc390bbfbecfa3","modified":1606146242596},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/root1.png","hash":"0696732def0fc0c7a1f72bde3d737212b05a57a2","modified":1606146242601},{"_id":"public/medias/featureimages/13.jpg","hash":"7514068b16940a909aaa95ccb0c049ebd1629320","modified":1606146242604},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1606146242605},{"_id":"public/medias/banner/0.jpg","hash":"5ab3285419150acf2ca24f685e47e3baeaecff60","modified":1606146242606},{"_id":"public/medias/banner/3.jpg","hash":"313dd2cfb2cc203a182d4728465c2201287a286b","modified":1606146242607},{"_id":"public/medias/featureimages/24.jpg","hash":"22e35ade9ddd757a1494978084cc406eedf04584","modified":1606146242607},{"_id":"public/medias/featureimages/23.jpg","hash":"1f9211baf5b4444291482de80f23135b4def1204","modified":1606146242609},{"_id":"public/libs/gitalk/gitalk.min.js.map","hash":"62f519169cf3458302c326cf4b1f4c766a3b3bea","modified":1606146242610},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁到95%.png","hash":"8002ad45c9ebfec18f92cca4a7fe86d4d3e2a6c2","modified":1604732854000},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁到95%.png","hash":"8002ad45c9ebfec18f92cca4a7fe86d4d3e2a6c2","modified":1606146462640},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书.md","hash":"ff80e259bb51eaed0f43c583f4b8d0e54cbf9de8","modified":1606148133170},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/填写信息.png","hash":"f849e07e658daf457e1dfe51932c0b163e5f391e","modified":1606147343078},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/收到邮件.png","hash":"390e023629006c9b5570a8175ed17a0fefb09278","modified":1606147667025},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/选择证书.png","hash":"ae6312714d55027b51dc3a75c81d2f997ed08821","modified":1606147990947},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/勾选在家.png","hash":"0edce885f602980421d25c5d842de8ba999f784d","modified":1606147319782},{"_id":"public/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/index.html","hash":"38de522523d02a0e9b4dd7fce65dc28ab565191a","modified":1606148141927},{"_id":"public/categories/其他/index.html","hash":"a656bb39fdcb3c09d3a40afe1e88fd64373b935c","modified":1606148141927},{"_id":"public/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/填写信息.png","hash":"f849e07e658daf457e1dfe51932c0b163e5f391e","modified":1606148141928},{"_id":"public/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/选择证书.png","hash":"ae6312714d55027b51dc3a75c81d2f997ed08821","modified":1606148141928},{"_id":"public/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/收到邮件.png","hash":"390e023629006c9b5570a8175ed17a0fefb09278","modified":1606148141928},{"_id":"public/2020/10/25/qi-ta-smartgit-shen-qing-fei-shang-ye-ban-zheng-shu/勾选在家.png","hash":"0edce885f602980421d25c5d842de8ba999f784d","modified":1606148141929},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁到95.png","hash":"8002ad45c9ebfec18f92cca4a7fe86d4d3e2a6c2","modified":1604732854000},{"_id":"public/2020/11/01/qi-ta-xiao-mi-6-jie-bl-suo-huo-qu-root-quan-xian/解锁到95.png","hash":"8002ad45c9ebfec18f92cca4a7fe86d4d3e2a6c2","modified":1606148693792}],"Category":[{"name":"编程","_id":"ckhuq03m80005y8gplanyajbt"},{"name":"小技巧","_id":"ckhuq03mk000hy8gpf42bkwt9"},{"name":"折腾","_id":"ckhuq03mk000ly8gpip6e3cuf"},{"name":"开箱","_id":"ckhuq03mm000ty8gpzgvmgcvb"},{"name":"折腾","parent":"ckhuq03mm000ty8gpzgvmgcvb","_id":"ckhuq03mn000zy8gp0wcmlno7"},{"name":"其他","_id":"ckhuqf9bj000biagpp78x6wkm"}],"Data":[{"_id":"friends","data":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2020-09-07T02:00:00.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-09-07 10:00:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2020-09-07T02:41:17.516Z","path":"404.html","comments":1,"_id":"ckhuq03kv0000y8gp4um119nz","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-09-07T02:00:10.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-07 10:00:10\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-09-15T15:56:50.750Z","path":"about/index.html","comments":1,"_id":"ckhuq03m50002y8gpf5jb4n96","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"archives/index.html","comments":1,"_id":"ckhuq03m70004y8gpdial22gh","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"categories/index.html","comments":1,"_id":"ckhuq03ma0008y8gpfda2v4j4","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-09-10T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，欢迎留言~\n\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yibiner\n* **地址：**https://yibiner.github.io/\n* **简介：**爱折腾的博客\n* **头像：**https://yibiner.github.io/medias/avatars/avatar.jpg\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-09-10 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，欢迎留言~\n\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yibiner\n* **地址：**https://yibiner.github.io/\n* **简介：**爱折腾的博客\n* **头像：**https://yibiner.github.io/medias/avatars/avatar.jpg\n","updated":"2020-09-17T16:22:20.459Z","path":"contact/index.html","comments":1,"_id":"ckhuq03md000ay8gplcphmpt1","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，欢迎留言~</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yibiner</li>\n<li><strong>地址：</strong><a href=\"https://yibiner.github.io/\">https://yibiner.github.io/</a></li>\n<li><strong>简介：</strong>爱折腾的博客</li>\n<li><strong>头像：</strong><a href=\"https://yibiner.github.io/medias/avatars/avatar.jpg\">https://yibiner.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，欢迎留言~</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yibiner</li>\n<li><strong>地址：</strong><a href=\"https://yibiner.github.io/\">https://yibiner.github.io/</a></li>\n<li><strong>简介：</strong>爱折腾的博客</li>\n<li><strong>头像：</strong><a href=\"https://yibiner.github.io/medias/avatars/avatar.jpg\">https://yibiner.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"friends","date":"2020-09-10T09:17:02.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yibiner\n* **地址：**https://yibiner.github.io/\n* **简介：**爱折腾的博客\n* **头像：**https://yibiner.github.io/medias/avatars/avatar.jpg\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-09-10 17:17:02\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yibiner\n* **地址：**https://yibiner.github.io/\n* **简介：**爱折腾的博客\n* **头像：**https://yibiner.github.io/medias/avatars/avatar.jpg\n","updated":"2020-09-17T16:23:00.020Z","path":"friends/index.html","comments":1,"_id":"ckhuq03mh000ey8gp6jppxk1a","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yibiner</li>\n<li><strong>地址：</strong><a href=\"https://yibiner.github.io/\">https://yibiner.github.io/</a></li>\n<li><strong>简介：</strong>爱折腾的博客</li>\n<li><strong>头像：</strong><a href=\"https://yibiner.github.io/medias/avatars/avatar.jpg\">https://yibiner.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yibiner</li>\n<li><strong>地址：</strong><a href=\"https://yibiner.github.io/\">https://yibiner.github.io/</a></li>\n<li><strong>简介：</strong>爱折腾的博客</li>\n<li><strong>头像：</strong><a href=\"https://yibiner.github.io/medias/avatars/avatar.jpg\">https://yibiner.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"tags/index.html","comments":1,"_id":"ckhuq03mj000gy8gpl06qdqeh","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"【JAVA】AtomicLong LongAdder 性能对比","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-22T06:32:22.000Z","password":null,"summary":"LongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务...","_content":"\nLongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务... \n\n## 前言\n\n一天，组长找来小bin\n\n组长：“小bin啊，最近我们服务器上的a模块出现几次异常，每次都是用户反馈了之后我们才去解决，领导们很重视这个问题，所以要求我们要在a模块上添加业务指标监控。这里你先去调研下 AtomicLong 和 LongAdder 性能差异吧，之后我们再一起看看怎么添加监控指标”\n\n小bin：“这个我知道啊，多线程下 LongAdder 比 AtomicLong 性能好啊...”\n\n说着在浏览器的搜索栏上输入 “LongAdder 和 AtomicLong 性能对比” ，打开了一个测试对比页面\n\n组长：“我想让你做的是基于我们当前系统来做个对比，基于当前系统可能两者的性能差异不会特别明显，但是两者的使用方式还是有所区别的，这又涉及这次添加监控的工作量了”\n\n组长：“你等会出份报告，下班前我再来找你”\n\n小bin：“好的，保证完成任务”\n\n\n\n## 源码简单分析\n\n拿到了任务，先从何下手呢？小bin想了想，啪的一下，很快啊，打开了 LongAdder 和 AtomicLong 的源码。\n\n想要做性能对比，也得先大概了解这两者的实现有什么区别吧\n\n### AtomicLong\n\nAtomicLong 的实现比较简单，基本思路就是维护了一个 volatile 的 value 变量，累加时候通过自旋保证了数据增加的原子性。\n\n当多个线程同时要进行数据操作时，就有可能增加自旋的时间。\n\n```java\n// 使用volatile 保证可见性\nprivate volatile long value;\n\npublic AtomicLong(long initialValue) {\n    value = initialValue;\n}\n\npublic final long getAndIncrement() {\n    // 主要看 getAndAddLong 的实现\n    return unsafe.getAndAddLong(this, valueOffset, 1L);\n}\n\n// 通过自旋方式来保证原子性\n// compareAndSwapLong 和 getLongVolatile 都是 native ，需要查看 jvm 源码\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n    long var6;\n    do {\n        var6 = this.getLongVolatile(var1, var2);\n    } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n\n    return var6;\n}\n\npublic final native boolean compareAndSwapLong(Object var1, long var2, long var4, long var6);\npublic native long getLongVolatile(Object var1, long var2);\n```\n\n\n\n### LongAdder\n\nLongAdder 就比  AtomicLong 复杂了点。  LongAdder 继承了 Striped64，Striped64 是在 java8 中添加用来支持累加器的并发组件，设计思路是在竞争激烈的时候尽量分散竞争。\n\nLongAdder  核心思路是先使用cas操作base值，当发生碰撞后，若发生碰撞的线程对应的cells位置为null时，将添加的值放入cells数组对应位置中，若已经有数值了，则尝试cas该数值，若此处还是方式碰撞，则想办法将值添加到其他竞争不激烈的cells位置上。\n\n```java\npublic LongAdder() {\n}\n\npublic void add(long x) {\n    Cell[] as; long b, v; int m; Cell a;\n    // 先尝试直接在base上加x\n    if ((as = cells) != null || !casBase(b = base, b + x)) {\n        boolean uncontended = true;\n         // 如果当前线程在 cells 对应槽位上已经有值，尝试在槽位值上加x；失败才执行 longAccumulate \n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[getProbe() & m]) == null ||\n            !(uncontended = a.cas(v = a.value, v + x)))\n            longAccumulate(x, null, uncontended);\n    }\n}\n\n// sum 求和把base值和cells上的值加起来\npublic long sum() {\n    Cell[] as = cells; Cell a;\n    long sum = base;\n    if (as != null) {\n        for (int i = 0; i < as.length; ++i) {\n            if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\nStriped64 实现的较为复杂的 longAccumulate\n\n初始化或扩容cells，若cells 没有初始化则初始化为cells[2] ；若当前线程 probe&cells.length 为null，则将该位置初始化为cell(x)；若 probe&cells.length 发生碰撞，则扩容cells 为 4,8,16... 2^n ；然后将当前线程 probe advanceProbe\n\n```java\nfinal boolean casBase(long cmp, long val) {\n    return UNSAFE.compareAndSwapLong(this, BASE, cmp, val);\n}\n\nfinal void longAccumulate(long x, LongBinaryOperator fn,\n                          boolean wasUncontended) {\n    int h;\n    // getProbe 获取当前线程的\"探针\"值，其实就是一个数。（可以理解为当前线程的hash值）\n    if ((h = getProbe()) == 0) {\n        ThreadLocalRandom.current(); // force initialization\n        h = getProbe();\n        wasUncontended = true;\n    }\n    boolean collide = false;                // True if last slot nonempty\n    for (;;) {\n        Cell[] as; Cell a; int n; long v;\n        // 如果已经初始化过cells了，初始化后 cells 长度 为2\n        if ((as = cells) != null && (n = as.length) > 0) {\n            if ((a = as[(n - 1) & h]) == null) {\n                if (cellsBusy == 0) {       // Try to attach new Cell\n                    Cell r = new Cell(x);   // Optimistically create\n                    if (cellsBusy == 0 && casCellsBusy()) {\n                        boolean created = false;\n                        // 加完锁后进行二次check\n                        try {               // Recheck under lock\n                            Cell[] rs; int m, j;\n                            if ((rs = cells) != null &&\n                                (m = rs.length) > 0 &&\n                                rs[j = (m - 1) & h] == null) {\n                                rs[j] = r;\n                                created = true;\n                            }\n                        } finally {\n                            cellsBusy = 0;\n                        }\n                        if (created)\n                            break;\n                        continue;           // Slot is now non-empty\n                    }\n                }\n                collide = false;\n            }\n            else if (!wasUncontended)       // CAS already known to fail\n                wasUncontended = true;      // Continue after rehash\n            else if (a.cas(v = a.value, ((fn == null) ? v + x :\n                                         fn.applyAsLong(v, x))))\n                break;\n            else if (n >= NCPU || cells != as)\n                // 碰撞标记\n                collide = false;            // At max size or stale\n            else if (!collide)\n                collide = true;\n            else if (cellsBusy == 0 && casCellsBusy()) {\n                try {\n                    // 扩容cells，每次扩容为原来的两倍\n                    if (cells == as) {      // Expand table unless stale\n                        Cell[] rs = new Cell[n << 1];\n                        for (int i = 0; i < n; ++i)\n                            rs[i] = as[i];\n                        cells = rs;\n                    }\n                } finally {\n                    cellsBusy = 0;\n                }\n                collide = false;\n                continue;                   // Retry with expanded table\n            }\n            h = advanceProbe(h);\n        }\n        // 初始化 cells ， cellsBusy 一个 Spinlock ， 0 表示未上锁。\n        else if (cellsBusy == 0 && cells == as && casCellsBusy()) {\n            boolean init = false;\n            try {                           // Initialize table\n                if (cells == as) {\n                    Cell[] rs = new Cell[2];\n                    rs[h & 1] = new Cell(x);\n                    cells = rs;\n                    init = true;\n                }\n            } finally {\n                cellsBusy = 0;\n            }\n            if (init)\n                break;\n        }\n        // 尝试使用cas往base上添加v值， 从 LongAdder 调用add 到此方法 fn 为null\n        else if (casBase(v = base, ((fn == null) ? v + x :\n                                    fn.applyAsLong(v, x))))\n            break;                          // Fall back on using base\n    }\n}\n```\n\n\n\n## Benchmark 基准测试\n\n梳理完两者的大概流程后，小bin摸了摸头上日渐稀少的头发，想到 “该上benchmark测试下性能了吧”\n\n两分钟后，小bin写了个测试[demo](https://github.com/yibiner/blog-demo-code/tree/master/BenchMarkTest-thread-AtomicLong-AddrLong)\n\n基本流程：long 值每次累加到100000，预热5次，每个测试3s，测试10次取平均值。测试线程数量为1，2，4，8，16，32，64，96，128\n\n\n\n![breachmark](breachmark.png)\n\n看到了上面的测试结果，小bin心想：“果然还是 LongAdder 性能更好啊，AtomicLong 也差太多了”\n\n\n\n## 线程池模拟测试\n\n“啊，我是不是还得确认下当前系统业务框架下这两者带来的性能影响差异？”小bin一边想着，一边开始撸起了另一个测试[demo](https://github.com/yibiner/blog-demo-code/tree/master/test-thread-AtomicLong-AddrLong)\n\n基本流程：long 值每次累加到100000，测试50次，去掉最大最小值取平均\n\n![线程池测试并发](线程池测试并发.png)\n\n看着眼前的统计结果，小bin迷惑了“为什么这次的结果显示两者差距没多少呢？”\n\n带着迷惑，小bin又复查了一边测试，这次有了新的发现：在benchmark测试中，CPU的使用率在线程数为8之前，都是跟着线程数上去的，如线程数为1，跑测试时，cpu占用率在100% 左右，线程数为4，cpu占用率为400%，线程数为8及更大，cpu占用率就占满到600%了；但是在使用线程池进行测试性能中（模拟实际模块使用情景），cpu的最大占用率也就150%多。\n\n“如果我在测试环境的a模块中加入包含 LongAdder 和 AtomicLong 的代码，是不是能更准确的表现出两者对于实际的影响？”一边想着，小bin一边改起了代码。\n\n分别测试没有添加 LongAdder 和 AtomicLong 逻辑，加了 LongAdder， 加了 AtomicLong；业务线程池大小96；模拟现网qps给测试环境加压；模拟实际的瞬时20倍正常qps加压，查看恢复情况。 结果发现性能影响还是不太明显，没有业务代码造成的性能影响大。\n\n于是乎，小bin发现这时候已经到了晚上的10点了...\n\n\n\n## 总结\n\n在追求极限性能下，LongAdder 比 AtomicLong 性能要更好。但是在实际的使用场景中，需要根据业务情况具体的选择使用哪个，首先简单的实现业务场景可能大部分情况下是优先考虑的。\n\n\n\n## 附录\n\n### 操作平台与环境\n\nIDEA 版本：Ultimate 2020.2.1\n\n台式机 CPU：i5-9400f 6C6T  内存：32GB\n\n```shell\n$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n\n$ java -version\njava version \"1.8.0_241\"\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)\n```\n\n\n\n### 参考链接\n\n [volatile底层原理详解](https://zhuanlan.zhihu.com/p/133851347)\n\n[Java 并发计数组件Striped64详解](https://www.jianshu.com/p/30d328e9353b)\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【JAVA】AtomicLong-LongAdder-性能对比.md","raw":"---\ntitle: 【JAVA】AtomicLong LongAdder 性能对比\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-22 14:32:22\npassword:\nsummary: LongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务... \ntags:\n- JAVA\n- 源码分析\n- 程序员的一天\ncategories:\n- 编程\n---\n\nLongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务... \n\n## 前言\n\n一天，组长找来小bin\n\n组长：“小bin啊，最近我们服务器上的a模块出现几次异常，每次都是用户反馈了之后我们才去解决，领导们很重视这个问题，所以要求我们要在a模块上添加业务指标监控。这里你先去调研下 AtomicLong 和 LongAdder 性能差异吧，之后我们再一起看看怎么添加监控指标”\n\n小bin：“这个我知道啊，多线程下 LongAdder 比 AtomicLong 性能好啊...”\n\n说着在浏览器的搜索栏上输入 “LongAdder 和 AtomicLong 性能对比” ，打开了一个测试对比页面\n\n组长：“我想让你做的是基于我们当前系统来做个对比，基于当前系统可能两者的性能差异不会特别明显，但是两者的使用方式还是有所区别的，这又涉及这次添加监控的工作量了”\n\n组长：“你等会出份报告，下班前我再来找你”\n\n小bin：“好的，保证完成任务”\n\n\n\n## 源码简单分析\n\n拿到了任务，先从何下手呢？小bin想了想，啪的一下，很快啊，打开了 LongAdder 和 AtomicLong 的源码。\n\n想要做性能对比，也得先大概了解这两者的实现有什么区别吧\n\n### AtomicLong\n\nAtomicLong 的实现比较简单，基本思路就是维护了一个 volatile 的 value 变量，累加时候通过自旋保证了数据增加的原子性。\n\n当多个线程同时要进行数据操作时，就有可能增加自旋的时间。\n\n```java\n// 使用volatile 保证可见性\nprivate volatile long value;\n\npublic AtomicLong(long initialValue) {\n    value = initialValue;\n}\n\npublic final long getAndIncrement() {\n    // 主要看 getAndAddLong 的实现\n    return unsafe.getAndAddLong(this, valueOffset, 1L);\n}\n\n// 通过自旋方式来保证原子性\n// compareAndSwapLong 和 getLongVolatile 都是 native ，需要查看 jvm 源码\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n    long var6;\n    do {\n        var6 = this.getLongVolatile(var1, var2);\n    } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n\n    return var6;\n}\n\npublic final native boolean compareAndSwapLong(Object var1, long var2, long var4, long var6);\npublic native long getLongVolatile(Object var1, long var2);\n```\n\n\n\n### LongAdder\n\nLongAdder 就比  AtomicLong 复杂了点。  LongAdder 继承了 Striped64，Striped64 是在 java8 中添加用来支持累加器的并发组件，设计思路是在竞争激烈的时候尽量分散竞争。\n\nLongAdder  核心思路是先使用cas操作base值，当发生碰撞后，若发生碰撞的线程对应的cells位置为null时，将添加的值放入cells数组对应位置中，若已经有数值了，则尝试cas该数值，若此处还是方式碰撞，则想办法将值添加到其他竞争不激烈的cells位置上。\n\n```java\npublic LongAdder() {\n}\n\npublic void add(long x) {\n    Cell[] as; long b, v; int m; Cell a;\n    // 先尝试直接在base上加x\n    if ((as = cells) != null || !casBase(b = base, b + x)) {\n        boolean uncontended = true;\n         // 如果当前线程在 cells 对应槽位上已经有值，尝试在槽位值上加x；失败才执行 longAccumulate \n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[getProbe() & m]) == null ||\n            !(uncontended = a.cas(v = a.value, v + x)))\n            longAccumulate(x, null, uncontended);\n    }\n}\n\n// sum 求和把base值和cells上的值加起来\npublic long sum() {\n    Cell[] as = cells; Cell a;\n    long sum = base;\n    if (as != null) {\n        for (int i = 0; i < as.length; ++i) {\n            if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\nStriped64 实现的较为复杂的 longAccumulate\n\n初始化或扩容cells，若cells 没有初始化则初始化为cells[2] ；若当前线程 probe&cells.length 为null，则将该位置初始化为cell(x)；若 probe&cells.length 发生碰撞，则扩容cells 为 4,8,16... 2^n ；然后将当前线程 probe advanceProbe\n\n```java\nfinal boolean casBase(long cmp, long val) {\n    return UNSAFE.compareAndSwapLong(this, BASE, cmp, val);\n}\n\nfinal void longAccumulate(long x, LongBinaryOperator fn,\n                          boolean wasUncontended) {\n    int h;\n    // getProbe 获取当前线程的\"探针\"值，其实就是一个数。（可以理解为当前线程的hash值）\n    if ((h = getProbe()) == 0) {\n        ThreadLocalRandom.current(); // force initialization\n        h = getProbe();\n        wasUncontended = true;\n    }\n    boolean collide = false;                // True if last slot nonempty\n    for (;;) {\n        Cell[] as; Cell a; int n; long v;\n        // 如果已经初始化过cells了，初始化后 cells 长度 为2\n        if ((as = cells) != null && (n = as.length) > 0) {\n            if ((a = as[(n - 1) & h]) == null) {\n                if (cellsBusy == 0) {       // Try to attach new Cell\n                    Cell r = new Cell(x);   // Optimistically create\n                    if (cellsBusy == 0 && casCellsBusy()) {\n                        boolean created = false;\n                        // 加完锁后进行二次check\n                        try {               // Recheck under lock\n                            Cell[] rs; int m, j;\n                            if ((rs = cells) != null &&\n                                (m = rs.length) > 0 &&\n                                rs[j = (m - 1) & h] == null) {\n                                rs[j] = r;\n                                created = true;\n                            }\n                        } finally {\n                            cellsBusy = 0;\n                        }\n                        if (created)\n                            break;\n                        continue;           // Slot is now non-empty\n                    }\n                }\n                collide = false;\n            }\n            else if (!wasUncontended)       // CAS already known to fail\n                wasUncontended = true;      // Continue after rehash\n            else if (a.cas(v = a.value, ((fn == null) ? v + x :\n                                         fn.applyAsLong(v, x))))\n                break;\n            else if (n >= NCPU || cells != as)\n                // 碰撞标记\n                collide = false;            // At max size or stale\n            else if (!collide)\n                collide = true;\n            else if (cellsBusy == 0 && casCellsBusy()) {\n                try {\n                    // 扩容cells，每次扩容为原来的两倍\n                    if (cells == as) {      // Expand table unless stale\n                        Cell[] rs = new Cell[n << 1];\n                        for (int i = 0; i < n; ++i)\n                            rs[i] = as[i];\n                        cells = rs;\n                    }\n                } finally {\n                    cellsBusy = 0;\n                }\n                collide = false;\n                continue;                   // Retry with expanded table\n            }\n            h = advanceProbe(h);\n        }\n        // 初始化 cells ， cellsBusy 一个 Spinlock ， 0 表示未上锁。\n        else if (cellsBusy == 0 && cells == as && casCellsBusy()) {\n            boolean init = false;\n            try {                           // Initialize table\n                if (cells == as) {\n                    Cell[] rs = new Cell[2];\n                    rs[h & 1] = new Cell(x);\n                    cells = rs;\n                    init = true;\n                }\n            } finally {\n                cellsBusy = 0;\n            }\n            if (init)\n                break;\n        }\n        // 尝试使用cas往base上添加v值， 从 LongAdder 调用add 到此方法 fn 为null\n        else if (casBase(v = base, ((fn == null) ? v + x :\n                                    fn.applyAsLong(v, x))))\n            break;                          // Fall back on using base\n    }\n}\n```\n\n\n\n## Benchmark 基准测试\n\n梳理完两者的大概流程后，小bin摸了摸头上日渐稀少的头发，想到 “该上benchmark测试下性能了吧”\n\n两分钟后，小bin写了个测试[demo](https://github.com/yibiner/blog-demo-code/tree/master/BenchMarkTest-thread-AtomicLong-AddrLong)\n\n基本流程：long 值每次累加到100000，预热5次，每个测试3s，测试10次取平均值。测试线程数量为1，2，4，8，16，32，64，96，128\n\n\n\n![breachmark](breachmark.png)\n\n看到了上面的测试结果，小bin心想：“果然还是 LongAdder 性能更好啊，AtomicLong 也差太多了”\n\n\n\n## 线程池模拟测试\n\n“啊，我是不是还得确认下当前系统业务框架下这两者带来的性能影响差异？”小bin一边想着，一边开始撸起了另一个测试[demo](https://github.com/yibiner/blog-demo-code/tree/master/test-thread-AtomicLong-AddrLong)\n\n基本流程：long 值每次累加到100000，测试50次，去掉最大最小值取平均\n\n![线程池测试并发](线程池测试并发.png)\n\n看着眼前的统计结果，小bin迷惑了“为什么这次的结果显示两者差距没多少呢？”\n\n带着迷惑，小bin又复查了一边测试，这次有了新的发现：在benchmark测试中，CPU的使用率在线程数为8之前，都是跟着线程数上去的，如线程数为1，跑测试时，cpu占用率在100% 左右，线程数为4，cpu占用率为400%，线程数为8及更大，cpu占用率就占满到600%了；但是在使用线程池进行测试性能中（模拟实际模块使用情景），cpu的最大占用率也就150%多。\n\n“如果我在测试环境的a模块中加入包含 LongAdder 和 AtomicLong 的代码，是不是能更准确的表现出两者对于实际的影响？”一边想着，小bin一边改起了代码。\n\n分别测试没有添加 LongAdder 和 AtomicLong 逻辑，加了 LongAdder， 加了 AtomicLong；业务线程池大小96；模拟现网qps给测试环境加压；模拟实际的瞬时20倍正常qps加压，查看恢复情况。 结果发现性能影响还是不太明显，没有业务代码造成的性能影响大。\n\n于是乎，小bin发现这时候已经到了晚上的10点了...\n\n\n\n## 总结\n\n在追求极限性能下，LongAdder 比 AtomicLong 性能要更好。但是在实际的使用场景中，需要根据业务情况具体的选择使用哪个，首先简单的实现业务场景可能大部分情况下是优先考虑的。\n\n\n\n## 附录\n\n### 操作平台与环境\n\nIDEA 版本：Ultimate 2020.2.1\n\n台式机 CPU：i5-9400f 6C6T  内存：32GB\n\n```shell\n$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n\n$ java -version\njava version \"1.8.0_241\"\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)\n```\n\n\n\n### 参考链接\n\n [volatile底层原理详解](https://zhuanlan.zhihu.com/p/133851347)\n\n[Java 并发计数组件Striped64详解](https://www.jianshu.com/p/30d328e9353b)\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【JAVA】AtomicLong-LongAdder-性能对比","published":1,"updated":"2020-11-23T14:40:56.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhuq03m20001y8gpfye9f2vy","content":"<p>LongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务… </p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一天，组长找来小bin</p>\n<p>组长：“小bin啊，最近我们服务器上的a模块出现几次异常，每次都是用户反馈了之后我们才去解决，领导们很重视这个问题，所以要求我们要在a模块上添加业务指标监控。这里你先去调研下 AtomicLong 和 LongAdder 性能差异吧，之后我们再一起看看怎么添加监控指标”</p>\n<p>小bin：“这个我知道啊，多线程下 LongAdder 比 AtomicLong 性能好啊…”</p>\n<p>说着在浏览器的搜索栏上输入 “LongAdder 和 AtomicLong 性能对比” ，打开了一个测试对比页面</p>\n<p>组长：“我想让你做的是基于我们当前系统来做个对比，基于当前系统可能两者的性能差异不会特别明显，但是两者的使用方式还是有所区别的，这又涉及这次添加监控的工作量了”</p>\n<p>组长：“你等会出份报告，下班前我再来找你”</p>\n<p>小bin：“好的，保证完成任务”</p>\n<h2 id=\"源码简单分析\"><a href=\"#源码简单分析\" class=\"headerlink\" title=\"源码简单分析\"></a>源码简单分析</h2><p>拿到了任务，先从何下手呢？小bin想了想，啪的一下，很快啊，打开了 LongAdder 和 AtomicLong 的源码。</p>\n<p>想要做性能对比，也得先大概了解这两者的实现有什么区别吧</p>\n<h3 id=\"AtomicLong\"><a href=\"#AtomicLong\" class=\"headerlink\" title=\"AtomicLong\"></a>AtomicLong</h3><p>AtomicLong 的实现比较简单，基本思路就是维护了一个 volatile 的 value 变量，累加时候通过自旋保证了数据增加的原子性。</p>\n<p>当多个线程同时要进行数据操作时，就有可能增加自旋的时间。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 使用volatile 保证可见性</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token function\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> initialValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> initialValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 主要看 getAndAddLong 的实现</span>\n    <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAddLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> valueOffset<span class=\"token punctuation\">,</span> 1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 通过自旋方式来保证原子性</span>\n<span class=\"token comment\" spellcheck=\"true\">// compareAndSwapLong 和 getLongVolatile 都是 native ，需要查看 jvm 源码</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAndAddLong</span><span class=\"token punctuation\">(</span>Object var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> var6<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        var6 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLongVolatile</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">,</span> var6<span class=\"token punctuation\">,</span> var6 <span class=\"token operator\">+</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> var6<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span>Object var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getLongVolatile</span><span class=\"token punctuation\">(</span>Object var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h3><p>LongAdder 就比  AtomicLong 复杂了点。  LongAdder 继承了 Striped64，Striped64 是在 java8 中添加用来支持累加器的并发组件，设计思路是在竞争激烈的时候尽量分散竞争。</p>\n<p>LongAdder  核心思路是先使用cas操作base值，当发生碰撞后，若发生碰撞的线程对应的cells位置为null时，将添加的值放入cells数组对应位置中，若已经有数值了，则尝试cas该数值，若此处还是方式碰撞，则想办法将值添加到其他竞争不激烈的cells位置上。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token function\">LongAdder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as<span class=\"token punctuation\">;</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span> Cell a<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 先尝试直接在base上加x</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>as <span class=\"token operator\">=</span> cells<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">casBase</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> base<span class=\"token punctuation\">,</span> b <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> uncontended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">// 如果当前线程在 cells 对应槽位上已经有值，尝试在槽位值上加x；失败才执行 longAccumulate </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> as<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n            <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> as<span class=\"token punctuation\">[</span><span class=\"token function\">getProbe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span>\n            <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uncontended <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cas</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">longAccumulate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">,</span> uncontended<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// sum 求和把base值和cells上的值加起来</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as <span class=\"token operator\">=</span> cells<span class=\"token punctuation\">;</span> Cell a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> as<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> as<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Striped64 实现的较为复杂的 longAccumulate</p>\n<p>初始化或扩容cells，若cells 没有初始化则初始化为cells[2] ；若当前线程 probe&amp;cells.length 为null，则将该位置初始化为cell(x)；若 probe&amp;cells.length 发生碰撞，则扩容cells 为 4,8,16… 2^n ；然后将当前线程 probe advanceProbe</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">casBase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> cmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> UNSAFE<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> BASE<span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">longAccumulate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> LongBinaryOperator fn<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">boolean</span> wasUncontended<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// getProbe 获取当前线程的\"探针\"值，其实就是一个数。（可以理解为当前线程的hash值）</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> <span class=\"token function\">getProbe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ThreadLocalRandom<span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// force initialization</span>\n        h <span class=\"token operator\">=</span> <span class=\"token function\">getProbe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wasUncontended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">boolean</span> collide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">// True if last slot nonempty</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as<span class=\"token punctuation\">;</span> Cell a<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span> <span class=\"token keyword\">long</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 如果已经初始化过cells了，初始化后 cells 长度 为2</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>as <span class=\"token operator\">=</span> cells<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> as<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> as<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cellsBusy <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\" spellcheck=\"true\">// Try to attach new Cell</span>\n                    Cell r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// Optimistically create</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cellsBusy <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">casCellsBusy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">boolean</span> created <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 加完锁后进行二次check</span>\n                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>               <span class=\"token comment\" spellcheck=\"true\">// Recheck under lock</span>\n                            Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rs<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rs <span class=\"token operator\">=</span> cells<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span>\n                                <span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n                                rs<span class=\"token punctuation\">[</span>j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> h<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                rs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n                                created <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                            cellsBusy <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>created<span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">// Slot is now non-empty</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                collide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wasUncontended<span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\">// CAS already known to fail</span>\n                wasUncontended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// Continue after rehash</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">cas</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> v <span class=\"token operator\">+</span> x <span class=\"token operator\">:</span>\n                                         fn<span class=\"token punctuation\">.</span><span class=\"token function\">applyAsLong</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> NCPU <span class=\"token operator\">||</span> cells <span class=\"token operator\">!=</span> as<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 碰撞标记</span>\n                collide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">// At max size or stale</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>collide<span class=\"token punctuation\">)</span>\n                collide <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cellsBusy <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">casCellsBusy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 扩容cells，每次扩容为原来的两倍</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cells <span class=\"token operator\">==</span> as<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\" spellcheck=\"true\">// Expand table unless stale</span>\n                        Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n                            rs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> as<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        cells <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                    cellsBusy <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                collide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">// Retry with expanded table</span>\n            <span class=\"token punctuation\">}</span>\n            h <span class=\"token operator\">=</span> <span class=\"token function\">advanceProbe</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 初始化 cells ， cellsBusy 一个 Spinlock ， 0 表示未上锁。</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cellsBusy <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> cells <span class=\"token operator\">==</span> as <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">casCellsBusy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">boolean</span> init <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>                           <span class=\"token comment\" spellcheck=\"true\">// Initialize table</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cells <span class=\"token operator\">==</span> as<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    rs<span class=\"token punctuation\">[</span>h <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    cells <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">;</span>\n                    init <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                cellsBusy <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 尝试使用cas往base上添加v值， 从 LongAdder 调用add 到此方法 fn 为null</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">casBase</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> base<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> v <span class=\"token operator\">+</span> x <span class=\"token operator\">:</span>\n                                    fn<span class=\"token punctuation\">.</span><span class=\"token function\">applyAsLong</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\" spellcheck=\"true\">// Fall back on using base</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Benchmark-基准测试\"><a href=\"#Benchmark-基准测试\" class=\"headerlink\" title=\"Benchmark 基准测试\"></a>Benchmark 基准测试</h2><p>梳理完两者的大概流程后，小bin摸了摸头上日渐稀少的头发，想到 “该上benchmark测试下性能了吧”</p>\n<p>两分钟后，小bin写了个测试<a href=\"https://github.com/yibiner/blog-demo-code/tree/master/BenchMarkTest-thread-AtomicLong-AddrLong\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>基本流程：long 值每次累加到100000，预热5次，每个测试3s，测试10次取平均值。测试线程数量为1，2，4，8，16，32，64，96，128</p>\n<p><img src=\"breachmark.png\" alt=\"breachmark\"></p>\n<p>看到了上面的测试结果，小bin心想：“果然还是 LongAdder 性能更好啊，AtomicLong 也差太多了”</p>\n<h2 id=\"线程池模拟测试\"><a href=\"#线程池模拟测试\" class=\"headerlink\" title=\"线程池模拟测试\"></a>线程池模拟测试</h2><p>“啊，我是不是还得确认下当前系统业务框架下这两者带来的性能影响差异？”小bin一边想着，一边开始撸起了另一个测试<a href=\"https://github.com/yibiner/blog-demo-code/tree/master/test-thread-AtomicLong-AddrLong\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>基本流程：long 值每次累加到100000，测试50次，去掉最大最小值取平均</p>\n<p><img src=\"%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B5%8B%E8%AF%95%E5%B9%B6%E5%8F%91.png\" alt=\"线程池测试并发\"></p>\n<p>看着眼前的统计结果，小bin迷惑了“为什么这次的结果显示两者差距没多少呢？”</p>\n<p>带着迷惑，小bin又复查了一边测试，这次有了新的发现：在benchmark测试中，CPU的使用率在线程数为8之前，都是跟着线程数上去的，如线程数为1，跑测试时，cpu占用率在100% 左右，线程数为4，cpu占用率为400%，线程数为8及更大，cpu占用率就占满到600%了；但是在使用线程池进行测试性能中（模拟实际模块使用情景），cpu的最大占用率也就150%多。</p>\n<p>“如果我在测试环境的a模块中加入包含 LongAdder 和 AtomicLong 的代码，是不是能更准确的表现出两者对于实际的影响？”一边想着，小bin一边改起了代码。</p>\n<p>分别测试没有添加 LongAdder 和 AtomicLong 逻辑，加了 LongAdder， 加了 AtomicLong；业务线程池大小96；模拟现网qps给测试环境加压；模拟实际的瞬时20倍正常qps加压，查看恢复情况。 结果发现性能影响还是不太明显，没有业务代码造成的性能影响大。</p>\n<p>于是乎，小bin发现这时候已经到了晚上的10点了…</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在追求极限性能下，LongAdder 比 AtomicLong 性能要更好。但是在实际的使用场景中，需要根据业务情况具体的选择使用哪个，首先简单的实现业务场景可能大部分情况下是优先考虑的。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"操作平台与环境\"><a href=\"#操作平台与环境\" class=\"headerlink\" title=\"操作平台与环境\"></a>操作平台与环境</h3><p>IDEA 版本：Ultimate 2020.2.1</p>\n<p>台式机 CPU：i5-9400f 6C6T  内存：32GB</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n\n$ java -version\njava version \"1.8.0_241\"\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p> <a href=\"https://zhuanlan.zhihu.com/p/133851347\" target=\"_blank\" rel=\"noopener\">volatile底层原理详解</a></p>\n<p><a href=\"https://www.jianshu.com/p/30d328e9353b\" target=\"_blank\" rel=\"noopener\">Java 并发计数组件Striped64详解</a></p>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>LongAdder 性能一定比 AtomicLong 好吗？某一天，小bin接到了组长的神秘任务… </p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一天，组长找来小bin</p>\n<p>组长：“小bin啊，最近我们服务器上的a模块出现几次异常，每次都是用户反馈了之后我们才去解决，领导们很重视这个问题，所以要求我们要在a模块上添加业务指标监控。这里你先去调研下 AtomicLong 和 LongAdder 性能差异吧，之后我们再一起看看怎么添加监控指标”</p>\n<p>小bin：“这个我知道啊，多线程下 LongAdder 比 AtomicLong 性能好啊…”</p>\n<p>说着在浏览器的搜索栏上输入 “LongAdder 和 AtomicLong 性能对比” ，打开了一个测试对比页面</p>\n<p>组长：“我想让你做的是基于我们当前系统来做个对比，基于当前系统可能两者的性能差异不会特别明显，但是两者的使用方式还是有所区别的，这又涉及这次添加监控的工作量了”</p>\n<p>组长：“你等会出份报告，下班前我再来找你”</p>\n<p>小bin：“好的，保证完成任务”</p>\n<h2 id=\"源码简单分析\"><a href=\"#源码简单分析\" class=\"headerlink\" title=\"源码简单分析\"></a>源码简单分析</h2><p>拿到了任务，先从何下手呢？小bin想了想，啪的一下，很快啊，打开了 LongAdder 和 AtomicLong 的源码。</p>\n<p>想要做性能对比，也得先大概了解这两者的实现有什么区别吧</p>\n<h3 id=\"AtomicLong\"><a href=\"#AtomicLong\" class=\"headerlink\" title=\"AtomicLong\"></a>AtomicLong</h3><p>AtomicLong 的实现比较简单，基本思路就是维护了一个 volatile 的 value 变量，累加时候通过自旋保证了数据增加的原子性。</p>\n<p>当多个线程同时要进行数据操作时，就有可能增加自旋的时间。</p>\n<pre><code class=\"java\">// 使用volatile 保证可见性\nprivate volatile long value;\n\npublic AtomicLong(long initialValue) {\n    value = initialValue;\n}\n\npublic final long getAndIncrement() {\n    // 主要看 getAndAddLong 的实现\n    return unsafe.getAndAddLong(this, valueOffset, 1L);\n}\n\n// 通过自旋方式来保证原子性\n// compareAndSwapLong 和 getLongVolatile 都是 native ，需要查看 jvm 源码\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n    long var6;\n    do {\n        var6 = this.getLongVolatile(var1, var2);\n    } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n\n    return var6;\n}\n\npublic final native boolean compareAndSwapLong(Object var1, long var2, long var4, long var6);\npublic native long getLongVolatile(Object var1, long var2);</code></pre>\n<h3 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h3><p>LongAdder 就比  AtomicLong 复杂了点。  LongAdder 继承了 Striped64，Striped64 是在 java8 中添加用来支持累加器的并发组件，设计思路是在竞争激烈的时候尽量分散竞争。</p>\n<p>LongAdder  核心思路是先使用cas操作base值，当发生碰撞后，若发生碰撞的线程对应的cells位置为null时，将添加的值放入cells数组对应位置中，若已经有数值了，则尝试cas该数值，若此处还是方式碰撞，则想办法将值添加到其他竞争不激烈的cells位置上。</p>\n<pre><code class=\"java\">public LongAdder() {\n}\n\npublic void add(long x) {\n    Cell[] as; long b, v; int m; Cell a;\n    // 先尝试直接在base上加x\n    if ((as = cells) != null || !casBase(b = base, b + x)) {\n        boolean uncontended = true;\n         // 如果当前线程在 cells 对应槽位上已经有值，尝试在槽位值上加x；失败才执行 longAccumulate \n        if (as == null || (m = as.length - 1) &lt; 0 ||\n            (a = as[getProbe() &amp; m]) == null ||\n            !(uncontended = a.cas(v = a.value, v + x)))\n            longAccumulate(x, null, uncontended);\n    }\n}\n\n// sum 求和把base值和cells上的值加起来\npublic long sum() {\n    Cell[] as = cells; Cell a;\n    long sum = base;\n    if (as != null) {\n        for (int i = 0; i &lt; as.length; ++i) {\n            if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}</code></pre>\n<p>Striped64 实现的较为复杂的 longAccumulate</p>\n<p>初始化或扩容cells，若cells 没有初始化则初始化为cells[2] ；若当前线程 probe&amp;cells.length 为null，则将该位置初始化为cell(x)；若 probe&amp;cells.length 发生碰撞，则扩容cells 为 4,8,16… 2^n ；然后将当前线程 probe advanceProbe</p>\n<pre><code class=\"java\">final boolean casBase(long cmp, long val) {\n    return UNSAFE.compareAndSwapLong(this, BASE, cmp, val);\n}\n\nfinal void longAccumulate(long x, LongBinaryOperator fn,\n                          boolean wasUncontended) {\n    int h;\n    // getProbe 获取当前线程的&quot;探针&quot;值，其实就是一个数。（可以理解为当前线程的hash值）\n    if ((h = getProbe()) == 0) {\n        ThreadLocalRandom.current(); // force initialization\n        h = getProbe();\n        wasUncontended = true;\n    }\n    boolean collide = false;                // True if last slot nonempty\n    for (;;) {\n        Cell[] as; Cell a; int n; long v;\n        // 如果已经初始化过cells了，初始化后 cells 长度 为2\n        if ((as = cells) != null &amp;&amp; (n = as.length) &gt; 0) {\n            if ((a = as[(n - 1) &amp; h]) == null) {\n                if (cellsBusy == 0) {       // Try to attach new Cell\n                    Cell r = new Cell(x);   // Optimistically create\n                    if (cellsBusy == 0 &amp;&amp; casCellsBusy()) {\n                        boolean created = false;\n                        // 加完锁后进行二次check\n                        try {               // Recheck under lock\n                            Cell[] rs; int m, j;\n                            if ((rs = cells) != null &amp;&amp;\n                                (m = rs.length) &gt; 0 &amp;&amp;\n                                rs[j = (m - 1) &amp; h] == null) {\n                                rs[j] = r;\n                                created = true;\n                            }\n                        } finally {\n                            cellsBusy = 0;\n                        }\n                        if (created)\n                            break;\n                        continue;           // Slot is now non-empty\n                    }\n                }\n                collide = false;\n            }\n            else if (!wasUncontended)       // CAS already known to fail\n                wasUncontended = true;      // Continue after rehash\n            else if (a.cas(v = a.value, ((fn == null) ? v + x :\n                                         fn.applyAsLong(v, x))))\n                break;\n            else if (n &gt;= NCPU || cells != as)\n                // 碰撞标记\n                collide = false;            // At max size or stale\n            else if (!collide)\n                collide = true;\n            else if (cellsBusy == 0 &amp;&amp; casCellsBusy()) {\n                try {\n                    // 扩容cells，每次扩容为原来的两倍\n                    if (cells == as) {      // Expand table unless stale\n                        Cell[] rs = new Cell[n &lt;&lt; 1];\n                        for (int i = 0; i &lt; n; ++i)\n                            rs[i] = as[i];\n                        cells = rs;\n                    }\n                } finally {\n                    cellsBusy = 0;\n                }\n                collide = false;\n                continue;                   // Retry with expanded table\n            }\n            h = advanceProbe(h);\n        }\n        // 初始化 cells ， cellsBusy 一个 Spinlock ， 0 表示未上锁。\n        else if (cellsBusy == 0 &amp;&amp; cells == as &amp;&amp; casCellsBusy()) {\n            boolean init = false;\n            try {                           // Initialize table\n                if (cells == as) {\n                    Cell[] rs = new Cell[2];\n                    rs[h &amp; 1] = new Cell(x);\n                    cells = rs;\n                    init = true;\n                }\n            } finally {\n                cellsBusy = 0;\n            }\n            if (init)\n                break;\n        }\n        // 尝试使用cas往base上添加v值， 从 LongAdder 调用add 到此方法 fn 为null\n        else if (casBase(v = base, ((fn == null) ? v + x :\n                                    fn.applyAsLong(v, x))))\n            break;                          // Fall back on using base\n    }\n}</code></pre>\n<h2 id=\"Benchmark-基准测试\"><a href=\"#Benchmark-基准测试\" class=\"headerlink\" title=\"Benchmark 基准测试\"></a>Benchmark 基准测试</h2><p>梳理完两者的大概流程后，小bin摸了摸头上日渐稀少的头发，想到 “该上benchmark测试下性能了吧”</p>\n<p>两分钟后，小bin写了个测试<a href=\"https://github.com/yibiner/blog-demo-code/tree/master/BenchMarkTest-thread-AtomicLong-AddrLong\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>基本流程：long 值每次累加到100000，预热5次，每个测试3s，测试10次取平均值。测试线程数量为1，2，4，8，16，32，64，96，128</p>\n<p><img src=\"breachmark.png\" alt=\"breachmark\"></p>\n<p>看到了上面的测试结果，小bin心想：“果然还是 LongAdder 性能更好啊，AtomicLong 也差太多了”</p>\n<h2 id=\"线程池模拟测试\"><a href=\"#线程池模拟测试\" class=\"headerlink\" title=\"线程池模拟测试\"></a>线程池模拟测试</h2><p>“啊，我是不是还得确认下当前系统业务框架下这两者带来的性能影响差异？”小bin一边想着，一边开始撸起了另一个测试<a href=\"https://github.com/yibiner/blog-demo-code/tree/master/test-thread-AtomicLong-AddrLong\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>基本流程：long 值每次累加到100000，测试50次，去掉最大最小值取平均</p>\n<p><img src=\"%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B5%8B%E8%AF%95%E5%B9%B6%E5%8F%91.png\" alt=\"线程池测试并发\"></p>\n<p>看着眼前的统计结果，小bin迷惑了“为什么这次的结果显示两者差距没多少呢？”</p>\n<p>带着迷惑，小bin又复查了一边测试，这次有了新的发现：在benchmark测试中，CPU的使用率在线程数为8之前，都是跟着线程数上去的，如线程数为1，跑测试时，cpu占用率在100% 左右，线程数为4，cpu占用率为400%，线程数为8及更大，cpu占用率就占满到600%了；但是在使用线程池进行测试性能中（模拟实际模块使用情景），cpu的最大占用率也就150%多。</p>\n<p>“如果我在测试环境的a模块中加入包含 LongAdder 和 AtomicLong 的代码，是不是能更准确的表现出两者对于实际的影响？”一边想着，小bin一边改起了代码。</p>\n<p>分别测试没有添加 LongAdder 和 AtomicLong 逻辑，加了 LongAdder， 加了 AtomicLong；业务线程池大小96；模拟现网qps给测试环境加压；模拟实际的瞬时20倍正常qps加压，查看恢复情况。 结果发现性能影响还是不太明显，没有业务代码造成的性能影响大。</p>\n<p>于是乎，小bin发现这时候已经到了晚上的10点了…</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在追求极限性能下，LongAdder 比 AtomicLong 性能要更好。但是在实际的使用场景中，需要根据业务情况具体的选择使用哪个，首先简单的实现业务场景可能大部分情况下是优先考虑的。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"操作平台与环境\"><a href=\"#操作平台与环境\" class=\"headerlink\" title=\"操作平台与环境\"></a>操作平台与环境</h3><p>IDEA 版本：Ultimate 2020.2.1</p>\n<p>台式机 CPU：i5-9400f 6C6T  内存：32GB</p>\n<pre><code class=\"shell\">$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n\n$ java -version\njava version &quot;1.8.0_241&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</code></pre>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p> <a href=\"https://zhuanlan.zhihu.com/p/133851347\" target=\"_blank\" rel=\"noopener\">volatile底层原理详解</a></p>\n<p><a href=\"https://www.jianshu.com/p/30d328e9353b\" target=\"_blank\" rel=\"noopener\">Java 并发计数组件Striped64详解</a></p>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"},{"title":"【JAVA】线程池代码的一次深入分析","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-13T03:35:56.000Z","password":null,"summary":"本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析","_content":"\n## 前言\n\n本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析。作者水平有限，非喜勿喷。\n\n\n\n\n\n## 背景\n\n在一次统计线上系统每秒处理消息的线程数中，发现有些机器有37个线程在运行，有些机器在重启了服务后由之前的500个线程变为8个线程。在确认了所有机器的JAVA版本、启动参数没有问题后，将分析重点放到了代码中的线程池部分。\n\n\n\n将系统中线程池部分的代码单独摘出，写了个demo，方便在单机上分析和复现，代码在[test-thread](https://github.com/yibiner/blog-demo-code/tree/master/test-thread)，下文中的实例分析和代码验证都是在这个demo上跑的，读者可以自行验证。\n\n\n\n系统版本\n\n```sh\n$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n```\n\nJAVA版本\n\n```sh\n$ java -version\njava version \"1.8.0_241\"\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)\n```\n\n\n\n\n\n##  线程池源码简单分析\n\n由示例代码中可以看到\n\n```java\nBlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>(20);\nRejectedExecutionHandler handler = new BlockRejectedExecutionHandler();\nexecutor = new ThreadPoolExecutor(corePoolSize, executorMaximumPoolSize, 1, TimeUnit.SECONDS, workQueue, handler);\n```\n\n线程池直接使用了 ThreadPoolExecutor ，任务队列使用了 LinkedBlockingQueue 并设置了size，拒绝策略自行实现了 RejectedExecutionHandler 。\n\n所以重点在于 ThreadPoolExecutor 的内部实现。\n\n\n\n### 源码与简单解释\n\n```java\n/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters and default thread factory.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:<br>\n     *         {@code corePoolSize < 0}<br>\n     *         {@code keepAliveTime < 0}<br>\n     *         {@code maximumPoolSize <= 0}<br>\n     *         {@code maximumPoolSize < corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code handler} is null\n     */\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              RejectedExecutionHandler handler) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), handler);\n    }\n```\n\n- corePoolSize\n\n  线程池中的核心线程数。除非设置了allowCoreThreadTimeOut，否则一直存活。\n\n- maximumPoolSize\n\n  线程池中的最大线程数。\n\n- workQueue\n\n  用于保存还没执行到的任务的队列。\n\n- handler\n\n  线程池的饱和策略，当线程池中的阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，需要进行某种处理，默认是抛出异常，这里是将任务放入workQueue中\n\n\n\n```java\n//只是对参数做了判空\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.acc = System.getSecurityManager() == null ?\n                null :\n                AccessController.getContext();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n\n\n\n\n\n```java\n//提交任务时调用    execute ，源码中的注释已经将基本的流程说明清楚了，这里就不翻译了。\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n         * Proceed in 3 steps:\n         *\n         * 1. If fewer than corePoolSize threads are running, try to\n         * start a new thread with the given command as its first\n         * task.  The call to addWorker atomically checks runState and\n         * workerCount, and so prevents false alarms that would add\n         * threads when it shouldn't, by returning false.\n         *\n         * 2. If a task can be successfully queued, then we still need\n         * to double-check whether we should have added a thread\n         * (because existing ones died since last checking) or that\n         * the pool shut down since entry into this method. So we\n         * recheck state and if necessary roll back the enqueuing if\n         * stopped, or start a new thread if there are none.\n         *\n         * 3. If we cannot queue task, then we try to add a new\n         * thread.  If it fails, we know we are shut down or saturated\n         * and so reject the task.\n         */\n    int c = ctl.get();\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    //isRunning 线程池使用int 的前个二进制3位表示状态，后29位表示数量，具体值看下面说明。\n    //当当前运行的线程数量大于设定的核心线程数量时，会优先将任务放入队列中。\n    //代入实际业务处理，此处会导致任务数小于队列最大值时，线程池中只有核心线程在处理\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //若队列已经满了，则会尝试将直接添加worker，若当前核心线程数小于设定的最大线程数，则会新增线程。\n    //代入实际业务处理，此处会导致当模块启动时，待处理任务数为70，大于队列最大长度50，若核心线程数是8，最大线程数是30，则会使线程数增加到20处理任务；若核心线程数是8，最大线程数是10，则会增加到10个线程数，且有部分任务会执行reject策略。详细见下面实例分析\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n\n\n\n\n```java\nprivate static final int COUNT_BITS = Integer.SIZE - 3;//29\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;//1左移29位后，二进制表示： 10 0000 0000 0000 0000 0000 0000 0000 ，-1 后则为 1 1111 1111 1111 1111 1111 1111 1111\n\n// runState is stored in the high-order bits\nprivate static final int RUNNING    = -1 << COUNT_BITS;     //11100000000000000000000000000000\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS; //0\nprivate static final int STOP       =  1 << COUNT_BITS;   \t\t   //100000000000000000000000000000\nprivate static final int TIDYING    =  2 << COUNT_BITS;  \t\t//1000000000000000000000000000000\nprivate static final int TERMINATED =  3 << COUNT_BITS;  //1100000000000000000000000000000\n\n// Packing and unpacking ctl\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n```\n\n```java\n//根据设定的核心线程数和最大线程数来决定是否要新增线程来处理任务\n/**\n     * Checks if a new worker can be added with respect to current\n     * pool state and the given bound (either core or maximum). If so,\n     * the worker count is adjusted accordingly, and, if possible, a\n     * new worker is created and started, running firstTask as its\n     * first task. This method returns false if the pool is stopped or\n     * eligible to shut down. It also returns false if the thread\n     * factory fails to create a thread when asked.  If the thread\n     * creation fails, either due to the thread factory returning\n     * null, or due to an exception (typically OutOfMemoryError in\n     * Thread.start()), we roll back cleanly.\n     *\n     * @param firstTask the task the new thread should run first (or\n     * null if none). Workers are created with an initial first task\n     * (in method execute()) to bypass queuing when there are fewer\n     * than corePoolSize threads (in which case we always start one),\n     * or when the queue is full (in which case we must bypass queue).\n     * Initially idle threads are usually created via\n     * prestartCoreThread or to replace other dying workers.\n     *\n     * @param core if true use corePoolSize as bound, else\n     * maximumPoolSize. (A boolean indicator is used here rather than a\n     * value to ensure reads of fresh values after checking other pool\n     * state).\n     * @return true if successful\n     */\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n\n\n\n\n\n### 实例分析与代码验证\n\n- 核心线程数4，最大线程数10，队列长度20，任务数20\n\n```shell\n$ mvn spring-boot:run\n2020-09-13 13:58:54.531  INFO 19092 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.176 seconds (JVM running for 1.413)\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 13:58:54.537  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:16\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:15\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:14\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:13\n2020-09-13 13:58:54.547  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:12\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 9 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:10\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 8 ActiveCount: 3 PoolSize:4 TaskCount:19 Queue size:10\n2020-09-13 13:58:54.554  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 10 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:9\n2020-09-13 13:58:54.557  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:8\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 13 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:6\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 12 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:7\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 14 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:5\n2020-09-13 13:58:54.567  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 15 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:4\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 17 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:2\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 18 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:1\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 16 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:3\n2020-09-13 13:58:54.578  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 19 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:0\n\n```\n\n任务数量小于队列最大长度时，20个任务由4个线程消费完\n\n\n\n\n\n- 核心线程数4，最大线程数10，队列长度20，任务数30\n\n```shell\n2020-09-13 14:06:55.919  INFO 20216 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.177 seconds (JVM running for 1.412)\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:5 Queue size:1\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 6 PoolSize:6 TaskCount:26 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 9 PoolSize:9 TaskCount:29 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:18\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:17\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:16\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:15\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 9 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:14\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:13\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:12\n2020-09-13 14:06:55.935  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:11\n2020-09-13 14:06:55.935  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:10\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:9\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:8\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:7\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:6\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:5\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:4\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:3\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:2\n2020-09-13 14:06:55.945  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:1\n2020-09-13 14:06:55.945  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 23 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:0\n\n```\n\n任务数量大于队列最大长度，任务数量-队列最大长度<最大线程数量时，超过队列最大长度的任务会尝试新增线程（由日志中第6行可以推断出），30个任务由10个线程消费完。\n\n且如果任务数设置为27，则处理任务线程数为7，这也就解释了实际环境中为什么有时候会有37个线程处理消息，有时候有500个线程处理（最大线程数值模块设置为500）。\n\n\n\n\n\n- 核心线程数4，最大线程数10，队列长度20，任务数50\n\n```shell\n2020-09-13 14:14:11.501  INFO 20899 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.17 seconds (JVM running for 1.402)\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.509  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.515  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:14:11.519  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:31 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:32 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:33 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 9 ActiveCount: 9 PoolSize:10 TaskCount:34 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:20\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:37 Queue size:19\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:20\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:39 Queue size:20\n2020-09-13 14:14:11.525  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:19\n2020-09-13 14:14:11.529  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:20\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:19\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:20\n2020-09-13 14:14:11.532  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:45 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 23 ActiveCount: 9 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.535  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 30 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:19\n2020-09-13 14:14:11.539  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 31 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:18\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 32 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:17\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 33 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:16\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 36 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 37 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:12\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 38 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:11\n2020-09-13 14:14:11.544  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 39 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:10\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 35 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 34 ActiveCount: 8 PoolSize:10 TaskCount:50 Queue size:14\n2020-09-13 14:14:11.545  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 40 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:9\n2020-09-13 14:14:11.550  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 41 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:8\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 42 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:7\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 43 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:6\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 45 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 44 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.555  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 46 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:3\n2020-09-13 14:14:11.555  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 47 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:2\n2020-09-13 14:14:11.556  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 48 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:1\n2020-09-13 14:14:11.558  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 49 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:0\n\n```\n\n任务数量大于最大线程数加上队列长度，会执行拒绝策略，在此处重写了 rejectedExecution 使用put阻塞将消息插入队列，所以所有任务都会被处理。\n\n\n\n至此，如何产生不同数量线程的原因找到了，但更进一步思考，非核心线程在产生之后 就会一直存在去处理消息吗？有没有什么情况下整个线程池的线程数量会下降为核心线程数量？\n\n\n\n\n\n## 添加线程后续\n\n### 源码与简单解释\n\n```java\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            //获取锁\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    //workers是hashset， getPoolSize 方法获取的就是workers的大小\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n\n```java\n/**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\nWorker(Runnable firstTask) {\n    setState(-1); // inhibit interrupts until runWorker\n    this.firstTask = firstTask;\n    this.thread = getThreadFactory().newThread(this);\n}\n\n/** Delegates main run loop to outer runWorker  */\npublic void run() {\n    runWorker(this);\n}\n\n/**\n     * Main worker run loop.  Repeatedly gets tasks from queue and\n     * executes them, while coping with a number of issues:\n     *\n     * 1. We may start out with an initial task, in which case we\n     * don't need to get the first one. Otherwise, as long as pool is\n     * running, we get tasks from getTask. If it returns null then the\n     * worker exits due to changed pool state or configuration\n     * parameters.  Other exits result from exception throws in\n     * external code, in which case completedAbruptly holds, which\n     * usually leads processWorkerExit to replace this thread.\n     *\n     * 2. Before running any task, the lock is acquired to prevent\n     * other pool interrupts while the task is executing, and then we\n     * ensure that unless pool is stopping, this thread does not have\n     * its interrupt set.\n     *\n     * 3. Each task run is preceded by a call to beforeExecute, which\n     * might throw an exception, in which case we cause thread to die\n     * (breaking loop with completedAbruptly true) without processing\n     * the task.\n     *\n     * 4. Assuming beforeExecute completes normally, we run the task,\n     * gathering any of its thrown exceptions to send to afterExecute.\n     * We separately handle RuntimeException, Error (both of which the\n     * specs guarantee that we trap) and arbitrary Throwables.\n     * Because we cannot rethrow Throwables within Runnable.run, we\n     * wrap them within Errors on the way out (to the thread's\n     * UncaughtExceptionHandler).  Any thrown exception also\n     * conservatively causes thread to die.\n     *\n     * 5. After task.run completes, we call afterExecute, which may\n     * also throw an exception, which will also cause thread to\n     * die. According to JLS Sec 14.20, this exception is the one that\n     * will be in effect even if task.run throws.\n     *\n     * The net effect of the exception mechanics is that afterExecute\n     * and the thread's UncaughtExceptionHandler have as accurate\n     * information as we can provide about any problems encountered by\n     * user code.\n     *\n     * @param w the worker\n     */\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try\n        //当启动了一个worker之后，会一直去获取队列里面的任务。 这也就是当 任务数量大于队列长度时，新增的线程会一直工作下去的原因\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n\n/**\n     * Performs blocking or timed wait for a task, depending on\n     * current configuration settings, or returns null if this worker\n     * must exit because of any of:\n     * 1. There are more than maximumPoolSize workers (due to\n     *    a call to setMaximumPoolSize).\n     * 2. The pool is stopped.\n     * 3. The pool is shutdown and the queue is empty.\n     * 4. This worker timed out waiting for a task, and timed-out\n     *    workers are subject to termination (that is,\n     *    {@code allowCoreThreadTimeOut || workerCount > corePoolSize})\n     *    both before and after the timed wait, and if the queue is\n     *    non-empty, this worker is not the last thread in the pool.\n     *\n     * @return task, or null if the worker must exit, in which case\n     *         workerCount is decremented\n     */\nprivate Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n\n        int wc = workerCountOf(c);\n\n        // Are workers subject to culling?\n        //在本次设置中没有设置allowCoreThreadTimeOut，所以为默认值false。 任务数量大于队列长度时， wc > corePoolSize 成立，不过也就是会让下面获取下个任务多了个超时检查而已。 若60s（在本案例中的设置）队列为空，就会关闭超过核心线程的部分（不过对于当前业务来说，永远不会关闭 :)  ）\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n\n        try {\n            //poll和take差别在于poll多了keepAliveTime的检查，最后都是调用dequeue\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n            workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}\n```\n\n\n\n\n\n### 实例分析与代码验证\n\n- 将线程池设置参数 keepAliveTime 设为1s，在所有任务处理完后查看线程池中的线程数量，可以验证。2s 后线程数量等于设置的核心线程数\n\n```shell\n2020-09-14 13:42:01.380  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:42:03.381  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:4 TaskCount:50 Queue size:0\n\n```\n\n- 将  allowCoreThreadTimeOut 设置为 true。2s 后线程池中线程数连核心线程也不在保持\n\n```shell\n2020-09-14 13:47:39.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:47:41.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:0 TaskCount:50 Queue size:0\n\n```\n\n\n\n\n\n## 结论与参数说明\n\n- **corePoolSize** :核心线程数。根据正常情况下每秒的任务数量，单个任务消耗时间来确定。若正常情况下每秒600个请求，平均每个请求耗时20ms，那么需要设置为12，同时还要考虑线程因为其他任务被占用或因为异常导致线程停滞，还有业务主要是CPU密集还是IO密集，避免增加过多线程引起上下文切换开销大于业务开销。\n- **maximumPoolSize**: 当任务数量超过队列长度后，允许开启的最大线程数。需要注意的是若不存在空闲时间来让线程消亡，会一直保持当前的线程数量处理消息。即 corePoolSize <= 实际线程数 <= maximumPoolSize\n- **keepAliveTime**: worker 获取task时，最大等待的时间。 即当线程处理完成当前任务，从任务队列中获取下一个任务时，最大允许队列为空的时间。\n- **workQueue**: 任务队列。这里需要关注的是队列的长度。需要考虑自身业务是否允许消息延时处理？最大允许多久的延时？若可接受5s的延时，平均每个请求处理时间为20ms，核心线程数为4，则5s内允许积压1000条请求。若队列长度设置为1000 ，当请求数量积压超过1000时， 会增加不超过最大线程数的线程处理，若 maximumPoolSize 为20，假设此时处理请求线程数为最大20，则允许积压5000条消息。所以需要根据业务突增来确定\n- **allowCoreThreadTimeOut** : 允许核心线程超时。请求量不大可以考虑设置为true，一直有消息处理的情况下设置true也没啥用。\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【JAVA】线程池代码的一次深入分析.md","raw":"---\ntitle: 【JAVA】线程池代码的一次深入分析\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-13 11:35:56\npassword:\nsummary: 本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析\ntags:\n- JAVA\n- 源码分析\n- 线程池\ncategories:\n- 编程\n---\n\n## 前言\n\n本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析。作者水平有限，非喜勿喷。\n\n\n\n\n\n## 背景\n\n在一次统计线上系统每秒处理消息的线程数中，发现有些机器有37个线程在运行，有些机器在重启了服务后由之前的500个线程变为8个线程。在确认了所有机器的JAVA版本、启动参数没有问题后，将分析重点放到了代码中的线程池部分。\n\n\n\n将系统中线程池部分的代码单独摘出，写了个demo，方便在单机上分析和复现，代码在[test-thread](https://github.com/yibiner/blog-demo-code/tree/master/test-thread)，下文中的实例分析和代码验证都是在这个demo上跑的，读者可以自行验证。\n\n\n\n系统版本\n\n```sh\n$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n```\n\nJAVA版本\n\n```sh\n$ java -version\njava version \"1.8.0_241\"\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)\n```\n\n\n\n\n\n##  线程池源码简单分析\n\n由示例代码中可以看到\n\n```java\nBlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>(20);\nRejectedExecutionHandler handler = new BlockRejectedExecutionHandler();\nexecutor = new ThreadPoolExecutor(corePoolSize, executorMaximumPoolSize, 1, TimeUnit.SECONDS, workQueue, handler);\n```\n\n线程池直接使用了 ThreadPoolExecutor ，任务队列使用了 LinkedBlockingQueue 并设置了size，拒绝策略自行实现了 RejectedExecutionHandler 。\n\n所以重点在于 ThreadPoolExecutor 的内部实现。\n\n\n\n### 源码与简单解释\n\n```java\n/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters and default thread factory.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:<br>\n     *         {@code corePoolSize < 0}<br>\n     *         {@code keepAliveTime < 0}<br>\n     *         {@code maximumPoolSize <= 0}<br>\n     *         {@code maximumPoolSize < corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code handler} is null\n     */\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              RejectedExecutionHandler handler) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), handler);\n    }\n```\n\n- corePoolSize\n\n  线程池中的核心线程数。除非设置了allowCoreThreadTimeOut，否则一直存活。\n\n- maximumPoolSize\n\n  线程池中的最大线程数。\n\n- workQueue\n\n  用于保存还没执行到的任务的队列。\n\n- handler\n\n  线程池的饱和策略，当线程池中的阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，需要进行某种处理，默认是抛出异常，这里是将任务放入workQueue中\n\n\n\n```java\n//只是对参数做了判空\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.acc = System.getSecurityManager() == null ?\n                null :\n                AccessController.getContext();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n\n\n\n\n\n```java\n//提交任务时调用    execute ，源码中的注释已经将基本的流程说明清楚了，这里就不翻译了。\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n         * Proceed in 3 steps:\n         *\n         * 1. If fewer than corePoolSize threads are running, try to\n         * start a new thread with the given command as its first\n         * task.  The call to addWorker atomically checks runState and\n         * workerCount, and so prevents false alarms that would add\n         * threads when it shouldn't, by returning false.\n         *\n         * 2. If a task can be successfully queued, then we still need\n         * to double-check whether we should have added a thread\n         * (because existing ones died since last checking) or that\n         * the pool shut down since entry into this method. So we\n         * recheck state and if necessary roll back the enqueuing if\n         * stopped, or start a new thread if there are none.\n         *\n         * 3. If we cannot queue task, then we try to add a new\n         * thread.  If it fails, we know we are shut down or saturated\n         * and so reject the task.\n         */\n    int c = ctl.get();\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    //isRunning 线程池使用int 的前个二进制3位表示状态，后29位表示数量，具体值看下面说明。\n    //当当前运行的线程数量大于设定的核心线程数量时，会优先将任务放入队列中。\n    //代入实际业务处理，此处会导致任务数小于队列最大值时，线程池中只有核心线程在处理\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //若队列已经满了，则会尝试将直接添加worker，若当前核心线程数小于设定的最大线程数，则会新增线程。\n    //代入实际业务处理，此处会导致当模块启动时，待处理任务数为70，大于队列最大长度50，若核心线程数是8，最大线程数是30，则会使线程数增加到20处理任务；若核心线程数是8，最大线程数是10，则会增加到10个线程数，且有部分任务会执行reject策略。详细见下面实例分析\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n\n\n\n\n```java\nprivate static final int COUNT_BITS = Integer.SIZE - 3;//29\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;//1左移29位后，二进制表示： 10 0000 0000 0000 0000 0000 0000 0000 ，-1 后则为 1 1111 1111 1111 1111 1111 1111 1111\n\n// runState is stored in the high-order bits\nprivate static final int RUNNING    = -1 << COUNT_BITS;     //11100000000000000000000000000000\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS; //0\nprivate static final int STOP       =  1 << COUNT_BITS;   \t\t   //100000000000000000000000000000\nprivate static final int TIDYING    =  2 << COUNT_BITS;  \t\t//1000000000000000000000000000000\nprivate static final int TERMINATED =  3 << COUNT_BITS;  //1100000000000000000000000000000\n\n// Packing and unpacking ctl\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n```\n\n```java\n//根据设定的核心线程数和最大线程数来决定是否要新增线程来处理任务\n/**\n     * Checks if a new worker can be added with respect to current\n     * pool state and the given bound (either core or maximum). If so,\n     * the worker count is adjusted accordingly, and, if possible, a\n     * new worker is created and started, running firstTask as its\n     * first task. This method returns false if the pool is stopped or\n     * eligible to shut down. It also returns false if the thread\n     * factory fails to create a thread when asked.  If the thread\n     * creation fails, either due to the thread factory returning\n     * null, or due to an exception (typically OutOfMemoryError in\n     * Thread.start()), we roll back cleanly.\n     *\n     * @param firstTask the task the new thread should run first (or\n     * null if none). Workers are created with an initial first task\n     * (in method execute()) to bypass queuing when there are fewer\n     * than corePoolSize threads (in which case we always start one),\n     * or when the queue is full (in which case we must bypass queue).\n     * Initially idle threads are usually created via\n     * prestartCoreThread or to replace other dying workers.\n     *\n     * @param core if true use corePoolSize as bound, else\n     * maximumPoolSize. (A boolean indicator is used here rather than a\n     * value to ensure reads of fresh values after checking other pool\n     * state).\n     * @return true if successful\n     */\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n\n\n\n\n\n### 实例分析与代码验证\n\n- 核心线程数4，最大线程数10，队列长度20，任务数20\n\n```shell\n$ mvn spring-boot:run\n2020-09-13 13:58:54.531  INFO 19092 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.176 seconds (JVM running for 1.413)\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 13:58:54.537  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:16\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:15\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:14\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:13\n2020-09-13 13:58:54.547  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:12\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 9 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:10\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 8 ActiveCount: 3 PoolSize:4 TaskCount:19 Queue size:10\n2020-09-13 13:58:54.554  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 10 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:9\n2020-09-13 13:58:54.557  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:8\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 13 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:6\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 12 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:7\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 14 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:5\n2020-09-13 13:58:54.567  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 15 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:4\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 17 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:2\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 18 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:1\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 16 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:3\n2020-09-13 13:58:54.578  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 19 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:0\n\n```\n\n任务数量小于队列最大长度时，20个任务由4个线程消费完\n\n\n\n\n\n- 核心线程数4，最大线程数10，队列长度20，任务数30\n\n```shell\n2020-09-13 14:06:55.919  INFO 20216 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.177 seconds (JVM running for 1.412)\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:5 Queue size:1\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 6 PoolSize:6 TaskCount:26 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 9 PoolSize:9 TaskCount:29 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:18\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:17\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:16\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:15\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 9 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:14\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:13\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:12\n2020-09-13 14:06:55.935  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:11\n2020-09-13 14:06:55.935  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:10\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:9\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:8\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:7\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:6\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:5\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:4\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:3\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:2\n2020-09-13 14:06:55.945  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:1\n2020-09-13 14:06:55.945  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 23 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:0\n\n```\n\n任务数量大于队列最大长度，任务数量-队列最大长度<最大线程数量时，超过队列最大长度的任务会尝试新增线程（由日志中第6行可以推断出），30个任务由10个线程消费完。\n\n且如果任务数设置为27，则处理任务线程数为7，这也就解释了实际环境中为什么有时候会有37个线程处理消息，有时候有500个线程处理（最大线程数值模块设置为500）。\n\n\n\n\n\n- 核心线程数4，最大线程数10，队列长度20，任务数50\n\n```shell\n2020-09-13 14:14:11.501  INFO 20899 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.17 seconds (JVM running for 1.402)\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.509  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.515  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:14:11.519  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:31 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:32 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:33 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 9 ActiveCount: 9 PoolSize:10 TaskCount:34 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:20\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:37 Queue size:19\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:20\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:39 Queue size:20\n2020-09-13 14:14:11.525  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:19\n2020-09-13 14:14:11.529  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:20\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:19\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:20\n2020-09-13 14:14:11.532  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:45 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 23 ActiveCount: 9 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.535  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 30 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:19\n2020-09-13 14:14:11.539  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 31 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:18\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 32 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:17\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 33 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:16\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 36 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 37 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:12\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 38 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:11\n2020-09-13 14:14:11.544  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 39 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:10\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 35 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 34 ActiveCount: 8 PoolSize:10 TaskCount:50 Queue size:14\n2020-09-13 14:14:11.545  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 40 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:9\n2020-09-13 14:14:11.550  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 41 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:8\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 42 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:7\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 43 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:6\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 45 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 44 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.555  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 46 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:3\n2020-09-13 14:14:11.555  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 47 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:2\n2020-09-13 14:14:11.556  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 48 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:1\n2020-09-13 14:14:11.558  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 49 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:0\n\n```\n\n任务数量大于最大线程数加上队列长度，会执行拒绝策略，在此处重写了 rejectedExecution 使用put阻塞将消息插入队列，所以所有任务都会被处理。\n\n\n\n至此，如何产生不同数量线程的原因找到了，但更进一步思考，非核心线程在产生之后 就会一直存在去处理消息吗？有没有什么情况下整个线程池的线程数量会下降为核心线程数量？\n\n\n\n\n\n## 添加线程后续\n\n### 源码与简单解释\n\n```java\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            //获取锁\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    //workers是hashset， getPoolSize 方法获取的就是workers的大小\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n\n```java\n/**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\nWorker(Runnable firstTask) {\n    setState(-1); // inhibit interrupts until runWorker\n    this.firstTask = firstTask;\n    this.thread = getThreadFactory().newThread(this);\n}\n\n/** Delegates main run loop to outer runWorker  */\npublic void run() {\n    runWorker(this);\n}\n\n/**\n     * Main worker run loop.  Repeatedly gets tasks from queue and\n     * executes them, while coping with a number of issues:\n     *\n     * 1. We may start out with an initial task, in which case we\n     * don't need to get the first one. Otherwise, as long as pool is\n     * running, we get tasks from getTask. If it returns null then the\n     * worker exits due to changed pool state or configuration\n     * parameters.  Other exits result from exception throws in\n     * external code, in which case completedAbruptly holds, which\n     * usually leads processWorkerExit to replace this thread.\n     *\n     * 2. Before running any task, the lock is acquired to prevent\n     * other pool interrupts while the task is executing, and then we\n     * ensure that unless pool is stopping, this thread does not have\n     * its interrupt set.\n     *\n     * 3. Each task run is preceded by a call to beforeExecute, which\n     * might throw an exception, in which case we cause thread to die\n     * (breaking loop with completedAbruptly true) without processing\n     * the task.\n     *\n     * 4. Assuming beforeExecute completes normally, we run the task,\n     * gathering any of its thrown exceptions to send to afterExecute.\n     * We separately handle RuntimeException, Error (both of which the\n     * specs guarantee that we trap) and arbitrary Throwables.\n     * Because we cannot rethrow Throwables within Runnable.run, we\n     * wrap them within Errors on the way out (to the thread's\n     * UncaughtExceptionHandler).  Any thrown exception also\n     * conservatively causes thread to die.\n     *\n     * 5. After task.run completes, we call afterExecute, which may\n     * also throw an exception, which will also cause thread to\n     * die. According to JLS Sec 14.20, this exception is the one that\n     * will be in effect even if task.run throws.\n     *\n     * The net effect of the exception mechanics is that afterExecute\n     * and the thread's UncaughtExceptionHandler have as accurate\n     * information as we can provide about any problems encountered by\n     * user code.\n     *\n     * @param w the worker\n     */\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try\n        //当启动了一个worker之后，会一直去获取队列里面的任务。 这也就是当 任务数量大于队列长度时，新增的线程会一直工作下去的原因\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n\n/**\n     * Performs blocking or timed wait for a task, depending on\n     * current configuration settings, or returns null if this worker\n     * must exit because of any of:\n     * 1. There are more than maximumPoolSize workers (due to\n     *    a call to setMaximumPoolSize).\n     * 2. The pool is stopped.\n     * 3. The pool is shutdown and the queue is empty.\n     * 4. This worker timed out waiting for a task, and timed-out\n     *    workers are subject to termination (that is,\n     *    {@code allowCoreThreadTimeOut || workerCount > corePoolSize})\n     *    both before and after the timed wait, and if the queue is\n     *    non-empty, this worker is not the last thread in the pool.\n     *\n     * @return task, or null if the worker must exit, in which case\n     *         workerCount is decremented\n     */\nprivate Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n\n        int wc = workerCountOf(c);\n\n        // Are workers subject to culling?\n        //在本次设置中没有设置allowCoreThreadTimeOut，所以为默认值false。 任务数量大于队列长度时， wc > corePoolSize 成立，不过也就是会让下面获取下个任务多了个超时检查而已。 若60s（在本案例中的设置）队列为空，就会关闭超过核心线程的部分（不过对于当前业务来说，永远不会关闭 :)  ）\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n\n        try {\n            //poll和take差别在于poll多了keepAliveTime的检查，最后都是调用dequeue\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n            workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}\n```\n\n\n\n\n\n### 实例分析与代码验证\n\n- 将线程池设置参数 keepAliveTime 设为1s，在所有任务处理完后查看线程池中的线程数量，可以验证。2s 后线程数量等于设置的核心线程数\n\n```shell\n2020-09-14 13:42:01.380  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:42:03.381  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:4 TaskCount:50 Queue size:0\n\n```\n\n- 将  allowCoreThreadTimeOut 设置为 true。2s 后线程池中线程数连核心线程也不在保持\n\n```shell\n2020-09-14 13:47:39.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:47:41.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:0 TaskCount:50 Queue size:0\n\n```\n\n\n\n\n\n## 结论与参数说明\n\n- **corePoolSize** :核心线程数。根据正常情况下每秒的任务数量，单个任务消耗时间来确定。若正常情况下每秒600个请求，平均每个请求耗时20ms，那么需要设置为12，同时还要考虑线程因为其他任务被占用或因为异常导致线程停滞，还有业务主要是CPU密集还是IO密集，避免增加过多线程引起上下文切换开销大于业务开销。\n- **maximumPoolSize**: 当任务数量超过队列长度后，允许开启的最大线程数。需要注意的是若不存在空闲时间来让线程消亡，会一直保持当前的线程数量处理消息。即 corePoolSize <= 实际线程数 <= maximumPoolSize\n- **keepAliveTime**: worker 获取task时，最大等待的时间。 即当线程处理完成当前任务，从任务队列中获取下一个任务时，最大允许队列为空的时间。\n- **workQueue**: 任务队列。这里需要关注的是队列的长度。需要考虑自身业务是否允许消息延时处理？最大允许多久的延时？若可接受5s的延时，平均每个请求处理时间为20ms，核心线程数为4，则5s内允许积压1000条请求。若队列长度设置为1000 ，当请求数量积压超过1000时， 会增加不超过最大线程数的线程处理，若 maximumPoolSize 为20，假设此时处理请求线程数为最大20，则允许积压5000条消息。所以需要根据业务突增来确定\n- **allowCoreThreadTimeOut** : 允许核心线程超时。请求量不大可以考虑设置为true，一直有消息处理的情况下设置true也没啥用。\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【JAVA】线程池代码的一次深入分析","published":1,"updated":"2020-11-23T14:34:32.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhuq03m60003y8gp3ql87z8w","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析。作者水平有限，非喜勿喷。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在一次统计线上系统每秒处理消息的线程数中，发现有些机器有37个线程在运行，有些机器在重启了服务后由之前的500个线程变为8个线程。在确认了所有机器的JAVA版本、启动参数没有问题后，将分析重点放到了代码中的线程池部分。</p>\n<p>将系统中线程池部分的代码单独摘出，写了个demo，方便在单机上分析和复现，代码在<a href=\"https://github.com/yibiner/blog-demo-code/tree/master/test-thread\" target=\"_blank\" rel=\"noopener\">test-thread</a>，下文中的实例分析和代码验证都是在这个demo上跑的，读者可以自行验证。</p>\n<p>系统版本</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>JAVA版本</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ java -version\njava version \"1.8.0_241\"\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"线程池源码简单分析\"><a href=\"#线程池源码简单分析\" class=\"headerlink\" title=\"线程池源码简单分析\"></a>线程池源码简单分析</h2><p>由示例代码中可以看到</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">BlockingQueue<span class=\"token operator\">&lt;</span>Runnable<span class=\"token operator\">></span> workQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRejectedExecutionHandler handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockRejectedExecutionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> executorMaximumPoolSize<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">,</span> workQueue<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>线程池直接使用了 ThreadPoolExecutor ，任务队列使用了 LinkedBlockingQueue 并设置了size，拒绝策略自行实现了 RejectedExecutionHandler 。</p>\n<p>所以重点在于 ThreadPoolExecutor 的内部实现。</p>\n<h3 id=\"源码与简单解释\"><a href=\"#源码与简单解释\" class=\"headerlink\" title=\"源码与简单解释\"></a>源码与简单解释</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters and default thread factory.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:&lt;br>\n     *         {@code corePoolSize &lt; 0}&lt;br>\n     *         {@code keepAliveTime &lt; 0}&lt;br>\n     *         {@code maximumPoolSize &lt;= 0}&lt;br>\n     *         {@code maximumPoolSize &lt; corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code handler} is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                              TimeUnit unit<span class=\"token punctuation\">,</span>\n                              BlockingQueue<span class=\"token operator\">&lt;</span>Runnable<span class=\"token operator\">></span> workQueue<span class=\"token punctuation\">,</span>\n                              RejectedExecutionHandler handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> maximumPoolSize<span class=\"token punctuation\">,</span> keepAliveTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> workQueue<span class=\"token punctuation\">,</span>\n             Executors<span class=\"token punctuation\">.</span><span class=\"token function\">defaultThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>corePoolSize</p>\n<p>线程池中的核心线程数。除非设置了allowCoreThreadTimeOut，否则一直存活。</p>\n</li>\n<li><p>maximumPoolSize</p>\n<p>线程池中的最大线程数。</p>\n</li>\n<li><p>workQueue</p>\n<p>用于保存还没执行到的任务的队列。</p>\n</li>\n<li><p>handler</p>\n<p>线程池的饱和策略，当线程池中的阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，需要进行某种处理，默认是抛出异常，这里是将任务放入workQueue中</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//只是对参数做了判空</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                              TimeUnit unit<span class=\"token punctuation\">,</span>\n                              BlockingQueue<span class=\"token operator\">&lt;</span>Runnable<span class=\"token operator\">></span> workQueue<span class=\"token punctuation\">,</span>\n                              ThreadFactory threadFactory<span class=\"token punctuation\">,</span>\n                              RejectedExecutionHandler handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span>\n            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span>\n                null <span class=\"token operator\">:</span>\n                AccessController<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//提交任务时调用    execute ，源码中的注释已经将基本的流程说明清楚了，这里就不翻译了。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>Runnable command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*\n         * Proceed in 3 steps:\n         *\n         * 1. If fewer than corePoolSize threads are running, try to\n         * start a new thread with the given command as its first\n         * task.  The call to addWorker atomically checks runState and\n         * workerCount, and so prevents false alarms that would add\n         * threads when it shouldn't, by returning false.\n         *\n         * 2. If a task can be successfully queued, then we still need\n         * to double-check whether we should have added a thread\n         * (because existing ones died since last checking) or that\n         * the pool shut down since entry into this method. So we\n         * recheck state and if necessary roll back the enqueuing if\n         * stopped, or start a new thread if there are none.\n         *\n         * 3. If we cannot queue task, then we try to add a new\n         * thread.  If it fails, we know we are shut down or saturated\n         * and so reject the task.\n         */</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//isRunning 线程池使用int 的前个二进制3位表示状态，后29位表示数量，具体值看下面说明。</span>\n    <span class=\"token comment\" spellcheck=\"true\">//当当前运行的线程数量大于设定的核心线程数量时，会优先将任务放入队列中。</span>\n    <span class=\"token comment\" spellcheck=\"true\">//代入实际业务处理，此处会导致任务数小于队列最大值时，线程池中只有核心线程在处理</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> recheck <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//若队列已经满了，则会尝试将直接添加worker，若当前核心线程数小于设定的最大线程数，则会新增线程。</span>\n    <span class=\"token comment\" spellcheck=\"true\">//代入实际业务处理，此处会导致当模块启动时，待处理任务数为70，大于队列最大长度50，若核心线程数是8，最大线程数是30，则会使线程数增加到20处理任务；若核心线程数是8，最大线程数是10，则会增加到10个线程数，且有部分任务会执行reject策略。详细见下面实例分析</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> COUNT_BITS <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span>SIZE <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//29</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> CAPACITY   <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> COUNT_BITS<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//1左移29位后，二进制表示： 10 0000 0000 0000 0000 0000 0000 0000 ，-1 后则为 1 1111 1111 1111 1111 1111 1111 1111</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// runState is stored in the high-order bits</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> RUNNING    <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> COUNT_BITS<span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">//11100000000000000000000000000000</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SHUTDOWN   <span class=\"token operator\">=</span>  <span class=\"token number\">0</span> <span class=\"token operator\">&lt;&lt;</span> COUNT_BITS<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//0</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> STOP       <span class=\"token operator\">=</span>  <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> COUNT_BITS<span class=\"token punctuation\">;</span>              <span class=\"token comment\" spellcheck=\"true\">//100000000000000000000000000000</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TIDYING    <span class=\"token operator\">=</span>  <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> COUNT_BITS<span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//1000000000000000000000000000000</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TERMINATED <span class=\"token operator\">=</span>  <span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> COUNT_BITS<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//1100000000000000000000000000000</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Packing and unpacking ctl</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> c <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>CAPACITY<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> c <span class=\"token operator\">&amp;</span> CAPACITY<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ctlOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> wc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> rs <span class=\"token operator\">|</span> wc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//根据设定的核心线程数和最大线程数来决定是否要新增线程来处理任务</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n     * Checks if a new worker can be added with respect to current\n     * pool state and the given bound (either core or maximum). If so,\n     * the worker count is adjusted accordingly, and, if possible, a\n     * new worker is created and started, running firstTask as its\n     * first task. This method returns false if the pool is stopped or\n     * eligible to shut down. It also returns false if the thread\n     * factory fails to create a thread when asked.  If the thread\n     * creation fails, either due to the thread factory returning\n     * null, or due to an exception (typically OutOfMemoryError in\n     * Thread.start()), we roll back cleanly.\n     *\n     * @param firstTask the task the new thread should run first (or\n     * null if none). Workers are created with an initial first task\n     * (in method execute()) to bypass queuing when there are fewer\n     * than corePoolSize threads (in which case we always start one),\n     * or when the queue is full (in which case we must bypass queue).\n     * Initially idle threads are usually created via\n     * prestartCoreThread or to replace other dying workers.\n     *\n     * @param core if true use corePoolSize as bound, else\n     * maximumPoolSize. (A boolean indicator is used here rather than a\n     * value to ensure reads of fresh values after checking other pool\n     * state).\n     * @return true if successful\n     */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>Runnable firstTask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> core<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    retry<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Check if queue empty only if necessary.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span>\n               firstTask <span class=\"token operator\">==</span> null <span class=\"token operator\">&amp;&amp;</span>\n               <span class=\"token operator\">!</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wc <span class=\"token operator\">>=</span> CAPACITY <span class=\"token operator\">||</span>\n                wc <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>core <span class=\"token operator\">?</span> corePoolSize <span class=\"token operator\">:</span> maximumPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndIncrementWorkerCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span> retry<span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Re-read ctl</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span> retry<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// else CAS failed due to workerCount change; retry inner loop</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">boolean</span> workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    Worker w <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>firstTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> Thread t <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> ReentrantLock mainLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainLock<span class=\"token punctuation\">;</span>\n            mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Recheck while holding lock.</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Back out on ThreadFactory failure or if</span>\n                <span class=\"token comment\" spellcheck=\"true\">// shut down before lock acquired.</span>\n                <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">&lt;</span> SHUTDOWN <span class=\"token operator\">||</span>\n                    <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span> firstTask <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// precheck that t is startable</span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> workers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> largestPoolSize<span class=\"token punctuation\">)</span>\n                        largestPoolSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n                    workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> workerStarted<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">addWorkerFailed</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> workerStarted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"实例分析与代码验证\"><a href=\"#实例分析与代码验证\" class=\"headerlink\" title=\"实例分析与代码验证\"></a>实例分析与代码验证</h3><ul>\n<li>核心线程数4，最大线程数10，队列长度20，任务数20</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ mvn spring-boot:run\n2020-09-13 13:58:54.531  INFO 19092 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.176 seconds (JVM running for 1.413)\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 13:58:54.537  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:16\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:15\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:14\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:13\n2020-09-13 13:58:54.547  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:12\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 9 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:10\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 8 ActiveCount: 3 PoolSize:4 TaskCount:19 Queue size:10\n2020-09-13 13:58:54.554  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 10 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:9\n2020-09-13 13:58:54.557  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:8\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 13 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:6\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 12 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:7\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 14 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:5\n2020-09-13 13:58:54.567  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 15 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:4\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 17 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:2\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 18 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:1\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 16 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:3\n2020-09-13 13:58:54.578  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 19 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>任务数量小于队列最大长度时，20个任务由4个线程消费完</p>\n<ul>\n<li>核心线程数4，最大线程数10，队列长度20，任务数30</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">2020-09-13 14:06:55.919  INFO 20216 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.177 seconds (JVM running for 1.412)\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:5 Queue size:1\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 6 PoolSize:6 TaskCount:26 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 9 PoolSize:9 TaskCount:29 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:18\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:17\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:16\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:15\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 9 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:14\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:13\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:12\n2020-09-13 14:06:55.935  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:11\n2020-09-13 14:06:55.935  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:10\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:9\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:8\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:7\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:6\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:5\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:4\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:3\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:2\n2020-09-13 14:06:55.945  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:1\n2020-09-13 14:06:55.945  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 23 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>任务数量大于队列最大长度，任务数量-队列最大长度&lt;最大线程数量时，超过队列最大长度的任务会尝试新增线程（由日志中第6行可以推断出），30个任务由10个线程消费完。</p>\n<p>且如果任务数设置为27，则处理任务线程数为7，这也就解释了实际环境中为什么有时候会有37个线程处理消息，有时候有500个线程处理（最大线程数值模块设置为500）。</p>\n<ul>\n<li>核心线程数4，最大线程数10，队列长度20，任务数50</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">2020-09-13 14:14:11.501  INFO 20899 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.17 seconds (JVM running for 1.402)\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.509  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.515  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:14:11.519  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:31 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:32 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:33 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 9 ActiveCount: 9 PoolSize:10 TaskCount:34 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:20\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:37 Queue size:19\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:20\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:39 Queue size:20\n2020-09-13 14:14:11.525  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:19\n2020-09-13 14:14:11.529  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:20\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:19\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:20\n2020-09-13 14:14:11.532  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:45 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 23 ActiveCount: 9 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.535  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 30 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:19\n2020-09-13 14:14:11.539  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 31 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:18\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 32 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:17\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 33 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:16\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 36 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 37 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:12\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 38 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:11\n2020-09-13 14:14:11.544  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 39 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:10\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 35 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 34 ActiveCount: 8 PoolSize:10 TaskCount:50 Queue size:14\n2020-09-13 14:14:11.545  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 40 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:9\n2020-09-13 14:14:11.550  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 41 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:8\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 42 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:7\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 43 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:6\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 45 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 44 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.555  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 46 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:3\n2020-09-13 14:14:11.555  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 47 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:2\n2020-09-13 14:14:11.556  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 48 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:1\n2020-09-13 14:14:11.558  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 49 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>任务数量大于最大线程数加上队列长度，会执行拒绝策略，在此处重写了 rejectedExecution 使用put阻塞将消息插入队列，所以所有任务都会被处理。</p>\n<p>至此，如何产生不同数量线程的原因找到了，但更进一步思考，非核心线程在产生之后 就会一直存在去处理消息吗？有没有什么情况下整个线程池的线程数量会下降为核心线程数量？</p>\n<h2 id=\"添加线程后续\"><a href=\"#添加线程后续\" class=\"headerlink\" title=\"添加线程后续\"></a>添加线程后续</h2><h3 id=\"源码与简单解释-1\"><a href=\"#源码与简单解释-1\" class=\"headerlink\" title=\"源码与简单解释\"></a>源码与简单解释</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>Runnable firstTask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> core<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    retry<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Check if queue empty only if necessary.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span>\n               firstTask <span class=\"token operator\">==</span> null <span class=\"token operator\">&amp;&amp;</span>\n               <span class=\"token operator\">!</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wc <span class=\"token operator\">>=</span> CAPACITY <span class=\"token operator\">||</span>\n                wc <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>core <span class=\"token operator\">?</span> corePoolSize <span class=\"token operator\">:</span> maximumPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndIncrementWorkerCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span> retry<span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Re-read ctl</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span> retry<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// else CAS failed due to workerCount change; retry inner loop</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">boolean</span> workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    Worker w <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>firstTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> Thread t <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取锁</span>\n            <span class=\"token keyword\">final</span> ReentrantLock mainLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainLock<span class=\"token punctuation\">;</span>\n            mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Recheck while holding lock.</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Back out on ThreadFactory failure or if</span>\n                <span class=\"token comment\" spellcheck=\"true\">// shut down before lock acquired.</span>\n                <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">&lt;</span> SHUTDOWN <span class=\"token operator\">||</span>\n                    <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span> firstTask <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// precheck that t is startable</span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//workers是hashset， getPoolSize 方法获取的就是workers的大小</span>\n                    workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> workers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> largestPoolSize<span class=\"token punctuation\">)</span>\n                        largestPoolSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n                    workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> workerStarted<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">addWorkerFailed</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> workerStarted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */</span>\n<span class=\"token function\">Worker</span><span class=\"token punctuation\">(</span>Runnable firstTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inhibit interrupts until runWorker</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstTask <span class=\"token operator\">=</span> firstTask<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token function\">getThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/** Delegates main run loop to outer runWorker  */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n     * Main worker run loop.  Repeatedly gets tasks from queue and\n     * executes them, while coping with a number of issues:\n     *\n     * 1. We may start out with an initial task, in which case we\n     * don't need to get the first one. Otherwise, as long as pool is\n     * running, we get tasks from getTask. If it returns null then the\n     * worker exits due to changed pool state or configuration\n     * parameters.  Other exits result from exception throws in\n     * external code, in which case completedAbruptly holds, which\n     * usually leads processWorkerExit to replace this thread.\n     *\n     * 2. Before running any task, the lock is acquired to prevent\n     * other pool interrupts while the task is executing, and then we\n     * ensure that unless pool is stopping, this thread does not have\n     * its interrupt set.\n     *\n     * 3. Each task run is preceded by a call to beforeExecute, which\n     * might throw an exception, in which case we cause thread to die\n     * (breaking loop with completedAbruptly true) without processing\n     * the task.\n     *\n     * 4. Assuming beforeExecute completes normally, we run the task,\n     * gathering any of its thrown exceptions to send to afterExecute.\n     * We separately handle RuntimeException, Error (both of which the\n     * specs guarantee that we trap) and arbitrary Throwables.\n     * Because we cannot rethrow Throwables within Runnable.run, we\n     * wrap them within Errors on the way out (to the thread's\n     * UncaughtExceptionHandler).  Any thrown exception also\n     * conservatively causes thread to die.\n     *\n     * 5. After task.run completes, we call afterExecute, which may\n     * also throw an exception, which will also cause thread to\n     * die. According to JLS Sec 14.20, this exception is the one that\n     * will be in effect even if task.run throws.\n     *\n     * The net effect of the exception mechanics is that afterExecute\n     * and the thread's UncaughtExceptionHandler have as accurate\n     * information as we can provide about any problems encountered by\n     * user code.\n     *\n     * @param w the worker\n     */</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span>Worker w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Thread wt <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Runnable task <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>firstTask<span class=\"token punctuation\">;</span>\n    w<span class=\"token punctuation\">.</span>firstTask <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// allow interrupts</span>\n    <span class=\"token keyword\">boolean</span> completedAbruptly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span>\n        <span class=\"token comment\" spellcheck=\"true\">//当启动了一个worker之后，会一直去获取队列里面的任务。 这也就是当 任务数量大于队列长度时，新增的线程会一直工作下去的原因</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">!=</span> null <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">=</span> <span class=\"token function\">getTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// If pool is stopping, ensure thread is interrupted;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// if not, ensure thread is not interrupted.  This</span>\n            <span class=\"token comment\" spellcheck=\"true\">// requires a recheck in second case to deal with</span>\n            <span class=\"token comment\" spellcheck=\"true\">// shutdownNow race while clearing interrupt</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">runStateAtLeast</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> STOP<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                 <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                  <span class=\"token function\">runStateAtLeast</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> STOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token operator\">!</span>wt<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                wt<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">beforeExecute</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Throwable thrown <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">afterExecute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                task <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                w<span class=\"token punctuation\">.</span>completedTasks<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        completedAbruptly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">processWorkerExit</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> completedAbruptly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n     * Performs blocking or timed wait for a task, depending on\n     * current configuration settings, or returns null if this worker\n     * must exit because of any of:\n     * 1. There are more than maximumPoolSize workers (due to\n     *    a call to setMaximumPoolSize).\n     * 2. The pool is stopped.\n     * 3. The pool is shutdown and the queue is empty.\n     * 4. This worker timed out waiting for a task, and timed-out\n     *    workers are subject to termination (that is,\n     *    {@code allowCoreThreadTimeOut || workerCount > corePoolSize})\n     *    both before and after the timed wait, and if the queue is\n     *    non-empty, this worker is not the last thread in the pool.\n     *\n     * @return task, or null if the worker must exit, in which case\n     *         workerCount is decremented\n     */</span>\n<span class=\"token keyword\">private</span> Runnable <span class=\"token function\">getTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> timedOut <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Did the last poll() time out?</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Check if queue empty only if necessary.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> SHUTDOWN <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> STOP <span class=\"token operator\">||</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">decrementWorkerCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Are workers subject to culling?</span>\n        <span class=\"token comment\" spellcheck=\"true\">//在本次设置中没有设置allowCoreThreadTimeOut，所以为默认值false。 任务数量大于队列长度时， wc > corePoolSize 成立，不过也就是会让下面获取下个任务多了个超时检查而已。 若60s（在本案例中的设置）队列为空，就会关闭超过核心线程的部分（不过对于当前业务来说，永远不会关闭 :)  ）</span>\n        <span class=\"token keyword\">boolean</span> timed <span class=\"token operator\">=</span> allowCoreThreadTimeOut <span class=\"token operator\">||</span> wc <span class=\"token operator\">></span> corePoolSize<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wc <span class=\"token operator\">></span> maximumPoolSize <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>timed <span class=\"token operator\">&amp;&amp;</span> timedOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>wc <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndDecrementWorkerCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//poll和take差别在于poll多了keepAliveTime的检查，最后都是调用dequeue</span>\n            Runnable r <span class=\"token operator\">=</span> timed <span class=\"token operator\">?</span>\n                workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>NANOSECONDS<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n            workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n            timedOut <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> retry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            timedOut <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"实例分析与代码验证-1\"><a href=\"#实例分析与代码验证-1\" class=\"headerlink\" title=\"实例分析与代码验证\"></a>实例分析与代码验证</h3><ul>\n<li>将线程池设置参数 keepAliveTime 设为1s，在所有任务处理完后查看线程池中的线程数量，可以验证。2s 后线程数量等于设置的核心线程数</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">2020-09-14 13:42:01.380  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:42:03.381  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:4 TaskCount:50 Queue size:0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>将  allowCoreThreadTimeOut 设置为 true。2s 后线程池中线程数连核心线程也不在保持</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">2020-09-14 13:47:39.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:47:41.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:0 TaskCount:50 Queue size:0\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"结论与参数说明\"><a href=\"#结论与参数说明\" class=\"headerlink\" title=\"结论与参数说明\"></a>结论与参数说明</h2><ul>\n<li><strong>corePoolSize</strong> :核心线程数。根据正常情况下每秒的任务数量，单个任务消耗时间来确定。若正常情况下每秒600个请求，平均每个请求耗时20ms，那么需要设置为12，同时还要考虑线程因为其他任务被占用或因为异常导致线程停滞，还有业务主要是CPU密集还是IO密集，避免增加过多线程引起上下文切换开销大于业务开销。</li>\n<li><strong>maximumPoolSize</strong>: 当任务数量超过队列长度后，允许开启的最大线程数。需要注意的是若不存在空闲时间来让线程消亡，会一直保持当前的线程数量处理消息。即 corePoolSize &lt;= 实际线程数 &lt;= maximumPoolSize</li>\n<li><strong>keepAliveTime</strong>: worker 获取task时，最大等待的时间。 即当线程处理完成当前任务，从任务队列中获取下一个任务时，最大允许队列为空的时间。</li>\n<li><strong>workQueue</strong>: 任务队列。这里需要关注的是队列的长度。需要考虑自身业务是否允许消息延时处理？最大允许多久的延时？若可接受5s的延时，平均每个请求处理时间为20ms，核心线程数为4，则5s内允许积压1000条请求。若队列长度设置为1000 ，当请求数量积压超过1000时， 会增加不超过最大线程数的线程处理，若 maximumPoolSize 为20，假设此时处理请求线程数为最大20，则允许积压5000条消息。所以需要根据业务突增来确定</li>\n<li><strong>allowCoreThreadTimeOut</strong> : 允许核心线程超时。请求量不大可以考虑设置为true，一直有消息处理的情况下设置true也没啥用。</li>\n</ul>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了在一次定位线上系统问题时，根据发现的一些问题对JAVA中线程池代码做了下简单的分析。作者水平有限，非喜勿喷。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在一次统计线上系统每秒处理消息的线程数中，发现有些机器有37个线程在运行，有些机器在重启了服务后由之前的500个线程变为8个线程。在确认了所有机器的JAVA版本、启动参数没有问题后，将分析重点放到了代码中的线程池部分。</p>\n<p>将系统中线程池部分的代码单独摘出，写了个demo，方便在单机上分析和复现，代码在<a href=\"https://github.com/yibiner/blog-demo-code/tree/master/test-thread\" target=\"_blank\" rel=\"noopener\">test-thread</a>，下文中的实例分析和代码验证都是在这个demo上跑的，读者可以自行验证。</p>\n<p>系统版本</p>\n<pre><code class=\"sh\">$ uname -a\nLinux linux 5.4.0-45-generic #49~18.04.2-Ubuntu SMP Wed Aug 26 16:29:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</code></pre>\n<p>JAVA版本</p>\n<pre><code class=\"sh\">$ java -version\njava version &quot;1.8.0_241&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_241-b07)\nJava HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</code></pre>\n<h2 id=\"线程池源码简单分析\"><a href=\"#线程池源码简单分析\" class=\"headerlink\" title=\"线程池源码简单分析\"></a>线程池源码简单分析</h2><p>由示例代码中可以看到</p>\n<pre><code class=\"java\">BlockingQueue&lt;Runnable&gt; workQueue = new LinkedBlockingQueue&lt;&gt;(20);\nRejectedExecutionHandler handler = new BlockRejectedExecutionHandler();\nexecutor = new ThreadPoolExecutor(corePoolSize, executorMaximumPoolSize, 1, TimeUnit.SECONDS, workQueue, handler);</code></pre>\n<p>线程池直接使用了 ThreadPoolExecutor ，任务队列使用了 LinkedBlockingQueue 并设置了size，拒绝策略自行实现了 RejectedExecutionHandler 。</p>\n<p>所以重点在于 ThreadPoolExecutor 的内部实现。</p>\n<h3 id=\"源码与简单解释\"><a href=\"#源码与简单解释\" class=\"headerlink\" title=\"源码与简单解释\"></a>源码与简单解释</h3><pre><code class=\"java\">/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters and default thread factory.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:&lt;br&gt;\n     *         {@code corePoolSize &lt; 0}&lt;br&gt;\n     *         {@code keepAliveTime &lt; 0}&lt;br&gt;\n     *         {@code maximumPoolSize &lt;= 0}&lt;br&gt;\n     *         {@code maximumPoolSize &lt; corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code handler} is null\n     */\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue&lt;Runnable&gt; workQueue,\n                              RejectedExecutionHandler handler) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), handler);\n    }</code></pre>\n<ul>\n<li><p>corePoolSize</p>\n<p>线程池中的核心线程数。除非设置了allowCoreThreadTimeOut，否则一直存活。</p>\n</li>\n<li><p>maximumPoolSize</p>\n<p>线程池中的最大线程数。</p>\n</li>\n<li><p>workQueue</p>\n<p>用于保存还没执行到的任务的队列。</p>\n</li>\n<li><p>handler</p>\n<p>线程池的饱和策略，当线程池中的阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，需要进行某种处理，默认是抛出异常，这里是将任务放入workQueue中</p>\n</li>\n</ul>\n<pre><code class=\"java\">//只是对参数做了判空\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue&lt;Runnable&gt; workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize &lt; 0 ||\n            maximumPoolSize &lt;= 0 ||\n            maximumPoolSize &lt; corePoolSize ||\n            keepAliveTime &lt; 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.acc = System.getSecurityManager() == null ?\n                null :\n                AccessController.getContext();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }</code></pre>\n<pre><code class=\"java\">//提交任务时调用    execute ，源码中的注释已经将基本的流程说明清楚了，这里就不翻译了。\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n         * Proceed in 3 steps:\n         *\n         * 1. If fewer than corePoolSize threads are running, try to\n         * start a new thread with the given command as its first\n         * task.  The call to addWorker atomically checks runState and\n         * workerCount, and so prevents false alarms that would add\n         * threads when it shouldn&#39;t, by returning false.\n         *\n         * 2. If a task can be successfully queued, then we still need\n         * to double-check whether we should have added a thread\n         * (because existing ones died since last checking) or that\n         * the pool shut down since entry into this method. So we\n         * recheck state and if necessary roll back the enqueuing if\n         * stopped, or start a new thread if there are none.\n         *\n         * 3. If we cannot queue task, then we try to add a new\n         * thread.  If it fails, we know we are shut down or saturated\n         * and so reject the task.\n         */\n    int c = ctl.get();\n    if (workerCountOf(c) &lt; corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    //isRunning 线程池使用int 的前个二进制3位表示状态，后29位表示数量，具体值看下面说明。\n    //当当前运行的线程数量大于设定的核心线程数量时，会优先将任务放入队列中。\n    //代入实际业务处理，此处会导致任务数小于队列最大值时，线程池中只有核心线程在处理\n    if (isRunning(c) &amp;&amp; workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) &amp;&amp; remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //若队列已经满了，则会尝试将直接添加worker，若当前核心线程数小于设定的最大线程数，则会新增线程。\n    //代入实际业务处理，此处会导致当模块启动时，待处理任务数为70，大于队列最大长度50，若核心线程数是8，最大线程数是30，则会使线程数增加到20处理任务；若核心线程数是8，最大线程数是10，则会增加到10个线程数，且有部分任务会执行reject策略。详细见下面实例分析\n    else if (!addWorker(command, false))\n        reject(command);\n}</code></pre>\n<pre><code class=\"java\">private static final int COUNT_BITS = Integer.SIZE - 3;//29\nprivate static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;//1左移29位后，二进制表示： 10 0000 0000 0000 0000 0000 0000 0000 ，-1 后则为 1 1111 1111 1111 1111 1111 1111 1111\n\n// runState is stored in the high-order bits\nprivate static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;     //11100000000000000000000000000000\nprivate static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS; //0\nprivate static final int STOP       =  1 &lt;&lt; COUNT_BITS;              //100000000000000000000000000000\nprivate static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;          //1000000000000000000000000000000\nprivate static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;  //1100000000000000000000000000000\n\n// Packing and unpacking ctl\nprivate static int runStateOf(int c)     { return c &amp; ~CAPACITY; }\nprivate static int workerCountOf(int c)  { return c &amp; CAPACITY; }\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }</code></pre>\n<pre><code class=\"java\">//根据设定的核心线程数和最大线程数来决定是否要新增线程来处理任务\n/**\n     * Checks if a new worker can be added with respect to current\n     * pool state and the given bound (either core or maximum). If so,\n     * the worker count is adjusted accordingly, and, if possible, a\n     * new worker is created and started, running firstTask as its\n     * first task. This method returns false if the pool is stopped or\n     * eligible to shut down. It also returns false if the thread\n     * factory fails to create a thread when asked.  If the thread\n     * creation fails, either due to the thread factory returning\n     * null, or due to an exception (typically OutOfMemoryError in\n     * Thread.start()), we roll back cleanly.\n     *\n     * @param firstTask the task the new thread should run first (or\n     * null if none). Workers are created with an initial first task\n     * (in method execute()) to bypass queuing when there are fewer\n     * than corePoolSize threads (in which case we always start one),\n     * or when the queue is full (in which case we must bypass queue).\n     * Initially idle threads are usually created via\n     * prestartCoreThread or to replace other dying workers.\n     *\n     * @param core if true use corePoolSize as bound, else\n     * maximumPoolSize. (A boolean indicator is used here rather than a\n     * value to ensure reads of fresh values after checking other pool\n     * state).\n     * @return true if successful\n     */\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs &gt;= SHUTDOWN &amp;&amp;\n            ! (rs == SHUTDOWN &amp;&amp;\n               firstTask == null &amp;&amp;\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc &gt;= CAPACITY ||\n                wc &gt;= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs &lt; SHUTDOWN ||\n                    (rs == SHUTDOWN &amp;&amp; firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s &gt; largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}</code></pre>\n<h3 id=\"实例分析与代码验证\"><a href=\"#实例分析与代码验证\" class=\"headerlink\" title=\"实例分析与代码验证\"></a>实例分析与代码验证</h3><ul>\n<li>核心线程数4，最大线程数10，队列长度20，任务数20</li>\n</ul>\n<pre><code class=\"shell\">$ mvn spring-boot:run\n2020-09-13 13:58:54.531  INFO 19092 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.176 seconds (JVM running for 1.413)\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 13:58:54.533  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 13:58:54.537  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:16\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:15\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:14\n2020-09-13 13:58:54.543  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:13\n2020-09-13 13:58:54.547  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:12\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 9 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:10\n2020-09-13 13:58:54.553  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 8 ActiveCount: 3 PoolSize:4 TaskCount:19 Queue size:10\n2020-09-13 13:58:54.554  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 10 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:9\n2020-09-13 13:58:54.557  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:8\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 13 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:6\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 12 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:7\n2020-09-13 13:58:54.564  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 14 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:5\n2020-09-13 13:58:54.567  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 15 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:4\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-2] com.neo.web.MessageService               : running 17 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:2\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-3] com.neo.web.MessageService               : running 18 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:1\n2020-09-13 13:58:54.574  INFO 19092 --- [pool-1-thread-1] com.neo.web.MessageService               : running 16 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:3\n2020-09-13 13:58:54.578  INFO 19092 --- [pool-1-thread-4] com.neo.web.MessageService               : running 19 ActiveCount: 4 PoolSize:4 TaskCount:20 Queue size:0\n</code></pre>\n<p>任务数量小于队列最大长度时，20个任务由4个线程消费完</p>\n<ul>\n<li>核心线程数4，最大线程数10，队列长度20，任务数30</li>\n</ul>\n<pre><code class=\"shell\">2020-09-13 14:06:55.919  INFO 20216 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.177 seconds (JVM running for 1.412)\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 2 PoolSize:2 TaskCount:2 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:5 Queue size:1\n2020-09-13 14:06:55.921  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 6 PoolSize:6 TaskCount:26 Queue size:20\n2020-09-13 14:06:55.922  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:06:55.924  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 9 PoolSize:9 TaskCount:29 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.925  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:18\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:17\n2020-09-13 14:06:55.931  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:16\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:15\n2020-09-13 14:06:55.932  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 9 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:14\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:13\n2020-09-13 14:06:55.934  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:12\n2020-09-13 14:06:55.935  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:11\n2020-09-13 14:06:55.935  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:10\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:9\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-2] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:8\n2020-09-13 14:06:55.941  INFO 20216 --- [pool-1-thread-3] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:7\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-4] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:6\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-5] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:5\n2020-09-13 14:06:55.942  INFO 20216 --- [pool-1-thread-6] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:4\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-7] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:3\n2020-09-13 14:06:55.944  INFO 20216 --- [pool-1-thread-8] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:2\n2020-09-13 14:06:55.945  INFO 20216 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:1\n2020-09-13 14:06:55.945  INFO 20216 --- [ool-1-thread-10] com.neo.web.MessageService               : running 23 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:0\n</code></pre>\n<p>任务数量大于队列最大长度，任务数量-队列最大长度&lt;最大线程数量时，超过队列最大长度的任务会尝试新增线程（由日志中第6行可以推断出），30个任务由10个线程消费完。</p>\n<p>且如果任务数设置为27，则处理任务线程数为7，这也就解释了实际环境中为什么有时候会有37个线程处理消息，有时候有500个线程处理（最大线程数值模块设置为500）。</p>\n<ul>\n<li>核心线程数4，最大线程数10，队列长度20，任务数50</li>\n</ul>\n<pre><code class=\"shell\">2020-09-13 14:14:11.501  INFO 20899 --- [  restartedMain] com.neo.WebFluxApplication               : Started WebFluxApplication in 1.17 seconds (JVM running for 1.402)\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 0 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 1 ActiveCount: 3 PoolSize:3 TaskCount:3 Queue size:0\n2020-09-13 14:14:11.509  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 26 ActiveCount: 8 PoolSize:8 TaskCount:28 Queue size:20\n2020-09-13 14:14:11.504  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 2 ActiveCount: 4 PoolSize:4 TaskCount:4 Queue size:0\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 3 ActiveCount: 5 PoolSize:5 TaskCount:25 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 24 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.505  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 25 ActiveCount: 7 PoolSize:7 TaskCount:27 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 27 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 29 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.510  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 28 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:20\n2020-09-13 14:14:11.515  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 4 ActiveCount: 10 PoolSize:10 TaskCount:30 Queue size:19\n2020-09-13 14:14:11.519  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 5 ActiveCount: 10 PoolSize:10 TaskCount:31 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 6 ActiveCount: 10 PoolSize:10 TaskCount:32 Queue size:19\n2020-09-13 14:14:11.520  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 7 ActiveCount: 10 PoolSize:10 TaskCount:33 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 9 ActiveCount: 9 PoolSize:10 TaskCount:34 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 8 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:20\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 10 ActiveCount: 10 PoolSize:10 TaskCount:36 Queue size:19\n2020-09-13 14:14:11.522  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 11 ActiveCount: 10 PoolSize:10 TaskCount:37 Queue size:19\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 13 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:20\n2020-09-13 14:14:11.523  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 12 ActiveCount: 10 PoolSize:10 TaskCount:39 Queue size:20\n2020-09-13 14:14:11.525  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 14 ActiveCount: 10 PoolSize:10 TaskCount:40 Queue size:19\n2020-09-13 14:14:11.529  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 15 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:20\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 16 ActiveCount: 10 PoolSize:10 TaskCount:42 Queue size:19\n2020-09-13 14:14:11.530  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 17 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:20\n2020-09-13 14:14:11.532  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 19 ActiveCount: 10 PoolSize:10 TaskCount:45 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 18 ActiveCount: 10 PoolSize:10 TaskCount:44 Queue size:19\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 20 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.532  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 21 ActiveCount: 10 PoolSize:10 TaskCount:46 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 22 ActiveCount: 10 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.533  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 23 ActiveCount: 9 PoolSize:10 TaskCount:48 Queue size:18\n2020-09-13 14:14:11.535  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 30 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:19\n2020-09-13 14:14:11.539  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 31 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:18\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 32 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:17\n2020-09-13 14:14:11.540  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 33 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:16\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 36 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 37 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:12\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 38 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:11\n2020-09-13 14:14:11.544  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 39 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:10\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 35 ActiveCount: 9 PoolSize:10 TaskCount:50 Queue size:13\n2020-09-13 14:14:11.544  INFO 20899 --- [pool-1-thread-9] com.neo.web.MessageService               : running 34 ActiveCount: 8 PoolSize:10 TaskCount:50 Queue size:14\n2020-09-13 14:14:11.545  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 40 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:9\n2020-09-13 14:14:11.550  INFO 20899 --- [pool-1-thread-7] com.neo.web.MessageService               : running 41 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:8\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-2] com.neo.web.MessageService               : running 42 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:7\n2020-09-13 14:14:11.552  INFO 20899 --- [pool-1-thread-3] com.neo.web.MessageService               : running 43 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:6\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-8] com.neo.web.MessageService               : running 45 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.554  INFO 20899 --- [pool-1-thread-5] com.neo.web.MessageService               : running 44 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:4\n2020-09-13 14:14:11.555  INFO 20899 --- [pool-1-thread-4] com.neo.web.MessageService               : running 46 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:3\n2020-09-13 14:14:11.555  INFO 20899 --- [ool-1-thread-10] com.neo.web.MessageService               : running 47 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:2\n2020-09-13 14:14:11.556  INFO 20899 --- [pool-1-thread-1] com.neo.web.MessageService               : running 48 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:1\n2020-09-13 14:14:11.558  INFO 20899 --- [pool-1-thread-6] com.neo.web.MessageService               : running 49 ActiveCount: 10 PoolSize:10 TaskCount:50 Queue size:0\n</code></pre>\n<p>任务数量大于最大线程数加上队列长度，会执行拒绝策略，在此处重写了 rejectedExecution 使用put阻塞将消息插入队列，所以所有任务都会被处理。</p>\n<p>至此，如何产生不同数量线程的原因找到了，但更进一步思考，非核心线程在产生之后 就会一直存在去处理消息吗？有没有什么情况下整个线程池的线程数量会下降为核心线程数量？</p>\n<h2 id=\"添加线程后续\"><a href=\"#添加线程后续\" class=\"headerlink\" title=\"添加线程后续\"></a>添加线程后续</h2><h3 id=\"源码与简单解释-1\"><a href=\"#源码与简单解释-1\" class=\"headerlink\" title=\"源码与简单解释\"></a>源码与简单解释</h3><pre><code class=\"java\">private boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs &gt;= SHUTDOWN &amp;&amp;\n            ! (rs == SHUTDOWN &amp;&amp;\n               firstTask == null &amp;&amp;\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc &gt;= CAPACITY ||\n                wc &gt;= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            //获取锁\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs &lt; SHUTDOWN ||\n                    (rs == SHUTDOWN &amp;&amp; firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    //workers是hashset， getPoolSize 方法获取的就是workers的大小\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s &gt; largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}</code></pre>\n<pre><code class=\"java\">/**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\nWorker(Runnable firstTask) {\n    setState(-1); // inhibit interrupts until runWorker\n    this.firstTask = firstTask;\n    this.thread = getThreadFactory().newThread(this);\n}\n\n/** Delegates main run loop to outer runWorker  */\npublic void run() {\n    runWorker(this);\n}\n\n/**\n     * Main worker run loop.  Repeatedly gets tasks from queue and\n     * executes them, while coping with a number of issues:\n     *\n     * 1. We may start out with an initial task, in which case we\n     * don&#39;t need to get the first one. Otherwise, as long as pool is\n     * running, we get tasks from getTask. If it returns null then the\n     * worker exits due to changed pool state or configuration\n     * parameters.  Other exits result from exception throws in\n     * external code, in which case completedAbruptly holds, which\n     * usually leads processWorkerExit to replace this thread.\n     *\n     * 2. Before running any task, the lock is acquired to prevent\n     * other pool interrupts while the task is executing, and then we\n     * ensure that unless pool is stopping, this thread does not have\n     * its interrupt set.\n     *\n     * 3. Each task run is preceded by a call to beforeExecute, which\n     * might throw an exception, in which case we cause thread to die\n     * (breaking loop with completedAbruptly true) without processing\n     * the task.\n     *\n     * 4. Assuming beforeExecute completes normally, we run the task,\n     * gathering any of its thrown exceptions to send to afterExecute.\n     * We separately handle RuntimeException, Error (both of which the\n     * specs guarantee that we trap) and arbitrary Throwables.\n     * Because we cannot rethrow Throwables within Runnable.run, we\n     * wrap them within Errors on the way out (to the thread&#39;s\n     * UncaughtExceptionHandler).  Any thrown exception also\n     * conservatively causes thread to die.\n     *\n     * 5. After task.run completes, we call afterExecute, which may\n     * also throw an exception, which will also cause thread to\n     * die. According to JLS Sec 14.20, this exception is the one that\n     * will be in effect even if task.run throws.\n     *\n     * The net effect of the exception mechanics is that afterExecute\n     * and the thread&#39;s UncaughtExceptionHandler have as accurate\n     * information as we can provide about any problems encountered by\n     * user code.\n     *\n     * @param w the worker\n     */\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try\n        //当启动了一个worker之后，会一直去获取队列里面的任务。 这也就是当 任务数量大于队列长度时，新增的线程会一直工作下去的原因\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &amp;&amp;\n                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n\n/**\n     * Performs blocking or timed wait for a task, depending on\n     * current configuration settings, or returns null if this worker\n     * must exit because of any of:\n     * 1. There are more than maximumPoolSize workers (due to\n     *    a call to setMaximumPoolSize).\n     * 2. The pool is stopped.\n     * 3. The pool is shutdown and the queue is empty.\n     * 4. This worker timed out waiting for a task, and timed-out\n     *    workers are subject to termination (that is,\n     *    {@code allowCoreThreadTimeOut || workerCount &gt; corePoolSize})\n     *    both before and after the timed wait, and if the queue is\n     *    non-empty, this worker is not the last thread in the pool.\n     *\n     * @return task, or null if the worker must exit, in which case\n     *         workerCount is decremented\n     */\nprivate Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n\n        int wc = workerCountOf(c);\n\n        // Are workers subject to culling?\n        //在本次设置中没有设置allowCoreThreadTimeOut，所以为默认值false。 任务数量大于队列长度时， wc &gt; corePoolSize 成立，不过也就是会让下面获取下个任务多了个超时检查而已。 若60s（在本案例中的设置）队列为空，就会关闭超过核心线程的部分（不过对于当前业务来说，永远不会关闭 :)  ）\n        boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;\n\n        if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))\n            &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n\n        try {\n            //poll和take差别在于poll多了keepAliveTime的检查，最后都是调用dequeue\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n            workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}</code></pre>\n<h3 id=\"实例分析与代码验证-1\"><a href=\"#实例分析与代码验证-1\" class=\"headerlink\" title=\"实例分析与代码验证\"></a>实例分析与代码验证</h3><ul>\n<li>将线程池设置参数 keepAliveTime 设为1s，在所有任务处理完后查看线程池中的线程数量，可以验证。2s 后线程数量等于设置的核心线程数</li>\n</ul>\n<pre><code class=\"shell\">2020-09-14 13:42:01.380  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:42:03.381  INFO 13147 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:4 TaskCount:50 Queue size:0\n</code></pre>\n<ul>\n<li>将  allowCoreThreadTimeOut 设置为 true。2s 后线程池中线程数连核心线程也不在保持</li>\n</ul>\n<pre><code class=\"shell\">2020-09-14 13:47:39.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 500ms ActiveCount: 0 PoolSize:10 TaskCount:50 Queue size:0\n2020-09-14 13:47:41.829  INFO 14381 --- [  restartedMain] com.neo.web.MessageService               : 2s ActiveCount: 0 PoolSize:0 TaskCount:50 Queue size:0\n</code></pre>\n<h2 id=\"结论与参数说明\"><a href=\"#结论与参数说明\" class=\"headerlink\" title=\"结论与参数说明\"></a>结论与参数说明</h2><ul>\n<li><strong>corePoolSize</strong> :核心线程数。根据正常情况下每秒的任务数量，单个任务消耗时间来确定。若正常情况下每秒600个请求，平均每个请求耗时20ms，那么需要设置为12，同时还要考虑线程因为其他任务被占用或因为异常导致线程停滞，还有业务主要是CPU密集还是IO密集，避免增加过多线程引起上下文切换开销大于业务开销。</li>\n<li><strong>maximumPoolSize</strong>: 当任务数量超过队列长度后，允许开启的最大线程数。需要注意的是若不存在空闲时间来让线程消亡，会一直保持当前的线程数量处理消息。即 corePoolSize &lt;= 实际线程数 &lt;= maximumPoolSize</li>\n<li><strong>keepAliveTime</strong>: worker 获取task时，最大等待的时间。 即当线程处理完成当前任务，从任务队列中获取下一个任务时，最大允许队列为空的时间。</li>\n<li><strong>workQueue</strong>: 任务队列。这里需要关注的是队列的长度。需要考虑自身业务是否允许消息延时处理？最大允许多久的延时？若可接受5s的延时，平均每个请求处理时间为20ms，核心线程数为4，则5s内允许积压1000条请求。若队列长度设置为1000 ，当请求数量积压超过1000时， 会增加不超过最大线程数的线程处理，若 maximumPoolSize 为20，假设此时处理请求线程数为最大20，则允许积压5000条消息。所以需要根据业务突增来确定</li>\n<li><strong>allowCoreThreadTimeOut</strong> : 允许核心线程超时。请求量不大可以考虑设置为true，一直有消息处理的情况下设置true也没啥用。</li>\n</ul>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"},{"title":"【Python3】单脚本运行时限制内存","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T11:42:13.000Z","password":null,"summary":"使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存","_content":"\n## 前言\n\n使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存。\n\n比如日志文件是每小时进行一次归档，单个日志文件1GB，需要获取一天内的日志统计信息，那将会有24GB日志信息，如果在8GB内存机器上分析，同时还有其他任务在运行，最好能直接限制单个脚本的内存占用。\n\n\n\n\n\n## 释放、限制内存\n\n释放内存： 读取分析完单个文件后，在读取分析下个文件前及时del\n\n```python\nfor filename in files:\n        with open(filename, \"r\") as f:\n            lines = f.readlines()\n        tmpdata = dealwithdata(lines)\n        del lines\n```\n\n\n\n单个脚本限制内存：避免脚本将剩余内存全部使用完\n\n```python\ndef limit_memory(maxsize):\n    _, hard = resource.getrlimit(resource.RLIMIT_AS)\n    resource.setrlimit(resource.RLIMIT_AS, (maxsize, hard))\n# 单位字节\nlimit_memory(2*1024*1024*1024)\n```\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【Python3】单脚本运行时限制内存.md","raw":"---\ntitle: 【Python3】单脚本运行时限制内存\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 19:42:13\npassword:\nsummary: 使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存\ntags:\n- Python\n- 内存\ncategories:\n- 小技巧\n---\n\n## 前言\n\n使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存。\n\n比如日志文件是每小时进行一次归档，单个日志文件1GB，需要获取一天内的日志统计信息，那将会有24GB日志信息，如果在8GB内存机器上分析，同时还有其他任务在运行，最好能直接限制单个脚本的内存占用。\n\n\n\n\n\n## 释放、限制内存\n\n释放内存： 读取分析完单个文件后，在读取分析下个文件前及时del\n\n```python\nfor filename in files:\n        with open(filename, \"r\") as f:\n            lines = f.readlines()\n        tmpdata = dealwithdata(lines)\n        del lines\n```\n\n\n\n单个脚本限制内存：避免脚本将剩余内存全部使用完\n\n```python\ndef limit_memory(maxsize):\n    _, hard = resource.getrlimit(resource.RLIMIT_AS)\n    resource.setrlimit(resource.RLIMIT_AS, (maxsize, hard))\n# 单位字节\nlimit_memory(2*1024*1024*1024)\n```\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【Python3】单脚本运行时限制内存","published":1,"updated":"2020-11-23T15:11:35.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhuq03m90007y8gppq01h682","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存。</p>\n<p>比如日志文件是每小时进行一次归档，单个日志文件1GB，需要获取一天内的日志统计信息，那将会有24GB日志信息，如果在8GB内存机器上分析，同时还有其他任务在运行，最好能直接限制单个脚本的内存占用。</p>\n<h2 id=\"释放、限制内存\"><a href=\"#释放、限制内存\" class=\"headerlink\" title=\"释放、限制内存\"></a>释放、限制内存</h2><p>释放内存： 读取分析完单个文件后，在读取分析下个文件前及时del</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        tmpdata <span class=\"token operator\">=</span> dealwithdata<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> lines<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>单个脚本限制内存：避免脚本将剩余内存全部使用完</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">limit_memory</span><span class=\"token punctuation\">(</span>maxsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _<span class=\"token punctuation\">,</span> hard <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span>getrlimit<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>RLIMIT_AS<span class=\"token punctuation\">)</span>\n    resource<span class=\"token punctuation\">.</span>setrlimit<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>RLIMIT_AS<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>maxsize<span class=\"token punctuation\">,</span> hard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 单位字节</span>\nlimit_memory<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Python脚本自动拉取日志并提取有用字段数据时，会因为需要统计数据的日志文件过多，导致运行时候脚本占用过多内存。</p>\n<p>比如日志文件是每小时进行一次归档，单个日志文件1GB，需要获取一天内的日志统计信息，那将会有24GB日志信息，如果在8GB内存机器上分析，同时还有其他任务在运行，最好能直接限制单个脚本的内存占用。</p>\n<h2 id=\"释放、限制内存\"><a href=\"#释放、限制内存\" class=\"headerlink\" title=\"释放、限制内存\"></a>释放、限制内存</h2><p>释放内存： 读取分析完单个文件后，在读取分析下个文件前及时del</p>\n<pre><code class=\"python\">for filename in files:\n        with open(filename, &quot;r&quot;) as f:\n            lines = f.readlines()\n        tmpdata = dealwithdata(lines)\n        del lines</code></pre>\n<p>单个脚本限制内存：避免脚本将剩余内存全部使用完</p>\n<pre><code class=\"python\">def limit_memory(maxsize):\n    _, hard = resource.getrlimit(resource.RLIMIT_AS)\n    resource.setrlimit(resource.RLIMIT_AS, (maxsize, hard))\n# 单位字节\nlimit_memory(2*1024*1024*1024)</code></pre>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"},{"title":"【Unraid】NAS 小主机配置分享","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-10-07T16:18:38.000Z","password":null,"summary":"分享下个人用的 unraid 小主机以及一些配置","_content":"\n\n\n## 硬件配置\n\n|        | 名称                         | 价格    | 说明                                                         |\n| ------ | ---------------------------- | ------- | ------------------------------------------------------------ |\n| 主板   | 铭瑄的H81 itx                | 150     | 建议买之前确认下网卡是百兆的还是千兆，要是不在意那就无所谓   |\n| 内存   | 三星 ddr3 8gx2               | 240     | 上16g的内存是因为用得上，unraid 系统运行时内存占用很少       |\n| CPU    | i3-4160T/E3-1265L v3         | 195/520 | 计划是7*24 运行，所以CPU只考虑低功耗的了。整机加上两个机械硬盘，一个固态硬盘功耗正常运行时大概在20W |\n| 机箱   | 万由代工的暴风酷播云二代机箱 | 175     | 血亏的机箱，矿灾后的产物。双盘位                             |\n| 散热器 | 大镰刀S950M                  | 44      | 高31mm。                                                     |\n| 网卡   | AX88179 USB3.0 千兆网卡      | 40      | 主板上的网卡是百兆的，拓展一个千兆网卡， 局域网下千兆还是舒服点。使用usb的网卡主要是因为机箱大小不支持pcie类型的，这块网卡确认unraid 免驱 |\n| U盘    | 随便                         |         | 最好用品牌的U盘，其他便宜U盘有可能会在做系统的时候出问题。如果正常做了启动盘后，系统起不来，那最好换个U盘试下 |\n\n以上的价格都是2020年1月左右的，部分全新，部分二手\n\n\n\n## 重启不丢配置及项目文件说明\n\n### 重启不丢配置\n\nunraid 系统默认会在重启时，恢复默认设置。如果安装了oh-my-zsh ，重启后会发现什么都没了，这时候可以参考插件的做法，将修改后的配置文件拷贝到 /boot 目录下，然后在启动脚本中恢复下个人配置。 unraid 系统的启动脚本 `/boot/config/go` 。\n\n\n\n重启不丢配置可以参考个人当前unraid恢复配置项目 [custom.scripts](https://github.com/yibiner/custom.script) \n\n直接将项目clone到 `/boot/config`下，在 `/boot/config/go` 文件中最后添加 \n\n```shell\ncp -r /boot/config/custom.scripts /tmp\nbash /tmp/custom.scripts/startall.sh\n```\n\n\n\n### 项目文件说明\n\n- config.sh 配置文件。\n- commfunc.sh 公共函数文件。一些日志输出函数。\n\n- startall.sh 运行所有设置配置脚本的入口。会运行所有 set 开头的脚本文件，会 nohup 运行 loop 开头的脚本文件，这样后续添加设置文件更加清晰。\n- updateconfig.sh 将一些配置保存到U盘中\n- setddns.sh 定时检查外网ip\n- setohmyzsh.sh 恢复oh-my-zsh\n- setssh.sh 恢复ssh 的配置，禁用密码登录、重启sshd 等\n- setplugins.sh autofan设置风扇根据CPU温度调节\n- setroute.sh 设置路由\n\n\n\n## Oh My Zsh 安装\n\n- 先安装了zsh\n  - 在 APPS 中搜索并安装 Nerd Pack\n  - 在 SETTINGS -> Nerd Pack 中安装 zsh\n- 安装oh-my-zsh\n\n```shell\n# curl 安装\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n# wget 安装\nsh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n- `bash /tmp/updateconfig.sh` 执行下脚本，将当前的设置和文件保存到 `/boot` 下，方便重启后恢复\n\n```shell\n# 项目 custom.scripts(https://github.com/yibiner/custom.script)  中 恢复oh-my-zsh\n$ cat setohmyzsh.sh \n#!/bin/bash\n\n# 将 oh-my-zsh 解压到目录\nif [ ! -d /root/.oh-my-zsh  ] ; then\n    tar -zxvf oh-my-zsh.tar.gz -C /root\nfi\n\n# 将配置文件拷贝回目录\ncp $BASE_PATH/.bash* /root\ncp $BASE_PATH/.zsh* /root\n```\n\n\n\n## SSH 密钥登录并关闭密码登录\n\n- 命令行下执行 `ssh-keygen -t rsa -C \"your_email@example.com\"` 生成密钥对\n- 将`~/.ssh/id_rsa.pub` 公钥添加到unraid 的 `~/.ssh/authorized_keys` 中。如果没有 .ssh 目录和 authorized_keys 文件，自己新建即可，authorized_keys 文件权限为 644。\n\n- 关闭密码登录。 `/etc/ssh/sshd_config` 将 `PasswordAuthentication yes` 改成 `PasswordAuthentication no`。重启下sshd即可生效\n- `bash /tmp/updateconfig.sh` 执行下脚本，将当前的设置和文件保存到 `/boot` 下，方便重启后恢复\n\n```shell\n# 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 恢复ssh，将配置文件覆盖原有的配置后，重启服务\n$ cat setssh.sh \n#!/usr/bin/bash\n\n# 从boot中恢复ssh文件\n\nssh_start()                                                                                        \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ -f /var/run/sshd.pid ]; then                                                                \n    #echo \"SSH already running\"                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n                                                                                                   \n  echo \"Starting SSH...\"                                                                           \n  sleep 1                                                                                          \n                                                                                                   \n  /usr/sbin/sshd                                                                                   \n                                                                                                   \n  echo \"... OK\"                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n                                                                                                   \nssh_stop()                                                                                         \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ ! -f /var/run/sshd.pid ]; then                                                              \n    #echo \"SSH already stopped\"                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n                                                                                                   \n  echo \"Stopping SSH...\"                                                                           \n  sleep 1                                                                                          \n                                                                                                   \n  killall sshd                                                                                     \n                                                                                                   \n  echo \"... OK\"                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n                                                                                                   \nssh_restart() {                                                                                    \n  if [ -r /var/run/sshd.pid ]; then                                                                \n    echo \"Restarting parent listener process only. To kill every sshd process, you must use stop\"  \n    sleep 3                                                                                        \n    kill `cat /var/run/sshd.pid`                                                                   \n  else                                                                                             \n    echo \"Warning: there does not appear to be a parent instance of sshd running.\"                 \n    sleep 3                                                                                        \n    exit 1                                                                                         \n  fi                                                                                               \n  sleep 1                                                                                          \n  ssh_start                                                                                        \n}\n\n\nif [ -d \"/root/.ssh\" ]; then\n  cp $BASE_PATH/.ssh/* /root/.ssh/\nfi\n\nif [ ! -d \"/root/.ssh\" ]; then\n  cp -r $BASE_PATH/.ssh /root\nfi\nchmod 644 /root/.ssh/id_rsa.pub\nchmod 644 /root/.ssh/authorized_keys\n\ncp $BASE_PATH/sshd_config /etc/ssh/sshd_config\nssh_restart\n\n```\n\n\n\n## CPU 风扇根据CPU温度动态调节转速\n\n- unraid 管理页面 APPS 下搜索 autofan 安装 Dynamix System **Autofan**\n- 然后在 SETTINGS -> Fan Auto Control 里 Enabled 该功能，需要注意下 PWM controller 和 PWM fan 是否选到了对应的设备。\n- Minimum PWM value 设置最小转速PWM，最大值是255\n- Low temperature threshold 温度下限阈值， High temperature threshold  温度上限阈值\n- 修改 `/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan` ，根据CPU温度添加转速， 默认是根据硬盘温度\n\n```shell\n# 完整见项目 custom.scripts (https://github.com/yibiner/custom.script) 中的 autofan \nfunction_get_current_cpu_temp() {\n    HIGHEST_TEMP=0\n    HIGHEST_TEMP=`sensors | grep \"CPU Temp\" | awk '{print $3}' | tr -cd \"[0-9.]\" | sed \"s/\\..*//g\"`\n}\n```\n\n \n\n```shell\n# 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 设置autofan\n$ cat setplugins.sh \n#!/usr/bin/bash\n\n# autofan 修改为根据 CPU 温度调节转速\nfilename=/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan\nif [ -e $filename ] ; then\n    # sed -i 'N;196afunction_get_current_cpu_temp() {\\nHIGHEST_TEMP=0\\nHIGHEST_TEMP=`sensors | grep \"CPU Temp\" | awk \"{print $3}\" | tr -cd \"[0-9.]\" | sed \"s/\\..*//g\"`\\n}' $filename\n    # sed -i 'N;292afunction_get_current_cpu_temp' $filename\n    # sed -i '292 d' $filename\n    cp $BASE_PATH/autofan $filename\n    /usr/local/emhttp/plugins/dynamix.system.autofan/scripts/rc.autofan restart\nfi\n```\n\n\n\n## 双网卡同一局域网设置\n\n```shell\n$ cat setroute.sh\n#!/usr/bin/bash\n\n# 设置百兆、千兆网卡走不同路由，互不影响\nhadlan=`grep \"lan\" /etc/iproute2/rt_tables`\n# 新建一个编号为200 ，名字为lan的路由表\nif [ -z \"$hadlan\" ] ; then\n    echo \"200 lan\" >> /etc/iproute2/rt_tables\nfi\n\n# 删除default路由表中千兆网的配置\nhad1G=`ip route list | grep \"192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5\"`\nif [ -n \"$had1G\" ] ; then\n    ip route del 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215\nfi\n\n# 往 lan 路由表 中新增路由\nhad1G=`ip route list table lan | grep \"192.168.1.5\"`\nif [ -z \"$had1G\" ] ; then\n    ip route add 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215 table lan\nfi\n\n# 设置千兆网卡流量只看 lan 路由表\nhad1G=`ip rule | grep \"from 192.168.1.5 lookup lan\"`\nif [ -z \"$had1G\" ] ; then\n    ip rule add from 192.168.1.5 table lan\nfi\n```\n\n多网卡连接同一局域网时， 不做设置下是只会走一个物理链路的，默认路由就是这样。这里将两个IP的路由区别开来，这样就能实现访问不同IP走的是不同的物理链路，具体细节请搜索 linux 高级路由设置。\n\n\n\n## DNSPod 实现 ddns\n\n- https://console.dnspod.cn/dns/list 注册个域名\n- https://console.dnspod.cn/account/token 账号中心 -> 密钥管理，创建个密钥\n- [custom.scripts](https://github.com/yibiner/custom.script)  项目中 dns.conf 文件中填入创建的密钥对\n\n\n\n### ddns脚本修改\n\n脚本参考  https://github.com/imki911/ArDNSPod，做了以下修改，见  [ddnspod.sh](https://github.com/yibiner/custom.script/blob/master/ddnspod.sh)：\n\n- 获取本机的外网IP时，循环遍历几个能通过curl直接获取外网IP的网址，避免因为某个网址打不开而失败（是的，我经历过\n- 将上次的外网IP记录在本地文件，而不是每次都去网页获取上次的IP记录\n\n\n\n### 使用 cron 设置定时，每10分钟检查一次\n\n```shell\n# 项目 custom.scripts (https://github.com/yibiner/custom.script) 中设置ddns，参考了dynamix.schedules  的思路\n$ cat setddns.sh \n#!/bin/bash\n\ncrontab -l > /tmp/cron.tmp\necho \"*/10 * * * * bash /tmp/custom.scripts/onetimeddns.sh\" >> /tmp/cron.tmp\ncrontab /tmp/cron.tmp\n```\n\n\n\n若是频率能接受每小时检查一次， 可以参考下文。将脚本放到 `/etc/cron.hourly/` 目录下即可，需要安装 `dynamix.schedules`插件\n\n```shell\n# cp /tmp/custom.scripts/runddns.sh /etc/cron.hourly/\n# chmod +x /etc/cron.hourly/runddns.sh\n```\n\n\n\n## 山克UPS不间断电源配置\n\n一个合格的NAS主机，注定了是要7*24小时不间断工作的，可是呢，谁也保不准家里什么时候会断电（组完机器的一个月内我就遇到了两次无预警断电）。所以呢，一个UPS就很重要了，可以让NAS在断电后能主动关机。\n\n入了最便宜的山克UPS 600VA的那款。\n\n顺带一提，UPS本身的功耗就10多W了。\n\nunraid 的 SETTINGS 中有UPS Setting ，直接支持一系列的UPS。不过山克这款尝试过后并不能直接支持，不确定是不是我设置有问题。\n\n所以当前使用了个折中方案，通过ping 家里路由器判断是否断电。详细见 [loopping4ups.sh](https://github.com/yibiner/custom.script/loopping4ups.sh)\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【Unraid】NAS-小主机配置分享.md","raw":"---\ntitle: 【Unraid】NAS 小主机配置分享\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-10-8 00:18:38\npassword:\nsummary: 分享下个人用的 unraid 小主机以及一些配置\ntags:\n- Unraid\n- NAS\ncategories:\n- 折腾\n---\n\n\n\n## 硬件配置\n\n|        | 名称                         | 价格    | 说明                                                         |\n| ------ | ---------------------------- | ------- | ------------------------------------------------------------ |\n| 主板   | 铭瑄的H81 itx                | 150     | 建议买之前确认下网卡是百兆的还是千兆，要是不在意那就无所谓   |\n| 内存   | 三星 ddr3 8gx2               | 240     | 上16g的内存是因为用得上，unraid 系统运行时内存占用很少       |\n| CPU    | i3-4160T/E3-1265L v3         | 195/520 | 计划是7*24 运行，所以CPU只考虑低功耗的了。整机加上两个机械硬盘，一个固态硬盘功耗正常运行时大概在20W |\n| 机箱   | 万由代工的暴风酷播云二代机箱 | 175     | 血亏的机箱，矿灾后的产物。双盘位                             |\n| 散热器 | 大镰刀S950M                  | 44      | 高31mm。                                                     |\n| 网卡   | AX88179 USB3.0 千兆网卡      | 40      | 主板上的网卡是百兆的，拓展一个千兆网卡， 局域网下千兆还是舒服点。使用usb的网卡主要是因为机箱大小不支持pcie类型的，这块网卡确认unraid 免驱 |\n| U盘    | 随便                         |         | 最好用品牌的U盘，其他便宜U盘有可能会在做系统的时候出问题。如果正常做了启动盘后，系统起不来，那最好换个U盘试下 |\n\n以上的价格都是2020年1月左右的，部分全新，部分二手\n\n\n\n## 重启不丢配置及项目文件说明\n\n### 重启不丢配置\n\nunraid 系统默认会在重启时，恢复默认设置。如果安装了oh-my-zsh ，重启后会发现什么都没了，这时候可以参考插件的做法，将修改后的配置文件拷贝到 /boot 目录下，然后在启动脚本中恢复下个人配置。 unraid 系统的启动脚本 `/boot/config/go` 。\n\n\n\n重启不丢配置可以参考个人当前unraid恢复配置项目 [custom.scripts](https://github.com/yibiner/custom.script) \n\n直接将项目clone到 `/boot/config`下，在 `/boot/config/go` 文件中最后添加 \n\n```shell\ncp -r /boot/config/custom.scripts /tmp\nbash /tmp/custom.scripts/startall.sh\n```\n\n\n\n### 项目文件说明\n\n- config.sh 配置文件。\n- commfunc.sh 公共函数文件。一些日志输出函数。\n\n- startall.sh 运行所有设置配置脚本的入口。会运行所有 set 开头的脚本文件，会 nohup 运行 loop 开头的脚本文件，这样后续添加设置文件更加清晰。\n- updateconfig.sh 将一些配置保存到U盘中\n- setddns.sh 定时检查外网ip\n- setohmyzsh.sh 恢复oh-my-zsh\n- setssh.sh 恢复ssh 的配置，禁用密码登录、重启sshd 等\n- setplugins.sh autofan设置风扇根据CPU温度调节\n- setroute.sh 设置路由\n\n\n\n## Oh My Zsh 安装\n\n- 先安装了zsh\n  - 在 APPS 中搜索并安装 Nerd Pack\n  - 在 SETTINGS -> Nerd Pack 中安装 zsh\n- 安装oh-my-zsh\n\n```shell\n# curl 安装\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n# wget 安装\nsh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n- `bash /tmp/updateconfig.sh` 执行下脚本，将当前的设置和文件保存到 `/boot` 下，方便重启后恢复\n\n```shell\n# 项目 custom.scripts(https://github.com/yibiner/custom.script)  中 恢复oh-my-zsh\n$ cat setohmyzsh.sh \n#!/bin/bash\n\n# 将 oh-my-zsh 解压到目录\nif [ ! -d /root/.oh-my-zsh  ] ; then\n    tar -zxvf oh-my-zsh.tar.gz -C /root\nfi\n\n# 将配置文件拷贝回目录\ncp $BASE_PATH/.bash* /root\ncp $BASE_PATH/.zsh* /root\n```\n\n\n\n## SSH 密钥登录并关闭密码登录\n\n- 命令行下执行 `ssh-keygen -t rsa -C \"your_email@example.com\"` 生成密钥对\n- 将`~/.ssh/id_rsa.pub` 公钥添加到unraid 的 `~/.ssh/authorized_keys` 中。如果没有 .ssh 目录和 authorized_keys 文件，自己新建即可，authorized_keys 文件权限为 644。\n\n- 关闭密码登录。 `/etc/ssh/sshd_config` 将 `PasswordAuthentication yes` 改成 `PasswordAuthentication no`。重启下sshd即可生效\n- `bash /tmp/updateconfig.sh` 执行下脚本，将当前的设置和文件保存到 `/boot` 下，方便重启后恢复\n\n```shell\n# 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 恢复ssh，将配置文件覆盖原有的配置后，重启服务\n$ cat setssh.sh \n#!/usr/bin/bash\n\n# 从boot中恢复ssh文件\n\nssh_start()                                                                                        \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ -f /var/run/sshd.pid ]; then                                                                \n    #echo \"SSH already running\"                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n                                                                                                   \n  echo \"Starting SSH...\"                                                                           \n  sleep 1                                                                                          \n                                                                                                   \n  /usr/sbin/sshd                                                                                   \n                                                                                                   \n  echo \"... OK\"                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n                                                                                                   \nssh_stop()                                                                                         \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ ! -f /var/run/sshd.pid ]; then                                                              \n    #echo \"SSH already stopped\"                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n                                                                                                   \n  echo \"Stopping SSH...\"                                                                           \n  sleep 1                                                                                          \n                                                                                                   \n  killall sshd                                                                                     \n                                                                                                   \n  echo \"... OK\"                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n                                                                                                   \nssh_restart() {                                                                                    \n  if [ -r /var/run/sshd.pid ]; then                                                                \n    echo \"Restarting parent listener process only. To kill every sshd process, you must use stop\"  \n    sleep 3                                                                                        \n    kill `cat /var/run/sshd.pid`                                                                   \n  else                                                                                             \n    echo \"Warning: there does not appear to be a parent instance of sshd running.\"                 \n    sleep 3                                                                                        \n    exit 1                                                                                         \n  fi                                                                                               \n  sleep 1                                                                                          \n  ssh_start                                                                                        \n}\n\n\nif [ -d \"/root/.ssh\" ]; then\n  cp $BASE_PATH/.ssh/* /root/.ssh/\nfi\n\nif [ ! -d \"/root/.ssh\" ]; then\n  cp -r $BASE_PATH/.ssh /root\nfi\nchmod 644 /root/.ssh/id_rsa.pub\nchmod 644 /root/.ssh/authorized_keys\n\ncp $BASE_PATH/sshd_config /etc/ssh/sshd_config\nssh_restart\n\n```\n\n\n\n## CPU 风扇根据CPU温度动态调节转速\n\n- unraid 管理页面 APPS 下搜索 autofan 安装 Dynamix System **Autofan**\n- 然后在 SETTINGS -> Fan Auto Control 里 Enabled 该功能，需要注意下 PWM controller 和 PWM fan 是否选到了对应的设备。\n- Minimum PWM value 设置最小转速PWM，最大值是255\n- Low temperature threshold 温度下限阈值， High temperature threshold  温度上限阈值\n- 修改 `/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan` ，根据CPU温度添加转速， 默认是根据硬盘温度\n\n```shell\n# 完整见项目 custom.scripts (https://github.com/yibiner/custom.script) 中的 autofan \nfunction_get_current_cpu_temp() {\n    HIGHEST_TEMP=0\n    HIGHEST_TEMP=`sensors | grep \"CPU Temp\" | awk '{print $3}' | tr -cd \"[0-9.]\" | sed \"s/\\..*//g\"`\n}\n```\n\n \n\n```shell\n# 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 设置autofan\n$ cat setplugins.sh \n#!/usr/bin/bash\n\n# autofan 修改为根据 CPU 温度调节转速\nfilename=/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan\nif [ -e $filename ] ; then\n    # sed -i 'N;196afunction_get_current_cpu_temp() {\\nHIGHEST_TEMP=0\\nHIGHEST_TEMP=`sensors | grep \"CPU Temp\" | awk \"{print $3}\" | tr -cd \"[0-9.]\" | sed \"s/\\..*//g\"`\\n}' $filename\n    # sed -i 'N;292afunction_get_current_cpu_temp' $filename\n    # sed -i '292 d' $filename\n    cp $BASE_PATH/autofan $filename\n    /usr/local/emhttp/plugins/dynamix.system.autofan/scripts/rc.autofan restart\nfi\n```\n\n\n\n## 双网卡同一局域网设置\n\n```shell\n$ cat setroute.sh\n#!/usr/bin/bash\n\n# 设置百兆、千兆网卡走不同路由，互不影响\nhadlan=`grep \"lan\" /etc/iproute2/rt_tables`\n# 新建一个编号为200 ，名字为lan的路由表\nif [ -z \"$hadlan\" ] ; then\n    echo \"200 lan\" >> /etc/iproute2/rt_tables\nfi\n\n# 删除default路由表中千兆网的配置\nhad1G=`ip route list | grep \"192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5\"`\nif [ -n \"$had1G\" ] ; then\n    ip route del 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215\nfi\n\n# 往 lan 路由表 中新增路由\nhad1G=`ip route list table lan | grep \"192.168.1.5\"`\nif [ -z \"$had1G\" ] ; then\n    ip route add 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215 table lan\nfi\n\n# 设置千兆网卡流量只看 lan 路由表\nhad1G=`ip rule | grep \"from 192.168.1.5 lookup lan\"`\nif [ -z \"$had1G\" ] ; then\n    ip rule add from 192.168.1.5 table lan\nfi\n```\n\n多网卡连接同一局域网时， 不做设置下是只会走一个物理链路的，默认路由就是这样。这里将两个IP的路由区别开来，这样就能实现访问不同IP走的是不同的物理链路，具体细节请搜索 linux 高级路由设置。\n\n\n\n## DNSPod 实现 ddns\n\n- https://console.dnspod.cn/dns/list 注册个域名\n- https://console.dnspod.cn/account/token 账号中心 -> 密钥管理，创建个密钥\n- [custom.scripts](https://github.com/yibiner/custom.script)  项目中 dns.conf 文件中填入创建的密钥对\n\n\n\n### ddns脚本修改\n\n脚本参考  https://github.com/imki911/ArDNSPod，做了以下修改，见  [ddnspod.sh](https://github.com/yibiner/custom.script/blob/master/ddnspod.sh)：\n\n- 获取本机的外网IP时，循环遍历几个能通过curl直接获取外网IP的网址，避免因为某个网址打不开而失败（是的，我经历过\n- 将上次的外网IP记录在本地文件，而不是每次都去网页获取上次的IP记录\n\n\n\n### 使用 cron 设置定时，每10分钟检查一次\n\n```shell\n# 项目 custom.scripts (https://github.com/yibiner/custom.script) 中设置ddns，参考了dynamix.schedules  的思路\n$ cat setddns.sh \n#!/bin/bash\n\ncrontab -l > /tmp/cron.tmp\necho \"*/10 * * * * bash /tmp/custom.scripts/onetimeddns.sh\" >> /tmp/cron.tmp\ncrontab /tmp/cron.tmp\n```\n\n\n\n若是频率能接受每小时检查一次， 可以参考下文。将脚本放到 `/etc/cron.hourly/` 目录下即可，需要安装 `dynamix.schedules`插件\n\n```shell\n# cp /tmp/custom.scripts/runddns.sh /etc/cron.hourly/\n# chmod +x /etc/cron.hourly/runddns.sh\n```\n\n\n\n## 山克UPS不间断电源配置\n\n一个合格的NAS主机，注定了是要7*24小时不间断工作的，可是呢，谁也保不准家里什么时候会断电（组完机器的一个月内我就遇到了两次无预警断电）。所以呢，一个UPS就很重要了，可以让NAS在断电后能主动关机。\n\n入了最便宜的山克UPS 600VA的那款。\n\n顺带一提，UPS本身的功耗就10多W了。\n\nunraid 的 SETTINGS 中有UPS Setting ，直接支持一系列的UPS。不过山克这款尝试过后并不能直接支持，不确定是不是我设置有问题。\n\n所以当前使用了个折中方案，通过ping 家里路由器判断是否断电。详细见 [loopping4ups.sh](https://github.com/yibiner/custom.script/loopping4ups.sh)\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【Unraid】NAS-小主机配置分享","published":1,"updated":"2020-11-23T14:40:59.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhuq03mc0009y8gpri5efxg9","content":"<h2 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>名称</th>\n<th>价格</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主板</td>\n<td>铭瑄的H81 itx</td>\n<td>150</td>\n<td>建议买之前确认下网卡是百兆的还是千兆，要是不在意那就无所谓</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>三星 ddr3 8gx2</td>\n<td>240</td>\n<td>上16g的内存是因为用得上，unraid 系统运行时内存占用很少</td>\n</tr>\n<tr>\n<td>CPU</td>\n<td>i3-4160T/E3-1265L v3</td>\n<td>195/520</td>\n<td>计划是7*24 运行，所以CPU只考虑低功耗的了。整机加上两个机械硬盘，一个固态硬盘功耗正常运行时大概在20W</td>\n</tr>\n<tr>\n<td>机箱</td>\n<td>万由代工的暴风酷播云二代机箱</td>\n<td>175</td>\n<td>血亏的机箱，矿灾后的产物。双盘位</td>\n</tr>\n<tr>\n<td>散热器</td>\n<td>大镰刀S950M</td>\n<td>44</td>\n<td>高31mm。</td>\n</tr>\n<tr>\n<td>网卡</td>\n<td>AX88179 USB3.0 千兆网卡</td>\n<td>40</td>\n<td>主板上的网卡是百兆的，拓展一个千兆网卡， 局域网下千兆还是舒服点。使用usb的网卡主要是因为机箱大小不支持pcie类型的，这块网卡确认unraid 免驱</td>\n</tr>\n<tr>\n<td>U盘</td>\n<td>随便</td>\n<td></td>\n<td>最好用品牌的U盘，其他便宜U盘有可能会在做系统的时候出问题。如果正常做了启动盘后，系统起不来，那最好换个U盘试下</td>\n</tr>\n</tbody></table>\n<p>以上的价格都是2020年1月左右的，部分全新，部分二手</p>\n<h2 id=\"重启不丢配置及项目文件说明\"><a href=\"#重启不丢配置及项目文件说明\" class=\"headerlink\" title=\"重启不丢配置及项目文件说明\"></a>重启不丢配置及项目文件说明</h2><h3 id=\"重启不丢配置\"><a href=\"#重启不丢配置\" class=\"headerlink\" title=\"重启不丢配置\"></a>重启不丢配置</h3><p>unraid 系统默认会在重启时，恢复默认设置。如果安装了oh-my-zsh ，重启后会发现什么都没了，这时候可以参考插件的做法，将修改后的配置文件拷贝到 /boot 目录下，然后在启动脚本中恢复下个人配置。 unraid 系统的启动脚本 <code>/boot/config/go</code> 。</p>\n<p>重启不丢配置可以参考个人当前unraid恢复配置项目 <a href=\"https://github.com/yibiner/custom.script\" target=\"_blank\" rel=\"noopener\">custom.scripts</a> </p>\n<p>直接将项目clone到 <code>/boot/config</code>下，在 <code>/boot/config/go</code> 文件中最后添加 </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp -r /boot/config/custom.scripts /tmp\nbash /tmp/custom.scripts/startall.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"项目文件说明\"><a href=\"#项目文件说明\" class=\"headerlink\" title=\"项目文件说明\"></a>项目文件说明</h3><ul>\n<li><p>config.sh 配置文件。</p>\n</li>\n<li><p>commfunc.sh 公共函数文件。一些日志输出函数。</p>\n</li>\n<li><p>startall.sh 运行所有设置配置脚本的入口。会运行所有 set 开头的脚本文件，会 nohup 运行 loop 开头的脚本文件，这样后续添加设置文件更加清晰。</p>\n</li>\n<li><p>updateconfig.sh 将一些配置保存到U盘中</p>\n</li>\n<li><p>setddns.sh 定时检查外网ip</p>\n</li>\n<li><p>setohmyzsh.sh 恢复oh-my-zsh</p>\n</li>\n<li><p>setssh.sh 恢复ssh 的配置，禁用密码登录、重启sshd 等</p>\n</li>\n<li><p>setplugins.sh autofan设置风扇根据CPU温度调节</p>\n</li>\n<li><p>setroute.sh 设置路由</p>\n</li>\n</ul>\n<h2 id=\"Oh-My-Zsh-安装\"><a href=\"#Oh-My-Zsh-安装\" class=\"headerlink\" title=\"Oh My Zsh 安装\"></a>Oh My Zsh 安装</h2><ul>\n<li>先安装了zsh<ul>\n<li>在 APPS 中搜索并安装 Nerd Pack</li>\n<li>在 SETTINGS -&gt; Nerd Pack 中安装 zsh</li>\n</ul>\n</li>\n<li>安装oh-my-zsh</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># curl 安装\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n# wget 安装\nsh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>bash /tmp/updateconfig.sh</code> 执行下脚本，将当前的设置和文件保存到 <code>/boot</code> 下，方便重启后恢复</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 项目 custom.scripts(https://github.com/yibiner/custom.script)  中 恢复oh-my-zsh\n$ cat setohmyzsh.sh \n#!/bin/bash\n\n# 将 oh-my-zsh 解压到目录\nif [ ! -d /root/.oh-my-zsh  ] ; then\n    tar -zxvf oh-my-zsh.tar.gz -C /root\nfi\n\n# 将配置文件拷贝回目录\ncp $BASE_PATH/.bash* /root\ncp $BASE_PATH/.zsh* /root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"SSH-密钥登录并关闭密码登录\"><a href=\"#SSH-密钥登录并关闭密码登录\" class=\"headerlink\" title=\"SSH 密钥登录并关闭密码登录\"></a>SSH 密钥登录并关闭密码登录</h2><ul>\n<li><p>命令行下执行 <code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code> 生成密钥对</p>\n</li>\n<li><p>将<code>~/.ssh/id_rsa.pub</code> 公钥添加到unraid 的 <code>~/.ssh/authorized_keys</code> 中。如果没有 .ssh 目录和 authorized_keys 文件，自己新建即可，authorized_keys 文件权限为 644。</p>\n</li>\n<li><p>关闭密码登录。 <code>/etc/ssh/sshd_config</code> 将 <code>PasswordAuthentication yes</code> 改成 <code>PasswordAuthentication no</code>。重启下sshd即可生效</p>\n</li>\n<li><p><code>bash /tmp/updateconfig.sh</code> 执行下脚本，将当前的设置和文件保存到 <code>/boot</code> 下，方便重启后恢复</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 恢复ssh，将配置文件覆盖原有的配置后，重启服务\n$ cat setssh.sh \n#!/usr/bin/bash\n\n# 从boot中恢复ssh文件\n\nssh_start()                                                                                        \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ -f /var/run/sshd.pid ]; then                                                                \n    #echo \"SSH already running\"                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n\n  echo \"Starting SSH...\"                                                                           \n  sleep 1                                                                                          \n\n  /usr/sbin/sshd                                                                                   \n\n  echo \"... OK\"                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n\nssh_stop()                                                                                         \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ ! -f /var/run/sshd.pid ]; then                                                              \n    #echo \"SSH already stopped\"                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n\n  echo \"Stopping SSH...\"                                                                           \n  sleep 1                                                                                          \n\n  killall sshd                                                                                     \n\n  echo \"... OK\"                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n\nssh_restart() {                                                                                    \n  if [ -r /var/run/sshd.pid ]; then                                                                \n    echo \"Restarting parent listener process only. To kill every sshd process, you must use stop\"  \n    sleep 3                                                                                        \n    kill `cat /var/run/sshd.pid`                                                                   \n  else                                                                                             \n    echo \"Warning: there does not appear to be a parent instance of sshd running.\"                 \n    sleep 3                                                                                        \n    exit 1                                                                                         \n  fi                                                                                               \n  sleep 1                                                                                          \n  ssh_start                                                                                        \n}\n\n\nif [ -d \"/root/.ssh\" ]; then\n  cp $BASE_PATH/.ssh/* /root/.ssh/\nfi\n\nif [ ! -d \"/root/.ssh\" ]; then\n  cp -r $BASE_PATH/.ssh /root\nfi\nchmod 644 /root/.ssh/id_rsa.pub\nchmod 644 /root/.ssh/authorized_keys\n\ncp $BASE_PATH/sshd_config /etc/ssh/sshd_config\nssh_restart\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"CPU-风扇根据CPU温度动态调节转速\"><a href=\"#CPU-风扇根据CPU温度动态调节转速\" class=\"headerlink\" title=\"CPU 风扇根据CPU温度动态调节转速\"></a>CPU 风扇根据CPU温度动态调节转速</h2><ul>\n<li>unraid 管理页面 APPS 下搜索 autofan 安装 Dynamix System <strong>Autofan</strong></li>\n<li>然后在 SETTINGS -&gt; Fan Auto Control 里 Enabled 该功能，需要注意下 PWM controller 和 PWM fan 是否选到了对应的设备。</li>\n<li>Minimum PWM value 设置最小转速PWM，最大值是255</li>\n<li>Low temperature threshold 温度下限阈值， High temperature threshold  温度上限阈值</li>\n<li>修改 <code>/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan</code> ，根据CPU温度添加转速， 默认是根据硬盘温度</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 完整见项目 custom.scripts (https://github.com/yibiner/custom.script) 中的 autofan \nfunction_get_current_cpu_temp() {\n    HIGHEST_TEMP=0\n    HIGHEST_TEMP=`sensors | grep \"CPU Temp\" | awk '{print $3}' | tr -cd \"[0-9.]\" | sed \"s/\\..*//g\"`\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 设置autofan\n$ cat setplugins.sh \n#!/usr/bin/bash\n\n# autofan 修改为根据 CPU 温度调节转速\nfilename=/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan\nif [ -e $filename ] ; then\n    # sed -i 'N;196afunction_get_current_cpu_temp() {\\nHIGHEST_TEMP=0\\nHIGHEST_TEMP=`sensors | grep \"CPU Temp\" | awk \"{print $3}\" | tr -cd \"[0-9.]\" | sed \"s/\\..*//g\"`\\n}' $filename\n    # sed -i 'N;292afunction_get_current_cpu_temp' $filename\n    # sed -i '292 d' $filename\n    cp $BASE_PATH/autofan $filename\n    /usr/local/emhttp/plugins/dynamix.system.autofan/scripts/rc.autofan restart\nfi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"双网卡同一局域网设置\"><a href=\"#双网卡同一局域网设置\" class=\"headerlink\" title=\"双网卡同一局域网设置\"></a>双网卡同一局域网设置</h2><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ cat setroute.sh\n#!/usr/bin/bash\n\n# 设置百兆、千兆网卡走不同路由，互不影响\nhadlan=`grep \"lan\" /etc/iproute2/rt_tables`\n# 新建一个编号为200 ，名字为lan的路由表\nif [ -z \"$hadlan\" ] ; then\n    echo \"200 lan\" >> /etc/iproute2/rt_tables\nfi\n\n# 删除default路由表中千兆网的配置\nhad1G=`ip route list | grep \"192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5\"`\nif [ -n \"$had1G\" ] ; then\n    ip route del 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215\nfi\n\n# 往 lan 路由表 中新增路由\nhad1G=`ip route list table lan | grep \"192.168.1.5\"`\nif [ -z \"$had1G\" ] ; then\n    ip route add 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215 table lan\nfi\n\n# 设置千兆网卡流量只看 lan 路由表\nhad1G=`ip rule | grep \"from 192.168.1.5 lookup lan\"`\nif [ -z \"$had1G\" ] ; then\n    ip rule add from 192.168.1.5 table lan\nfi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多网卡连接同一局域网时， 不做设置下是只会走一个物理链路的，默认路由就是这样。这里将两个IP的路由区别开来，这样就能实现访问不同IP走的是不同的物理链路，具体细节请搜索 linux 高级路由设置。</p>\n<h2 id=\"DNSPod-实现-ddns\"><a href=\"#DNSPod-实现-ddns\" class=\"headerlink\" title=\"DNSPod 实现 ddns\"></a>DNSPod 实现 ddns</h2><ul>\n<li><a href=\"https://console.dnspod.cn/dns/list\" target=\"_blank\" rel=\"noopener\">https://console.dnspod.cn/dns/list</a> 注册个域名</li>\n<li><a href=\"https://console.dnspod.cn/account/token\" target=\"_blank\" rel=\"noopener\">https://console.dnspod.cn/account/token</a> 账号中心 -&gt; 密钥管理，创建个密钥</li>\n<li><a href=\"https://github.com/yibiner/custom.script\" target=\"_blank\" rel=\"noopener\">custom.scripts</a>  项目中 dns.conf 文件中填入创建的密钥对</li>\n</ul>\n<h3 id=\"ddns脚本修改\"><a href=\"#ddns脚本修改\" class=\"headerlink\" title=\"ddns脚本修改\"></a>ddns脚本修改</h3><p>脚本参考  <a href=\"https://github.com/imki911/ArDNSPod，做了以下修改，见\" target=\"_blank\" rel=\"noopener\">https://github.com/imki911/ArDNSPod，做了以下修改，见</a>  <a href=\"https://github.com/yibiner/custom.script/blob/master/ddnspod.sh\" target=\"_blank\" rel=\"noopener\">ddnspod.sh</a>：</p>\n<ul>\n<li>获取本机的外网IP时，循环遍历几个能通过curl直接获取外网IP的网址，避免因为某个网址打不开而失败（是的，我经历过</li>\n<li>将上次的外网IP记录在本地文件，而不是每次都去网页获取上次的IP记录</li>\n</ul>\n<h3 id=\"使用-cron-设置定时，每10分钟检查一次\"><a href=\"#使用-cron-设置定时，每10分钟检查一次\" class=\"headerlink\" title=\"使用 cron 设置定时，每10分钟检查一次\"></a>使用 cron 设置定时，每10分钟检查一次</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中设置ddns，参考了dynamix.schedules  的思路\n$ cat setddns.sh \n#!/bin/bash\n\ncrontab -l > /tmp/cron.tmp\necho \"*/10 * * * * bash /tmp/custom.scripts/onetimeddns.sh\" >> /tmp/cron.tmp\ncrontab /tmp/cron.tmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>若是频率能接受每小时检查一次， 可以参考下文。将脚本放到 <code>/etc/cron.hourly/</code> 目录下即可，需要安装 <code>dynamix.schedules</code>插件</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># cp /tmp/custom.scripts/runddns.sh /etc/cron.hourly/\n# chmod +x /etc/cron.hourly/runddns.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"山克UPS不间断电源配置\"><a href=\"#山克UPS不间断电源配置\" class=\"headerlink\" title=\"山克UPS不间断电源配置\"></a>山克UPS不间断电源配置</h2><p>一个合格的NAS主机，注定了是要7*24小时不间断工作的，可是呢，谁也保不准家里什么时候会断电（组完机器的一个月内我就遇到了两次无预警断电）。所以呢，一个UPS就很重要了，可以让NAS在断电后能主动关机。</p>\n<p>入了最便宜的山克UPS 600VA的那款。</p>\n<p>顺带一提，UPS本身的功耗就10多W了。</p>\n<p>unraid 的 SETTINGS 中有UPS Setting ，直接支持一系列的UPS。不过山克这款尝试过后并不能直接支持，不确定是不是我设置有问题。</p>\n<p>所以当前使用了个折中方案，通过ping 家里路由器判断是否断电。详细见 <a href=\"https://github.com/yibiner/custom.script/loopping4ups.sh\" target=\"_blank\" rel=\"noopener\">loopping4ups.sh</a></p>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>名称</th>\n<th>价格</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主板</td>\n<td>铭瑄的H81 itx</td>\n<td>150</td>\n<td>建议买之前确认下网卡是百兆的还是千兆，要是不在意那就无所谓</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>三星 ddr3 8gx2</td>\n<td>240</td>\n<td>上16g的内存是因为用得上，unraid 系统运行时内存占用很少</td>\n</tr>\n<tr>\n<td>CPU</td>\n<td>i3-4160T/E3-1265L v3</td>\n<td>195/520</td>\n<td>计划是7*24 运行，所以CPU只考虑低功耗的了。整机加上两个机械硬盘，一个固态硬盘功耗正常运行时大概在20W</td>\n</tr>\n<tr>\n<td>机箱</td>\n<td>万由代工的暴风酷播云二代机箱</td>\n<td>175</td>\n<td>血亏的机箱，矿灾后的产物。双盘位</td>\n</tr>\n<tr>\n<td>散热器</td>\n<td>大镰刀S950M</td>\n<td>44</td>\n<td>高31mm。</td>\n</tr>\n<tr>\n<td>网卡</td>\n<td>AX88179 USB3.0 千兆网卡</td>\n<td>40</td>\n<td>主板上的网卡是百兆的，拓展一个千兆网卡， 局域网下千兆还是舒服点。使用usb的网卡主要是因为机箱大小不支持pcie类型的，这块网卡确认unraid 免驱</td>\n</tr>\n<tr>\n<td>U盘</td>\n<td>随便</td>\n<td></td>\n<td>最好用品牌的U盘，其他便宜U盘有可能会在做系统的时候出问题。如果正常做了启动盘后，系统起不来，那最好换个U盘试下</td>\n</tr>\n</tbody></table>\n<p>以上的价格都是2020年1月左右的，部分全新，部分二手</p>\n<h2 id=\"重启不丢配置及项目文件说明\"><a href=\"#重启不丢配置及项目文件说明\" class=\"headerlink\" title=\"重启不丢配置及项目文件说明\"></a>重启不丢配置及项目文件说明</h2><h3 id=\"重启不丢配置\"><a href=\"#重启不丢配置\" class=\"headerlink\" title=\"重启不丢配置\"></a>重启不丢配置</h3><p>unraid 系统默认会在重启时，恢复默认设置。如果安装了oh-my-zsh ，重启后会发现什么都没了，这时候可以参考插件的做法，将修改后的配置文件拷贝到 /boot 目录下，然后在启动脚本中恢复下个人配置。 unraid 系统的启动脚本 <code>/boot/config/go</code> 。</p>\n<p>重启不丢配置可以参考个人当前unraid恢复配置项目 <a href=\"https://github.com/yibiner/custom.script\" target=\"_blank\" rel=\"noopener\">custom.scripts</a> </p>\n<p>直接将项目clone到 <code>/boot/config</code>下，在 <code>/boot/config/go</code> 文件中最后添加 </p>\n<pre><code class=\"shell\">cp -r /boot/config/custom.scripts /tmp\nbash /tmp/custom.scripts/startall.sh</code></pre>\n<h3 id=\"项目文件说明\"><a href=\"#项目文件说明\" class=\"headerlink\" title=\"项目文件说明\"></a>项目文件说明</h3><ul>\n<li><p>config.sh 配置文件。</p>\n</li>\n<li><p>commfunc.sh 公共函数文件。一些日志输出函数。</p>\n</li>\n<li><p>startall.sh 运行所有设置配置脚本的入口。会运行所有 set 开头的脚本文件，会 nohup 运行 loop 开头的脚本文件，这样后续添加设置文件更加清晰。</p>\n</li>\n<li><p>updateconfig.sh 将一些配置保存到U盘中</p>\n</li>\n<li><p>setddns.sh 定时检查外网ip</p>\n</li>\n<li><p>setohmyzsh.sh 恢复oh-my-zsh</p>\n</li>\n<li><p>setssh.sh 恢复ssh 的配置，禁用密码登录、重启sshd 等</p>\n</li>\n<li><p>setplugins.sh autofan设置风扇根据CPU温度调节</p>\n</li>\n<li><p>setroute.sh 设置路由</p>\n</li>\n</ul>\n<h2 id=\"Oh-My-Zsh-安装\"><a href=\"#Oh-My-Zsh-安装\" class=\"headerlink\" title=\"Oh My Zsh 安装\"></a>Oh My Zsh 安装</h2><ul>\n<li>先安装了zsh<ul>\n<li>在 APPS 中搜索并安装 Nerd Pack</li>\n<li>在 SETTINGS -&gt; Nerd Pack 中安装 zsh</li>\n</ul>\n</li>\n<li>安装oh-my-zsh</li>\n</ul>\n<pre><code class=\"shell\"># curl 安装\nsh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n# wget 安装\nsh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></pre>\n<ul>\n<li><code>bash /tmp/updateconfig.sh</code> 执行下脚本，将当前的设置和文件保存到 <code>/boot</code> 下，方便重启后恢复</li>\n</ul>\n<pre><code class=\"shell\"># 项目 custom.scripts(https://github.com/yibiner/custom.script)  中 恢复oh-my-zsh\n$ cat setohmyzsh.sh \n#!/bin/bash\n\n# 将 oh-my-zsh 解压到目录\nif [ ! -d /root/.oh-my-zsh  ] ; then\n    tar -zxvf oh-my-zsh.tar.gz -C /root\nfi\n\n# 将配置文件拷贝回目录\ncp $BASE_PATH/.bash* /root\ncp $BASE_PATH/.zsh* /root</code></pre>\n<h2 id=\"SSH-密钥登录并关闭密码登录\"><a href=\"#SSH-密钥登录并关闭密码登录\" class=\"headerlink\" title=\"SSH 密钥登录并关闭密码登录\"></a>SSH 密钥登录并关闭密码登录</h2><ul>\n<li><p>命令行下执行 <code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code> 生成密钥对</p>\n</li>\n<li><p>将<code>~/.ssh/id_rsa.pub</code> 公钥添加到unraid 的 <code>~/.ssh/authorized_keys</code> 中。如果没有 .ssh 目录和 authorized_keys 文件，自己新建即可，authorized_keys 文件权限为 644。</p>\n</li>\n<li><p>关闭密码登录。 <code>/etc/ssh/sshd_config</code> 将 <code>PasswordAuthentication yes</code> 改成 <code>PasswordAuthentication no</code>。重启下sshd即可生效</p>\n</li>\n<li><p><code>bash /tmp/updateconfig.sh</code> 执行下脚本，将当前的设置和文件保存到 <code>/boot</code> 下，方便重启后恢复</p>\n</li>\n</ul>\n<pre><code class=\"shell\"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 恢复ssh，将配置文件覆盖原有的配置后，重启服务\n$ cat setssh.sh \n#!/usr/bin/bash\n\n# 从boot中恢复ssh文件\n\nssh_start()                                                                                        \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ -f /var/run/sshd.pid ]; then                                                                \n    #echo &quot;SSH already running&quot;                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n\n  echo &quot;Starting SSH...&quot;                                                                           \n  sleep 1                                                                                          \n\n  /usr/sbin/sshd                                                                                   \n\n  echo &quot;... OK&quot;                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n\nssh_stop()                                                                                         \n{                                                                                                  \n  # no-op if already running                                                                       \n  if [ ! -f /var/run/sshd.pid ]; then                                                              \n    #echo &quot;SSH already stopped&quot;                                                                    \n    #sleep 1                                                                                       \n    return                                                                                         \n  fi                                                                                               \n\n  echo &quot;Stopping SSH...&quot;                                                                           \n  sleep 1                                                                                          \n\n  killall sshd                                                                                     \n\n  echo &quot;... OK&quot;                                                                                    \n  sleep 1                                                                                          \n}                                                                                                  \n\nssh_restart() {                                                                                    \n  if [ -r /var/run/sshd.pid ]; then                                                                \n    echo &quot;Restarting parent listener process only. To kill every sshd process, you must use stop&quot;  \n    sleep 3                                                                                        \n    kill `cat /var/run/sshd.pid`                                                                   \n  else                                                                                             \n    echo &quot;Warning: there does not appear to be a parent instance of sshd running.&quot;                 \n    sleep 3                                                                                        \n    exit 1                                                                                         \n  fi                                                                                               \n  sleep 1                                                                                          \n  ssh_start                                                                                        \n}\n\n\nif [ -d &quot;/root/.ssh&quot; ]; then\n  cp $BASE_PATH/.ssh/* /root/.ssh/\nfi\n\nif [ ! -d &quot;/root/.ssh&quot; ]; then\n  cp -r $BASE_PATH/.ssh /root\nfi\nchmod 644 /root/.ssh/id_rsa.pub\nchmod 644 /root/.ssh/authorized_keys\n\ncp $BASE_PATH/sshd_config /etc/ssh/sshd_config\nssh_restart\n</code></pre>\n<h2 id=\"CPU-风扇根据CPU温度动态调节转速\"><a href=\"#CPU-风扇根据CPU温度动态调节转速\" class=\"headerlink\" title=\"CPU 风扇根据CPU温度动态调节转速\"></a>CPU 风扇根据CPU温度动态调节转速</h2><ul>\n<li>unraid 管理页面 APPS 下搜索 autofan 安装 Dynamix System <strong>Autofan</strong></li>\n<li>然后在 SETTINGS -&gt; Fan Auto Control 里 Enabled 该功能，需要注意下 PWM controller 和 PWM fan 是否选到了对应的设备。</li>\n<li>Minimum PWM value 设置最小转速PWM，最大值是255</li>\n<li>Low temperature threshold 温度下限阈值， High temperature threshold  温度上限阈值</li>\n<li>修改 <code>/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan</code> ，根据CPU温度添加转速， 默认是根据硬盘温度</li>\n</ul>\n<pre><code class=\"shell\"># 完整见项目 custom.scripts (https://github.com/yibiner/custom.script) 中的 autofan \nfunction_get_current_cpu_temp() {\n    HIGHEST_TEMP=0\n    HIGHEST_TEMP=`sensors | grep &quot;CPU Temp&quot; | awk &#39;{print $3}&#39; | tr -cd &quot;[0-9.]&quot; | sed &quot;s/\\..*//g&quot;`\n}</code></pre>\n<pre><code class=\"shell\"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中 设置autofan\n$ cat setplugins.sh \n#!/usr/bin/bash\n\n# autofan 修改为根据 CPU 温度调节转速\nfilename=/usr/local/emhttp/plugins/dynamix.system.autofan/scripts/autofan\nif [ -e $filename ] ; then\n    # sed -i &#39;N;196afunction_get_current_cpu_temp() {\\nHIGHEST_TEMP=0\\nHIGHEST_TEMP=`sensors | grep &quot;CPU Temp&quot; | awk &quot;{print $3}&quot; | tr -cd &quot;[0-9.]&quot; | sed &quot;s/\\..*//g&quot;`\\n}&#39; $filename\n    # sed -i &#39;N;292afunction_get_current_cpu_temp&#39; $filename\n    # sed -i &#39;292 d&#39; $filename\n    cp $BASE_PATH/autofan $filename\n    /usr/local/emhttp/plugins/dynamix.system.autofan/scripts/rc.autofan restart\nfi</code></pre>\n<h2 id=\"双网卡同一局域网设置\"><a href=\"#双网卡同一局域网设置\" class=\"headerlink\" title=\"双网卡同一局域网设置\"></a>双网卡同一局域网设置</h2><pre><code class=\"shell\">$ cat setroute.sh\n#!/usr/bin/bash\n\n# 设置百兆、千兆网卡走不同路由，互不影响\nhadlan=`grep &quot;lan&quot; /etc/iproute2/rt_tables`\n# 新建一个编号为200 ，名字为lan的路由表\nif [ -z &quot;$hadlan&quot; ] ; then\n    echo &quot;200 lan&quot; &gt;&gt; /etc/iproute2/rt_tables\nfi\n\n# 删除default路由表中千兆网的配置\nhad1G=`ip route list | grep &quot;192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5&quot;`\nif [ -n &quot;$had1G&quot; ] ; then\n    ip route del 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215\nfi\n\n# 往 lan 路由表 中新增路由\nhad1G=`ip route list table lan | grep &quot;192.168.1.5&quot;`\nif [ -z &quot;$had1G&quot; ] ; then\n    ip route add 192.168.1.0/24 dev br1 proto dhcp scope link src 192.168.1.5 metric 215 table lan\nfi\n\n# 设置千兆网卡流量只看 lan 路由表\nhad1G=`ip rule | grep &quot;from 192.168.1.5 lookup lan&quot;`\nif [ -z &quot;$had1G&quot; ] ; then\n    ip rule add from 192.168.1.5 table lan\nfi</code></pre>\n<p>多网卡连接同一局域网时， 不做设置下是只会走一个物理链路的，默认路由就是这样。这里将两个IP的路由区别开来，这样就能实现访问不同IP走的是不同的物理链路，具体细节请搜索 linux 高级路由设置。</p>\n<h2 id=\"DNSPod-实现-ddns\"><a href=\"#DNSPod-实现-ddns\" class=\"headerlink\" title=\"DNSPod 实现 ddns\"></a>DNSPod 实现 ddns</h2><ul>\n<li><a href=\"https://console.dnspod.cn/dns/list\" target=\"_blank\" rel=\"noopener\">https://console.dnspod.cn/dns/list</a> 注册个域名</li>\n<li><a href=\"https://console.dnspod.cn/account/token\" target=\"_blank\" rel=\"noopener\">https://console.dnspod.cn/account/token</a> 账号中心 -&gt; 密钥管理，创建个密钥</li>\n<li><a href=\"https://github.com/yibiner/custom.script\" target=\"_blank\" rel=\"noopener\">custom.scripts</a>  项目中 dns.conf 文件中填入创建的密钥对</li>\n</ul>\n<h3 id=\"ddns脚本修改\"><a href=\"#ddns脚本修改\" class=\"headerlink\" title=\"ddns脚本修改\"></a>ddns脚本修改</h3><p>脚本参考  <a href=\"https://github.com/imki911/ArDNSPod，做了以下修改，见\" target=\"_blank\" rel=\"noopener\">https://github.com/imki911/ArDNSPod，做了以下修改，见</a>  <a href=\"https://github.com/yibiner/custom.script/blob/master/ddnspod.sh\" target=\"_blank\" rel=\"noopener\">ddnspod.sh</a>：</p>\n<ul>\n<li>获取本机的外网IP时，循环遍历几个能通过curl直接获取外网IP的网址，避免因为某个网址打不开而失败（是的，我经历过</li>\n<li>将上次的外网IP记录在本地文件，而不是每次都去网页获取上次的IP记录</li>\n</ul>\n<h3 id=\"使用-cron-设置定时，每10分钟检查一次\"><a href=\"#使用-cron-设置定时，每10分钟检查一次\" class=\"headerlink\" title=\"使用 cron 设置定时，每10分钟检查一次\"></a>使用 cron 设置定时，每10分钟检查一次</h3><pre><code class=\"shell\"># 项目 custom.scripts (https://github.com/yibiner/custom.script) 中设置ddns，参考了dynamix.schedules  的思路\n$ cat setddns.sh \n#!/bin/bash\n\ncrontab -l &gt; /tmp/cron.tmp\necho &quot;*/10 * * * * bash /tmp/custom.scripts/onetimeddns.sh&quot; &gt;&gt; /tmp/cron.tmp\ncrontab /tmp/cron.tmp</code></pre>\n<p>若是频率能接受每小时检查一次， 可以参考下文。将脚本放到 <code>/etc/cron.hourly/</code> 目录下即可，需要安装 <code>dynamix.schedules</code>插件</p>\n<pre><code class=\"shell\"># cp /tmp/custom.scripts/runddns.sh /etc/cron.hourly/\n# chmod +x /etc/cron.hourly/runddns.sh</code></pre>\n<h2 id=\"山克UPS不间断电源配置\"><a href=\"#山克UPS不间断电源配置\" class=\"headerlink\" title=\"山克UPS不间断电源配置\"></a>山克UPS不间断电源配置</h2><p>一个合格的NAS主机，注定了是要7*24小时不间断工作的，可是呢，谁也保不准家里什么时候会断电（组完机器的一个月内我就遇到了两次无预警断电）。所以呢，一个UPS就很重要了，可以让NAS在断电后能主动关机。</p>\n<p>入了最便宜的山克UPS 600VA的那款。</p>\n<p>顺带一提，UPS本身的功耗就10多W了。</p>\n<p>unraid 的 SETTINGS 中有UPS Setting ，直接支持一系列的UPS。不过山克这款尝试过后并不能直接支持，不确定是不是我设置有问题。</p>\n<p>所以当前使用了个折中方案，通过ping 家里路由器判断是否断电。详细见 <a href=\"https://github.com/yibiner/custom.script/loopping4ups.sh\" target=\"_blank\" rel=\"noopener\">loopping4ups.sh</a></p>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"},{"title":"【其他】小米6解BL锁，获取ROOT权限","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-01T06:35:56.000Z","password":null,"summary":"最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。","_content":"\n## 前言\n\n最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。\n\n小米有一点我比较喜欢的就是至今（2020年11月7日）还有官方解锁渠道，手里有旧手机，或者就是想折腾的人也能有较为方便的获取 root 权限的途径（安卓手机拿到 root 权限，可就想怎么折腾都可以了）。\n\n不过在 root 小米6的过程中也遇到了许多问题，这里记录一下给需要的同学一个参考。\n\n\n\n## 基本环境\n\n手机：小米6 \n\n手机系统版本：MIUI11.0.5.0 稳定版\n\n<img src=\"手机系统信息.jpg\" alt=\"手机系统信息\" style=\"zoom:50%;\" />\n\n\n\n操作的电脑系统版本：\n\n```powershell\n版本\tWindows 10 专业版\n版本号\t20H2\n安装日期\t‎2020/‎6/‎25\n操作系统版本\t19042.610\n体验\tWindows Feature Experience Pack 120.2212.31.0\n```\n\n\n\n## 解BL锁\n\n### 正常流程下步骤\n\n1. 先阅读下[小米手机解锁 Bootloader 教程以及常见问题](https://www.xiaomi.cn/post/4378807) ，了解下解锁 Bootloader 的基本步骤\n2. 手机上操作，“设置 - 我的设备 - 所有参数” 连续按 MIUI版本，进入开发者模式\n3. 手机上操作，“设置 - 更多设置 - 开发者选项 - 设备解锁状态”，进行账号绑定和确认状态\n\n<img src=\"设备解锁状态-未解锁.jpg\" alt=\"设备解锁状态-未解锁\" style=\"zoom:50%;\" />\n\n\n\n**注意：这个步骤需要断开wifi，使用手机流量操作。且账号要与步骤5中登录账号一致**\n\n4. 下载小米解锁工具，[中文版](http://www.miui.com/unlock/download.html)，[英文版](https://en.miui.com/unlock/download_en.html)\n\n<img src=\"下载小米解锁工具.png\" alt=\"下载小米解锁工具\" style=\"zoom:80%;\" />\n\n5. 打开小米解锁工具，登录小米账号\n\n<img src=\"登录小米解锁工具.png\" alt=\"登录小米解锁工具\" style=\"zoom:60%;\" />\n\n6. 按照提示将手机关机后，长按音量下键 + 电源键进入 FastBoot 页面\n\n7. 安装驱动。要么将手机连接到电脑后自动安装好驱动，要么在小米解锁工具的设置页面手动安装驱动\n\n<img src=\"安装驱动.png\" alt=\"安装驱动\" style=\"zoom:60%;\" />\n\n8. 若是一切正常，这时候解锁工具页面应该是以下样子（我没有这么幸运能一次成功）\n\n<img src=\"手机连接上解锁工具.png\" alt=\"手机连接上解锁工具\" style=\"zoom:60%;\" />\n\n9. 点击解锁。**注意：解锁会将手机恢复出厂设置，请提前备份数据**\n\n<img src=\"准备开始解锁.png\" alt=\"准备开始解锁\" style=\"zoom:60%;\" />\n\n10. 等待解锁完成\n\n<img src=\"解锁到95.png\" alt=\"解锁到95%\" style=\"zoom:60%;\" />\n\n\n\n<img src=\"解锁成功.png\" alt=\"解锁成功\" style=\"zoom:60%;\" />\n\n11. 等到手机重启后查看 “设置 - 更多设置 - 开发者选项 - 设备解锁状态” （在开机的时候屏幕下方会有“unlock”字符）\n\n<img src=\"解锁完成后手机状态.jpg\" alt=\"解锁完成后手机状态\" style=\"zoom:50%;\" />\n\n\n\n### 遇到的问题\n\n- 问题一：手机连接上电脑后，在解锁工具中检测不到设备\n\n<img src=\"检测不到手机.png\" alt=\"检测不到手机\" style=\"zoom:80%;\" />\n\n尝试解决：\n\n1. 换线，换USB接口，都无效\n\n2. 卸载驱动后重新安装，无效\n3. 换了另一台win10的电脑尝试，问题仍存在\n\n4. 只能通过重启电脑后才能检测到设备，如果重启后拔插了usb，又检测不到了\n\n\n\n- 问题二：开始解锁后，验证设备信息到50%后验证失败（重启电脑后解锁工具能检测到手机，此时可以点击解锁）\n\n<img src=\"50验证失败.png\" alt=\"50验证失败\" style=\"zoom:80%;\" />\n\n尝试解决：\n\n1. 换了老版本解锁工具，无效\n\n2. 参考[小米解锁无法获取手机信息解决方法](https://miuiver.com/unable-to-get-phone-info/)，换英文版的解锁工具，无效\n\n3. 根据问题一需要重启解锁工具才能显示检测到手机推测应该是驱动有问题。参考 https://www.52pojie.cn/forum.php?mod=viewthread&tid=905825&archive=1&extra=page%3D1&page=2  中提到的解决方法继续以下的尝试解决方法\n\n4. 使用 [小米助手3.0](http://zhushou.xiaomi.com/)  安装驱动，使用原装线，无效\n\n5. 使用 [搞机助手](https://www.52pojie.cn/forum.php?mod=viewthread&tid=1169553&highlight=%B8%E3%BB%FA%D6%FA%CA%D6) 小米usb3.0 修复补丁，安装后重启电脑，再使用解锁工具解锁，【 成功】\n\n<img src=\"搞机助手安装修复补丁.png\" alt=\"搞机助手安装修复补丁\" style=\"zoom:80%;\" />\n\n6. 下载360手机管家安装安卓驱动，未测试\n7. 换win7系统，再使用解锁工具安装驱动解锁，未测试\n\n\n\n其他参考：\n\n- [BL锁解锁失败必看](https://www.mi.com/service/special/BL-loc)\n\n- [小米 9 解 bl 锁,在 fastboot 界面，解锁工具始终显示未连接](https://www.v2ex.com/t/589868)\n\n\n\n## 线刷开发版系统\n\n1. [通过线刷升级](http://www.miui.com/shuaji-393.html)，下载通用刷机工具\n2. [小米全系列机型刷机包下载站汇总（长期更新）](https://www.xiaomi.cn/post/5896315)，查找对应的系统包（我这里下载的是 9.8.22（9.0） 的线刷包，当前系统里面升级页面找不到卡刷包的入口）。说明：应官方要求，9.9.3版本往后暂不提供开发版下载方式，请大家移步[内测中心](https://web-alpha.vip.miui.com/page/info/mio/mio/internalTest?type=2)申请开发板公测/内侧体验。\n\n3. 在手机上操作：关机状态下，同时按住 音量下+电源键 进入Fastboot模式将手机USB连接电脑\n\n4. 线刷包下载完成后解压，打开线刷包文件夹，复制地址栏地址到刷机工具中，点击刷机\n\n<img src=\"线刷中.png\" alt=\"线刷中\" style=\"zoom:80%;\" />\n\n5. 等待刷机完成。手机刷机完后会重启，第一次启动的时间有点久的，别以为是刷成砖了，耐心等待下。注意：这里有个坑爹的地方：默认情况下，解了BL锁右下角会选择全部删除并lock，这样线刷完后BL又锁上了。需要手动选择下全部删除选项\n\n<img src=\"线刷完成.png\" alt=\"线刷完成\" style=\"zoom:80%;\" />\n\n6. 查看手机是否已经是开发版本了\n\n<img src=\"刷到开发板.jpg\" alt=\"刷到开发板\" style=\"zoom:60%;\" />\n\n\n\n## 开启ROOT权限\n\n参考[【原创】小米手机获取完整ROOT权限教程](https://www.xiaomi.cn/post/4471505)\n\n1. 打开手机管家\n\n<img src=\"root1.png\" alt=\"打开手机管家\" style=\"zoom:60%;\" />\n\n2. 点击应用管理\n\n<img src=\"root2.png\" alt=\"点击应用管理\" style=\"zoom:60%;\" />\n\n3. 点击权限\n\n<img src=\"root3.png\" alt=\"点击权限\" style=\"zoom:60%;\" />\n\n4. 点击开启ROOT权限\n\n<img src=\"root4.png\" alt=\"点击开启\" style=\"zoom:60%;\" />\n\n5. 开启ROOT。注意：需要网络连接，成功后会重启。如果更新了开发版系统，需要重新再开启ROOT\n\n<img src=\"root5.png\" alt=\"开启ROOT\" style=\"zoom:60%;\" />\n\n6. 解锁System分区。系统提供的ROOT功能并不是完整的；要获取完整的权限，必须解锁System分区！下载 [Syslock](https://www.coolapk.com/apk/com.lerist.syslock)，开启解锁后重启即可生效。（应用获取ROOT权限也提示太多次了吧，每次都要等待5s）\n\n<img src=\"获取root权限提示太多.jpg\" alt=\"获取root权限提示太多\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"解锁system.jpg\" alt=\"解锁system\" style=\"zoom:50%;\" />\n\n\n\n### 刷入TWRP\n\n如果需要刷入TWRP，可以参考以下步骤。能获取ROOT权限应该开发版也够用了。如果刷第三方，还是可以装下TWRP\n\n1. 下载TWRP。到 [TWRP设备列表](https://twrp.me/Devices/) 中找到小米（[Xiaomi](https://twrp.me/Devices/Xiaomi/)），进入找到[小米6机型](https://twrp.me/xiaomi/xiaomimi6.html)。\n\n<img src=\"下载TWRP.png\" alt=\"下载TWRP\" style=\"zoom:80%;\" />\n\n2. 手机开启USB调试模式\n3. 打开搞机助手\n\n<img src=\"打开搞机助手.png\" alt=\"打开搞机助手\" style=\"zoom:80%;\" />\n\n4. 点击系统模式下重启到引导模式，或者直接音量下+电源键进入\n\n<img src=\"刷入REC.png\" alt=\"刷入REC\" style=\"zoom:80%;\" />\n\n5. 选择刚才下载的img\n\n<img src=\"刷入REC1.png\" alt=\"选择刚下载的文件\" style=\"zoom:80%;\" />\n\n6. 等待刷入成功，默认会重启进入引导模式\n\n<img src=\"刷入REC成功.png\" alt=\"刷入REC成功\" style=\"zoom:80%;\" />\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【其他】小米6解BL锁，获取ROOT权限.md","raw":"---\ntitle: 【其他】小米6解BL锁，获取ROOT权限\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-01 14:35:56\npassword:\nsummary: 最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。\ntags:\n- 其他\n- 刷机\ncategories:\n- 折腾\n\n---\n\n## 前言\n\n最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。\n\n小米有一点我比较喜欢的就是至今（2020年11月7日）还有官方解锁渠道，手里有旧手机，或者就是想折腾的人也能有较为方便的获取 root 权限的途径（安卓手机拿到 root 权限，可就想怎么折腾都可以了）。\n\n不过在 root 小米6的过程中也遇到了许多问题，这里记录一下给需要的同学一个参考。\n\n\n\n## 基本环境\n\n手机：小米6 \n\n手机系统版本：MIUI11.0.5.0 稳定版\n\n<img src=\"手机系统信息.jpg\" alt=\"手机系统信息\" style=\"zoom:50%;\" />\n\n\n\n操作的电脑系统版本：\n\n```powershell\n版本\tWindows 10 专业版\n版本号\t20H2\n安装日期\t‎2020/‎6/‎25\n操作系统版本\t19042.610\n体验\tWindows Feature Experience Pack 120.2212.31.0\n```\n\n\n\n## 解BL锁\n\n### 正常流程下步骤\n\n1. 先阅读下[小米手机解锁 Bootloader 教程以及常见问题](https://www.xiaomi.cn/post/4378807) ，了解下解锁 Bootloader 的基本步骤\n2. 手机上操作，“设置 - 我的设备 - 所有参数” 连续按 MIUI版本，进入开发者模式\n3. 手机上操作，“设置 - 更多设置 - 开发者选项 - 设备解锁状态”，进行账号绑定和确认状态\n\n<img src=\"设备解锁状态-未解锁.jpg\" alt=\"设备解锁状态-未解锁\" style=\"zoom:50%;\" />\n\n\n\n**注意：这个步骤需要断开wifi，使用手机流量操作。且账号要与步骤5中登录账号一致**\n\n4. 下载小米解锁工具，[中文版](http://www.miui.com/unlock/download.html)，[英文版](https://en.miui.com/unlock/download_en.html)\n\n<img src=\"下载小米解锁工具.png\" alt=\"下载小米解锁工具\" style=\"zoom:80%;\" />\n\n5. 打开小米解锁工具，登录小米账号\n\n<img src=\"登录小米解锁工具.png\" alt=\"登录小米解锁工具\" style=\"zoom:60%;\" />\n\n6. 按照提示将手机关机后，长按音量下键 + 电源键进入 FastBoot 页面\n\n7. 安装驱动。要么将手机连接到电脑后自动安装好驱动，要么在小米解锁工具的设置页面手动安装驱动\n\n<img src=\"安装驱动.png\" alt=\"安装驱动\" style=\"zoom:60%;\" />\n\n8. 若是一切正常，这时候解锁工具页面应该是以下样子（我没有这么幸运能一次成功）\n\n<img src=\"手机连接上解锁工具.png\" alt=\"手机连接上解锁工具\" style=\"zoom:60%;\" />\n\n9. 点击解锁。**注意：解锁会将手机恢复出厂设置，请提前备份数据**\n\n<img src=\"准备开始解锁.png\" alt=\"准备开始解锁\" style=\"zoom:60%;\" />\n\n10. 等待解锁完成\n\n<img src=\"解锁到95.png\" alt=\"解锁到95%\" style=\"zoom:60%;\" />\n\n\n\n<img src=\"解锁成功.png\" alt=\"解锁成功\" style=\"zoom:60%;\" />\n\n11. 等到手机重启后查看 “设置 - 更多设置 - 开发者选项 - 设备解锁状态” （在开机的时候屏幕下方会有“unlock”字符）\n\n<img src=\"解锁完成后手机状态.jpg\" alt=\"解锁完成后手机状态\" style=\"zoom:50%;\" />\n\n\n\n### 遇到的问题\n\n- 问题一：手机连接上电脑后，在解锁工具中检测不到设备\n\n<img src=\"检测不到手机.png\" alt=\"检测不到手机\" style=\"zoom:80%;\" />\n\n尝试解决：\n\n1. 换线，换USB接口，都无效\n\n2. 卸载驱动后重新安装，无效\n3. 换了另一台win10的电脑尝试，问题仍存在\n\n4. 只能通过重启电脑后才能检测到设备，如果重启后拔插了usb，又检测不到了\n\n\n\n- 问题二：开始解锁后，验证设备信息到50%后验证失败（重启电脑后解锁工具能检测到手机，此时可以点击解锁）\n\n<img src=\"50验证失败.png\" alt=\"50验证失败\" style=\"zoom:80%;\" />\n\n尝试解决：\n\n1. 换了老版本解锁工具，无效\n\n2. 参考[小米解锁无法获取手机信息解决方法](https://miuiver.com/unable-to-get-phone-info/)，换英文版的解锁工具，无效\n\n3. 根据问题一需要重启解锁工具才能显示检测到手机推测应该是驱动有问题。参考 https://www.52pojie.cn/forum.php?mod=viewthread&tid=905825&archive=1&extra=page%3D1&page=2  中提到的解决方法继续以下的尝试解决方法\n\n4. 使用 [小米助手3.0](http://zhushou.xiaomi.com/)  安装驱动，使用原装线，无效\n\n5. 使用 [搞机助手](https://www.52pojie.cn/forum.php?mod=viewthread&tid=1169553&highlight=%B8%E3%BB%FA%D6%FA%CA%D6) 小米usb3.0 修复补丁，安装后重启电脑，再使用解锁工具解锁，【 成功】\n\n<img src=\"搞机助手安装修复补丁.png\" alt=\"搞机助手安装修复补丁\" style=\"zoom:80%;\" />\n\n6. 下载360手机管家安装安卓驱动，未测试\n7. 换win7系统，再使用解锁工具安装驱动解锁，未测试\n\n\n\n其他参考：\n\n- [BL锁解锁失败必看](https://www.mi.com/service/special/BL-loc)\n\n- [小米 9 解 bl 锁,在 fastboot 界面，解锁工具始终显示未连接](https://www.v2ex.com/t/589868)\n\n\n\n## 线刷开发版系统\n\n1. [通过线刷升级](http://www.miui.com/shuaji-393.html)，下载通用刷机工具\n2. [小米全系列机型刷机包下载站汇总（长期更新）](https://www.xiaomi.cn/post/5896315)，查找对应的系统包（我这里下载的是 9.8.22（9.0） 的线刷包，当前系统里面升级页面找不到卡刷包的入口）。说明：应官方要求，9.9.3版本往后暂不提供开发版下载方式，请大家移步[内测中心](https://web-alpha.vip.miui.com/page/info/mio/mio/internalTest?type=2)申请开发板公测/内侧体验。\n\n3. 在手机上操作：关机状态下，同时按住 音量下+电源键 进入Fastboot模式将手机USB连接电脑\n\n4. 线刷包下载完成后解压，打开线刷包文件夹，复制地址栏地址到刷机工具中，点击刷机\n\n<img src=\"线刷中.png\" alt=\"线刷中\" style=\"zoom:80%;\" />\n\n5. 等待刷机完成。手机刷机完后会重启，第一次启动的时间有点久的，别以为是刷成砖了，耐心等待下。注意：这里有个坑爹的地方：默认情况下，解了BL锁右下角会选择全部删除并lock，这样线刷完后BL又锁上了。需要手动选择下全部删除选项\n\n<img src=\"线刷完成.png\" alt=\"线刷完成\" style=\"zoom:80%;\" />\n\n6. 查看手机是否已经是开发版本了\n\n<img src=\"刷到开发板.jpg\" alt=\"刷到开发板\" style=\"zoom:60%;\" />\n\n\n\n## 开启ROOT权限\n\n参考[【原创】小米手机获取完整ROOT权限教程](https://www.xiaomi.cn/post/4471505)\n\n1. 打开手机管家\n\n<img src=\"root1.png\" alt=\"打开手机管家\" style=\"zoom:60%;\" />\n\n2. 点击应用管理\n\n<img src=\"root2.png\" alt=\"点击应用管理\" style=\"zoom:60%;\" />\n\n3. 点击权限\n\n<img src=\"root3.png\" alt=\"点击权限\" style=\"zoom:60%;\" />\n\n4. 点击开启ROOT权限\n\n<img src=\"root4.png\" alt=\"点击开启\" style=\"zoom:60%;\" />\n\n5. 开启ROOT。注意：需要网络连接，成功后会重启。如果更新了开发版系统，需要重新再开启ROOT\n\n<img src=\"root5.png\" alt=\"开启ROOT\" style=\"zoom:60%;\" />\n\n6. 解锁System分区。系统提供的ROOT功能并不是完整的；要获取完整的权限，必须解锁System分区！下载 [Syslock](https://www.coolapk.com/apk/com.lerist.syslock)，开启解锁后重启即可生效。（应用获取ROOT权限也提示太多次了吧，每次都要等待5s）\n\n<img src=\"获取root权限提示太多.jpg\" alt=\"获取root权限提示太多\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"解锁system.jpg\" alt=\"解锁system\" style=\"zoom:50%;\" />\n\n\n\n### 刷入TWRP\n\n如果需要刷入TWRP，可以参考以下步骤。能获取ROOT权限应该开发版也够用了。如果刷第三方，还是可以装下TWRP\n\n1. 下载TWRP。到 [TWRP设备列表](https://twrp.me/Devices/) 中找到小米（[Xiaomi](https://twrp.me/Devices/Xiaomi/)），进入找到[小米6机型](https://twrp.me/xiaomi/xiaomimi6.html)。\n\n<img src=\"下载TWRP.png\" alt=\"下载TWRP\" style=\"zoom:80%;\" />\n\n2. 手机开启USB调试模式\n3. 打开搞机助手\n\n<img src=\"打开搞机助手.png\" alt=\"打开搞机助手\" style=\"zoom:80%;\" />\n\n4. 点击系统模式下重启到引导模式，或者直接音量下+电源键进入\n\n<img src=\"刷入REC.png\" alt=\"刷入REC\" style=\"zoom:80%;\" />\n\n5. 选择刚才下载的img\n\n<img src=\"刷入REC1.png\" alt=\"选择刚下载的文件\" style=\"zoom:80%;\" />\n\n6. 等待刷入成功，默认会重启进入引导模式\n\n<img src=\"刷入REC成功.png\" alt=\"刷入REC成功\" style=\"zoom:80%;\" />\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【其他】小米6解BL锁，获取ROOT权限","published":1,"updated":"2020-11-23T16:26:13.331Z","_id":"ckhuq03mg000by8gpv8fvrc76","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。</p>\n<p>小米有一点我比较喜欢的就是至今（2020年11月7日）还有官方解锁渠道，手里有旧手机，或者就是想折腾的人也能有较为方便的获取 root 权限的途径（安卓手机拿到 root 权限，可就想怎么折腾都可以了）。</p>\n<p>不过在 root 小米6的过程中也遇到了许多问题，这里记录一下给需要的同学一个参考。</p>\n<h2 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h2><p>手机：小米6 </p>\n<p>手机系统版本：MIUI11.0.5.0 稳定版</p>\n<img src=\"手机系统信息.jpg\" alt=\"手机系统信息\" style=\"zoom:50%;\">\n\n\n\n<p>操作的电脑系统版本：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">版本    Windows 10 专业版\n版本号    20H2\n安装日期    ‎2020<span class=\"token operator\">/</span>‎6<span class=\"token operator\">/</span>‎25\n操作系统版本    19042<span class=\"token punctuation\">.</span>610\n体验    Windows Feature Experience Pack 120<span class=\"token punctuation\">.</span>2212<span class=\"token punctuation\">.</span>31<span class=\"token punctuation\">.</span>0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"解BL锁\"><a href=\"#解BL锁\" class=\"headerlink\" title=\"解BL锁\"></a>解BL锁</h2><h3 id=\"正常流程下步骤\"><a href=\"#正常流程下步骤\" class=\"headerlink\" title=\"正常流程下步骤\"></a>正常流程下步骤</h3><ol>\n<li>先阅读下<a href=\"https://www.xiaomi.cn/post/4378807\" target=\"_blank\" rel=\"noopener\">小米手机解锁 Bootloader 教程以及常见问题</a> ，了解下解锁 Bootloader 的基本步骤</li>\n<li>手机上操作，“设置 - 我的设备 - 所有参数” 连续按 MIUI版本，进入开发者模式</li>\n<li>手机上操作，“设置 - 更多设置 - 开发者选项 - 设备解锁状态”，进行账号绑定和确认状态</li>\n</ol>\n<img src=\"设备解锁状态-未解锁.jpg\" alt=\"设备解锁状态-未解锁\" style=\"zoom:50%;\">\n\n\n\n<p><strong>注意：这个步骤需要断开wifi，使用手机流量操作。且账号要与步骤5中登录账号一致</strong></p>\n<ol start=\"4\">\n<li>下载小米解锁工具，<a href=\"http://www.miui.com/unlock/download.html\" target=\"_blank\" rel=\"noopener\">中文版</a>，<a href=\"https://en.miui.com/unlock/download_en.html\" target=\"_blank\" rel=\"noopener\">英文版</a></li>\n</ol>\n<img src=\"下载小米解锁工具.png\" alt=\"下载小米解锁工具\" style=\"zoom:80%;\">\n\n<ol start=\"5\">\n<li>打开小米解锁工具，登录小米账号</li>\n</ol>\n<img src=\"登录小米解锁工具.png\" alt=\"登录小米解锁工具\" style=\"zoom:60%;\">\n\n<ol start=\"6\">\n<li><p>按照提示将手机关机后，长按音量下键 + 电源键进入 FastBoot 页面</p>\n</li>\n<li><p>安装驱动。要么将手机连接到电脑后自动安装好驱动，要么在小米解锁工具的设置页面手动安装驱动</p>\n</li>\n</ol>\n<img src=\"安装驱动.png\" alt=\"安装驱动\" style=\"zoom:60%;\">\n\n<ol start=\"8\">\n<li>若是一切正常，这时候解锁工具页面应该是以下样子（我没有这么幸运能一次成功）</li>\n</ol>\n<img src=\"手机连接上解锁工具.png\" alt=\"手机连接上解锁工具\" style=\"zoom:60%;\">\n\n<ol start=\"9\">\n<li>点击解锁。<strong>注意：解锁会将手机恢复出厂设置，请提前备份数据</strong></li>\n</ol>\n<img src=\"准备开始解锁.png\" alt=\"准备开始解锁\" style=\"zoom:60%;\">\n\n<ol start=\"10\">\n<li>等待解锁完成</li>\n</ol>\n<img src=\"解锁到95.png\" alt=\"解锁到95%\" style=\"zoom:60%;\">\n\n\n\n<img src=\"解锁成功.png\" alt=\"解锁成功\" style=\"zoom:60%;\">\n\n<ol start=\"11\">\n<li>等到手机重启后查看 “设置 - 更多设置 - 开发者选项 - 设备解锁状态” （在开机的时候屏幕下方会有“unlock”字符）</li>\n</ol>\n<img src=\"解锁完成后手机状态.jpg\" alt=\"解锁完成后手机状态\" style=\"zoom:50%;\">\n\n\n\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>问题一：手机连接上电脑后，在解锁工具中检测不到设备</li>\n</ul>\n<img src=\"检测不到手机.png\" alt=\"检测不到手机\" style=\"zoom:80%;\">\n\n<p>尝试解决：</p>\n<ol>\n<li><p>换线，换USB接口，都无效</p>\n</li>\n<li><p>卸载驱动后重新安装，无效</p>\n</li>\n<li><p>换了另一台win10的电脑尝试，问题仍存在</p>\n</li>\n<li><p>只能通过重启电脑后才能检测到设备，如果重启后拔插了usb，又检测不到了</p>\n</li>\n</ol>\n<ul>\n<li>问题二：开始解锁后，验证设备信息到50%后验证失败（重启电脑后解锁工具能检测到手机，此时可以点击解锁）</li>\n</ul>\n<img src=\"50验证失败.png\" alt=\"50验证失败\" style=\"zoom:80%;\">\n\n<p>尝试解决：</p>\n<ol>\n<li><p>换了老版本解锁工具，无效</p>\n</li>\n<li><p>参考<a href=\"https://miuiver.com/unable-to-get-phone-info/\" target=\"_blank\" rel=\"noopener\">小米解锁无法获取手机信息解决方法</a>，换英文版的解锁工具，无效</p>\n</li>\n<li><p>根据问题一需要重启解锁工具才能显示检测到手机推测应该是驱动有问题。参考 <a href=\"https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=905825&amp;archive=1&amp;extra=page%3D1&amp;page=2\" target=\"_blank\" rel=\"noopener\">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=905825&amp;archive=1&amp;extra=page%3D1&amp;page=2</a>  中提到的解决方法继续以下的尝试解决方法</p>\n</li>\n<li><p>使用 <a href=\"http://zhushou.xiaomi.com/\" target=\"_blank\" rel=\"noopener\">小米助手3.0</a>  安装驱动，使用原装线，无效</p>\n</li>\n<li><p>使用 <a href=\"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1169553&highlight=%B8%E3%BB%FA%D6%FA%CA%D6\" target=\"_blank\" rel=\"noopener\">搞机助手</a> 小米usb3.0 修复补丁，安装后重启电脑，再使用解锁工具解锁，【 成功】</p>\n</li>\n</ol>\n<img src=\"搞机助手安装修复补丁.png\" alt=\"搞机助手安装修复补丁\" style=\"zoom:80%;\">\n\n<ol start=\"6\">\n<li>下载360手机管家安装安卓驱动，未测试</li>\n<li>换win7系统，再使用解锁工具安装驱动解锁，未测试</li>\n</ol>\n<p>其他参考：</p>\n<ul>\n<li><p><a href=\"https://www.mi.com/service/special/BL-loc\" target=\"_blank\" rel=\"noopener\">BL锁解锁失败必看</a></p>\n</li>\n<li><p><a href=\"https://www.v2ex.com/t/589868\" target=\"_blank\" rel=\"noopener\">小米 9 解 bl 锁,在 fastboot 界面，解锁工具始终显示未连接</a></p>\n</li>\n</ul>\n<h2 id=\"线刷开发版系统\"><a href=\"#线刷开发版系统\" class=\"headerlink\" title=\"线刷开发版系统\"></a>线刷开发版系统</h2><ol>\n<li><p><a href=\"http://www.miui.com/shuaji-393.html\" target=\"_blank\" rel=\"noopener\">通过线刷升级</a>，下载通用刷机工具</p>\n</li>\n<li><p><a href=\"https://www.xiaomi.cn/post/5896315\" target=\"_blank\" rel=\"noopener\">小米全系列机型刷机包下载站汇总（长期更新）</a>，查找对应的系统包（我这里下载的是 9.8.22（9.0） 的线刷包，当前系统里面升级页面找不到卡刷包的入口）。说明：应官方要求，9.9.3版本往后暂不提供开发版下载方式，请大家移步<a href=\"https://web-alpha.vip.miui.com/page/info/mio/mio/internalTest?type=2\" target=\"_blank\" rel=\"noopener\">内测中心</a>申请开发板公测/内侧体验。</p>\n</li>\n<li><p>在手机上操作：关机状态下，同时按住 音量下+电源键 进入Fastboot模式将手机USB连接电脑</p>\n</li>\n<li><p>线刷包下载完成后解压，打开线刷包文件夹，复制地址栏地址到刷机工具中，点击刷机</p>\n</li>\n</ol>\n<img src=\"线刷中.png\" alt=\"线刷中\" style=\"zoom:80%;\">\n\n<ol start=\"5\">\n<li>等待刷机完成。手机刷机完后会重启，第一次启动的时间有点久的，别以为是刷成砖了，耐心等待下。注意：这里有个坑爹的地方：默认情况下，解了BL锁右下角会选择全部删除并lock，这样线刷完后BL又锁上了。需要手动选择下全部删除选项</li>\n</ol>\n<img src=\"线刷完成.png\" alt=\"线刷完成\" style=\"zoom:80%;\">\n\n<ol start=\"6\">\n<li>查看手机是否已经是开发版本了</li>\n</ol>\n<img src=\"刷到开发板.jpg\" alt=\"刷到开发板\" style=\"zoom:60%;\">\n\n\n\n<h2 id=\"开启ROOT权限\"><a href=\"#开启ROOT权限\" class=\"headerlink\" title=\"开启ROOT权限\"></a>开启ROOT权限</h2><p>参考<a href=\"https://www.xiaomi.cn/post/4471505\" target=\"_blank\" rel=\"noopener\">【原创】小米手机获取完整ROOT权限教程</a></p>\n<ol>\n<li>打开手机管家</li>\n</ol>\n<img src=\"root1.png\" alt=\"打开手机管家\" style=\"zoom:60%;\">\n\n<ol start=\"2\">\n<li>点击应用管理</li>\n</ol>\n<img src=\"root2.png\" alt=\"点击应用管理\" style=\"zoom:60%;\">\n\n<ol start=\"3\">\n<li>点击权限</li>\n</ol>\n<img src=\"root3.png\" alt=\"点击权限\" style=\"zoom:60%;\">\n\n<ol start=\"4\">\n<li>点击开启ROOT权限</li>\n</ol>\n<img src=\"root4.png\" alt=\"点击开启\" style=\"zoom:60%;\">\n\n<ol start=\"5\">\n<li>开启ROOT。注意：需要网络连接，成功后会重启。如果更新了开发版系统，需要重新再开启ROOT</li>\n</ol>\n<img src=\"root5.png\" alt=\"开启ROOT\" style=\"zoom:60%;\">\n\n<ol start=\"6\">\n<li>解锁System分区。系统提供的ROOT功能并不是完整的；要获取完整的权限，必须解锁System分区！下载 <a href=\"https://www.coolapk.com/apk/com.lerist.syslock\" target=\"_blank\" rel=\"noopener\">Syslock</a>，开启解锁后重启即可生效。（应用获取ROOT权限也提示太多次了吧，每次都要等待5s）</li>\n</ol>\n<img src=\"获取root权限提示太多.jpg\" alt=\"获取root权限提示太多\" style=\"zoom:50%;\">\n\n\n\n<img src=\"解锁system.jpg\" alt=\"解锁system\" style=\"zoom:50%;\">\n\n\n\n<h3 id=\"刷入TWRP\"><a href=\"#刷入TWRP\" class=\"headerlink\" title=\"刷入TWRP\"></a>刷入TWRP</h3><p>如果需要刷入TWRP，可以参考以下步骤。能获取ROOT权限应该开发版也够用了。如果刷第三方，还是可以装下TWRP</p>\n<ol>\n<li>下载TWRP。到 <a href=\"https://twrp.me/Devices/\" target=\"_blank\" rel=\"noopener\">TWRP设备列表</a> 中找到小米（<a href=\"https://twrp.me/Devices/Xiaomi/\" target=\"_blank\" rel=\"noopener\">Xiaomi</a>），进入找到<a href=\"https://twrp.me/xiaomi/xiaomimi6.html\" target=\"_blank\" rel=\"noopener\">小米6机型</a>。</li>\n</ol>\n<img src=\"下载TWRP.png\" alt=\"下载TWRP\" style=\"zoom:80%;\">\n\n<ol start=\"2\">\n<li>手机开启USB调试模式</li>\n<li>打开搞机助手</li>\n</ol>\n<img src=\"打开搞机助手.png\" alt=\"打开搞机助手\" style=\"zoom:80%;\">\n\n<ol start=\"4\">\n<li>点击系统模式下重启到引导模式，或者直接音量下+电源键进入</li>\n</ol>\n<img src=\"刷入REC.png\" alt=\"刷入REC\" style=\"zoom:80%;\">\n\n<ol start=\"5\">\n<li>选择刚才下载的img</li>\n</ol>\n<img src=\"刷入REC1.png\" alt=\"选择刚下载的文件\" style=\"zoom:80%;\">\n\n<ol start=\"6\">\n<li>等待刷入成功，默认会重启进入引导模式</li>\n</ol>\n<img src=\"刷入REC成功.png\" alt=\"刷入REC成功\" style=\"zoom:80%;\">\n\n\n\n\n\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近换手机，想把之前一直用的小米6给 root 了，刷个机方便之后折腾。</p>\n<p>小米有一点我比较喜欢的就是至今（2020年11月7日）还有官方解锁渠道，手里有旧手机，或者就是想折腾的人也能有较为方便的获取 root 权限的途径（安卓手机拿到 root 权限，可就想怎么折腾都可以了）。</p>\n<p>不过在 root 小米6的过程中也遇到了许多问题，这里记录一下给需要的同学一个参考。</p>\n<h2 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h2><p>手机：小米6 </p>\n<p>手机系统版本：MIUI11.0.5.0 稳定版</p>\n<img src=\"手机系统信息.jpg\" alt=\"手机系统信息\" style=\"zoom:50%;\">\n\n\n\n<p>操作的电脑系统版本：</p>\n<pre><code class=\"powershell\">版本    Windows 10 专业版\n版本号    20H2\n安装日期    ‎2020/‎6/‎25\n操作系统版本    19042.610\n体验    Windows Feature Experience Pack 120.2212.31.0</code></pre>\n<h2 id=\"解BL锁\"><a href=\"#解BL锁\" class=\"headerlink\" title=\"解BL锁\"></a>解BL锁</h2><h3 id=\"正常流程下步骤\"><a href=\"#正常流程下步骤\" class=\"headerlink\" title=\"正常流程下步骤\"></a>正常流程下步骤</h3><ol>\n<li>先阅读下<a href=\"https://www.xiaomi.cn/post/4378807\" target=\"_blank\" rel=\"noopener\">小米手机解锁 Bootloader 教程以及常见问题</a> ，了解下解锁 Bootloader 的基本步骤</li>\n<li>手机上操作，“设置 - 我的设备 - 所有参数” 连续按 MIUI版本，进入开发者模式</li>\n<li>手机上操作，“设置 - 更多设置 - 开发者选项 - 设备解锁状态”，进行账号绑定和确认状态</li>\n</ol>\n<img src=\"设备解锁状态-未解锁.jpg\" alt=\"设备解锁状态-未解锁\" style=\"zoom:50%;\">\n\n\n\n<p><strong>注意：这个步骤需要断开wifi，使用手机流量操作。且账号要与步骤5中登录账号一致</strong></p>\n<ol start=\"4\">\n<li>下载小米解锁工具，<a href=\"http://www.miui.com/unlock/download.html\" target=\"_blank\" rel=\"noopener\">中文版</a>，<a href=\"https://en.miui.com/unlock/download_en.html\" target=\"_blank\" rel=\"noopener\">英文版</a></li>\n</ol>\n<img src=\"下载小米解锁工具.png\" alt=\"下载小米解锁工具\" style=\"zoom:80%;\">\n\n<ol start=\"5\">\n<li>打开小米解锁工具，登录小米账号</li>\n</ol>\n<img src=\"登录小米解锁工具.png\" alt=\"登录小米解锁工具\" style=\"zoom:60%;\">\n\n<ol start=\"6\">\n<li><p>按照提示将手机关机后，长按音量下键 + 电源键进入 FastBoot 页面</p>\n</li>\n<li><p>安装驱动。要么将手机连接到电脑后自动安装好驱动，要么在小米解锁工具的设置页面手动安装驱动</p>\n</li>\n</ol>\n<img src=\"安装驱动.png\" alt=\"安装驱动\" style=\"zoom:60%;\">\n\n<ol start=\"8\">\n<li>若是一切正常，这时候解锁工具页面应该是以下样子（我没有这么幸运能一次成功）</li>\n</ol>\n<img src=\"手机连接上解锁工具.png\" alt=\"手机连接上解锁工具\" style=\"zoom:60%;\">\n\n<ol start=\"9\">\n<li>点击解锁。<strong>注意：解锁会将手机恢复出厂设置，请提前备份数据</strong></li>\n</ol>\n<img src=\"准备开始解锁.png\" alt=\"准备开始解锁\" style=\"zoom:60%;\">\n\n<ol start=\"10\">\n<li>等待解锁完成</li>\n</ol>\n<img src=\"解锁到95.png\" alt=\"解锁到95%\" style=\"zoom:60%;\">\n\n\n\n<img src=\"解锁成功.png\" alt=\"解锁成功\" style=\"zoom:60%;\">\n\n<ol start=\"11\">\n<li>等到手机重启后查看 “设置 - 更多设置 - 开发者选项 - 设备解锁状态” （在开机的时候屏幕下方会有“unlock”字符）</li>\n</ol>\n<img src=\"解锁完成后手机状态.jpg\" alt=\"解锁完成后手机状态\" style=\"zoom:50%;\">\n\n\n\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>问题一：手机连接上电脑后，在解锁工具中检测不到设备</li>\n</ul>\n<img src=\"检测不到手机.png\" alt=\"检测不到手机\" style=\"zoom:80%;\">\n\n<p>尝试解决：</p>\n<ol>\n<li><p>换线，换USB接口，都无效</p>\n</li>\n<li><p>卸载驱动后重新安装，无效</p>\n</li>\n<li><p>换了另一台win10的电脑尝试，问题仍存在</p>\n</li>\n<li><p>只能通过重启电脑后才能检测到设备，如果重启后拔插了usb，又检测不到了</p>\n</li>\n</ol>\n<ul>\n<li>问题二：开始解锁后，验证设备信息到50%后验证失败（重启电脑后解锁工具能检测到手机，此时可以点击解锁）</li>\n</ul>\n<img src=\"50验证失败.png\" alt=\"50验证失败\" style=\"zoom:80%;\">\n\n<p>尝试解决：</p>\n<ol>\n<li><p>换了老版本解锁工具，无效</p>\n</li>\n<li><p>参考<a href=\"https://miuiver.com/unable-to-get-phone-info/\" target=\"_blank\" rel=\"noopener\">小米解锁无法获取手机信息解决方法</a>，换英文版的解锁工具，无效</p>\n</li>\n<li><p>根据问题一需要重启解锁工具才能显示检测到手机推测应该是驱动有问题。参考 <a href=\"https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=905825&amp;archive=1&amp;extra=page%3D1&amp;page=2\" target=\"_blank\" rel=\"noopener\">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=905825&amp;archive=1&amp;extra=page%3D1&amp;page=2</a>  中提到的解决方法继续以下的尝试解决方法</p>\n</li>\n<li><p>使用 <a href=\"http://zhushou.xiaomi.com/\" target=\"_blank\" rel=\"noopener\">小米助手3.0</a>  安装驱动，使用原装线，无效</p>\n</li>\n<li><p>使用 <a href=\"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1169553&highlight=%B8%E3%BB%FA%D6%FA%CA%D6\" target=\"_blank\" rel=\"noopener\">搞机助手</a> 小米usb3.0 修复补丁，安装后重启电脑，再使用解锁工具解锁，【 成功】</p>\n</li>\n</ol>\n<img src=\"搞机助手安装修复补丁.png\" alt=\"搞机助手安装修复补丁\" style=\"zoom:80%;\">\n\n<ol start=\"6\">\n<li>下载360手机管家安装安卓驱动，未测试</li>\n<li>换win7系统，再使用解锁工具安装驱动解锁，未测试</li>\n</ol>\n<p>其他参考：</p>\n<ul>\n<li><p><a href=\"https://www.mi.com/service/special/BL-loc\" target=\"_blank\" rel=\"noopener\">BL锁解锁失败必看</a></p>\n</li>\n<li><p><a href=\"https://www.v2ex.com/t/589868\" target=\"_blank\" rel=\"noopener\">小米 9 解 bl 锁,在 fastboot 界面，解锁工具始终显示未连接</a></p>\n</li>\n</ul>\n<h2 id=\"线刷开发版系统\"><a href=\"#线刷开发版系统\" class=\"headerlink\" title=\"线刷开发版系统\"></a>线刷开发版系统</h2><ol>\n<li><p><a href=\"http://www.miui.com/shuaji-393.html\" target=\"_blank\" rel=\"noopener\">通过线刷升级</a>，下载通用刷机工具</p>\n</li>\n<li><p><a href=\"https://www.xiaomi.cn/post/5896315\" target=\"_blank\" rel=\"noopener\">小米全系列机型刷机包下载站汇总（长期更新）</a>，查找对应的系统包（我这里下载的是 9.8.22（9.0） 的线刷包，当前系统里面升级页面找不到卡刷包的入口）。说明：应官方要求，9.9.3版本往后暂不提供开发版下载方式，请大家移步<a href=\"https://web-alpha.vip.miui.com/page/info/mio/mio/internalTest?type=2\" target=\"_blank\" rel=\"noopener\">内测中心</a>申请开发板公测/内侧体验。</p>\n</li>\n<li><p>在手机上操作：关机状态下，同时按住 音量下+电源键 进入Fastboot模式将手机USB连接电脑</p>\n</li>\n<li><p>线刷包下载完成后解压，打开线刷包文件夹，复制地址栏地址到刷机工具中，点击刷机</p>\n</li>\n</ol>\n<img src=\"线刷中.png\" alt=\"线刷中\" style=\"zoom:80%;\">\n\n<ol start=\"5\">\n<li>等待刷机完成。手机刷机完后会重启，第一次启动的时间有点久的，别以为是刷成砖了，耐心等待下。注意：这里有个坑爹的地方：默认情况下，解了BL锁右下角会选择全部删除并lock，这样线刷完后BL又锁上了。需要手动选择下全部删除选项</li>\n</ol>\n<img src=\"线刷完成.png\" alt=\"线刷完成\" style=\"zoom:80%;\">\n\n<ol start=\"6\">\n<li>查看手机是否已经是开发版本了</li>\n</ol>\n<img src=\"刷到开发板.jpg\" alt=\"刷到开发板\" style=\"zoom:60%;\">\n\n\n\n<h2 id=\"开启ROOT权限\"><a href=\"#开启ROOT权限\" class=\"headerlink\" title=\"开启ROOT权限\"></a>开启ROOT权限</h2><p>参考<a href=\"https://www.xiaomi.cn/post/4471505\" target=\"_blank\" rel=\"noopener\">【原创】小米手机获取完整ROOT权限教程</a></p>\n<ol>\n<li>打开手机管家</li>\n</ol>\n<img src=\"root1.png\" alt=\"打开手机管家\" style=\"zoom:60%;\">\n\n<ol start=\"2\">\n<li>点击应用管理</li>\n</ol>\n<img src=\"root2.png\" alt=\"点击应用管理\" style=\"zoom:60%;\">\n\n<ol start=\"3\">\n<li>点击权限</li>\n</ol>\n<img src=\"root3.png\" alt=\"点击权限\" style=\"zoom:60%;\">\n\n<ol start=\"4\">\n<li>点击开启ROOT权限</li>\n</ol>\n<img src=\"root4.png\" alt=\"点击开启\" style=\"zoom:60%;\">\n\n<ol start=\"5\">\n<li>开启ROOT。注意：需要网络连接，成功后会重启。如果更新了开发版系统，需要重新再开启ROOT</li>\n</ol>\n<img src=\"root5.png\" alt=\"开启ROOT\" style=\"zoom:60%;\">\n\n<ol start=\"6\">\n<li>解锁System分区。系统提供的ROOT功能并不是完整的；要获取完整的权限，必须解锁System分区！下载 <a href=\"https://www.coolapk.com/apk/com.lerist.syslock\" target=\"_blank\" rel=\"noopener\">Syslock</a>，开启解锁后重启即可生效。（应用获取ROOT权限也提示太多次了吧，每次都要等待5s）</li>\n</ol>\n<img src=\"获取root权限提示太多.jpg\" alt=\"获取root权限提示太多\" style=\"zoom:50%;\">\n\n\n\n<img src=\"解锁system.jpg\" alt=\"解锁system\" style=\"zoom:50%;\">\n\n\n\n<h3 id=\"刷入TWRP\"><a href=\"#刷入TWRP\" class=\"headerlink\" title=\"刷入TWRP\"></a>刷入TWRP</h3><p>如果需要刷入TWRP，可以参考以下步骤。能获取ROOT权限应该开发版也够用了。如果刷第三方，还是可以装下TWRP</p>\n<ol>\n<li>下载TWRP。到 <a href=\"https://twrp.me/Devices/\" target=\"_blank\" rel=\"noopener\">TWRP设备列表</a> 中找到小米（<a href=\"https://twrp.me/Devices/Xiaomi/\" target=\"_blank\" rel=\"noopener\">Xiaomi</a>），进入找到<a href=\"https://twrp.me/xiaomi/xiaomimi6.html\" target=\"_blank\" rel=\"noopener\">小米6机型</a>。</li>\n</ol>\n<img src=\"下载TWRP.png\" alt=\"下载TWRP\" style=\"zoom:80%;\">\n\n<ol start=\"2\">\n<li>手机开启USB调试模式</li>\n<li>打开搞机助手</li>\n</ol>\n<img src=\"打开搞机助手.png\" alt=\"打开搞机助手\" style=\"zoom:80%;\">\n\n<ol start=\"4\">\n<li>点击系统模式下重启到引导模式，或者直接音量下+电源键进入</li>\n</ol>\n<img src=\"刷入REC.png\" alt=\"刷入REC\" style=\"zoom:80%;\">\n\n<ol start=\"5\">\n<li>选择刚才下载的img</li>\n</ol>\n<img src=\"刷入REC1.png\" alt=\"选择刚下载的文件\" style=\"zoom:80%;\">\n\n<ol start=\"6\">\n<li>等待刷入成功，默认会重启进入引导模式</li>\n</ol>\n<img src=\"刷入REC成功.png\" alt=\"刷入REC成功\" style=\"zoom:80%;\">\n\n\n\n\n\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"},{"title":"【开箱】Sonoff ZigBee 套装初体验","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-10-18T03:27:34.000Z","password":null,"summary":"为自己的生活添加点智能设备？","_content":"\n\n\n## 前言\n\n为自己的生活添加点智能设备？\n\n\n\n## 外观\n\n包括ZigBee网关、无线按键传感器、温湿度传感器、门窗传感器、人体红外传感器\n\n<img src=\"./2.jpg\" alt=\"2\" style=\"zoom: 50%;\" />\n\n\n\n- ZigBee Bridge 网关\n\n<img src=\"./4.jpg\" alt=\"4\" style=\"zoom: 50%;\" />\n\n\n\n- Motion Sensor 人体红外传感器\n\n<img src=\"./6.jpg\" alt=\"6\" style=\"zoom: 50%;\" />\n\n用来监测是否有人的\n\n\n\n- Wireless Door/Window Sensor 门窗传感器\n\n<img src=\"./7.jpg\" alt=\"7\" style=\"zoom: 50%;\" />\n\n\n\n- Wireless Switch 无线按键\n\n<img src=\"./8.jpg\" alt=\"8\" style=\"zoom: 50%;\" />\n\n\n\n- Temperature and Humidity Sensor 温湿度传感器\n\n<img src=\"./9.jpg\" alt=\"9\" style=\"zoom: 50%;\" />\n\n\n\n## 安装吐槽\n\n1. 网关电源是 micro usb ，但是没有附带线\n2. 网关、人体红外、门窗等设备的配网按键都是需要拿针去捅按键，但是整个套件没有附带根针，为了配网找针找了半天\n\n<img src=\"./3.jpg\" alt=\"3\" style=\"zoom: 50%;\" />\n\n3. 子设备拿到手还要打开外壳，将电池的绝缘垫抽出才能使用。外壳卡扣这么紧，也没有工具方便拆开，我掏出了两个螺丝刀翘外壳，一度以为要把外壳翘坏了，边缘不可避免会被划到。\n4. 每个子设备外壳打开后的结构还不一样...\n\n<img src=\"./11.jpg\" alt=\"11\" style=\"zoom: 50%;\" />\n\n\n\n<img src=\"./12.jpg\" alt=\"12\" style=\"zoom: 50%;\" />\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【开箱】Sonoff-ZigBee-套装初体验.md","raw":"---\ntitle: 【开箱】Sonoff ZigBee 套装初体验\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-10-18 11:27:34\npassword:\nsummary: 为自己的生活添加点智能设备？\ntags:\n- 开箱\n- 折腾\n- ZigBee\ncategories:\n- 开箱\n- 折腾\n---\n\n\n\n## 前言\n\n为自己的生活添加点智能设备？\n\n\n\n## 外观\n\n包括ZigBee网关、无线按键传感器、温湿度传感器、门窗传感器、人体红外传感器\n\n<img src=\"./2.jpg\" alt=\"2\" style=\"zoom: 50%;\" />\n\n\n\n- ZigBee Bridge 网关\n\n<img src=\"./4.jpg\" alt=\"4\" style=\"zoom: 50%;\" />\n\n\n\n- Motion Sensor 人体红外传感器\n\n<img src=\"./6.jpg\" alt=\"6\" style=\"zoom: 50%;\" />\n\n用来监测是否有人的\n\n\n\n- Wireless Door/Window Sensor 门窗传感器\n\n<img src=\"./7.jpg\" alt=\"7\" style=\"zoom: 50%;\" />\n\n\n\n- Wireless Switch 无线按键\n\n<img src=\"./8.jpg\" alt=\"8\" style=\"zoom: 50%;\" />\n\n\n\n- Temperature and Humidity Sensor 温湿度传感器\n\n<img src=\"./9.jpg\" alt=\"9\" style=\"zoom: 50%;\" />\n\n\n\n## 安装吐槽\n\n1. 网关电源是 micro usb ，但是没有附带线\n2. 网关、人体红外、门窗等设备的配网按键都是需要拿针去捅按键，但是整个套件没有附带根针，为了配网找针找了半天\n\n<img src=\"./3.jpg\" alt=\"3\" style=\"zoom: 50%;\" />\n\n3. 子设备拿到手还要打开外壳，将电池的绝缘垫抽出才能使用。外壳卡扣这么紧，也没有工具方便拆开，我掏出了两个螺丝刀翘外壳，一度以为要把外壳翘坏了，边缘不可避免会被划到。\n4. 每个子设备外壳打开后的结构还不一样...\n\n<img src=\"./11.jpg\" alt=\"11\" style=\"zoom: 50%;\" />\n\n\n\n<img src=\"./12.jpg\" alt=\"12\" style=\"zoom: 50%;\" />\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【开箱】Sonoff-ZigBee-套装初体验","published":1,"updated":"2020-11-23T16:26:19.352Z","_id":"ckhuq03mi000fy8gpy4d8mux3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>为自己的生活添加点智能设备？</p>\n<h2 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h2><p>包括ZigBee网关、无线按键传感器、温湿度传感器、门窗传感器、人体红外传感器</p>\n<img src=\"./2.jpg\" alt=\"2\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>ZigBee Bridge 网关</li>\n</ul>\n<img src=\"./4.jpg\" alt=\"4\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>Motion Sensor 人体红外传感器</li>\n</ul>\n<img src=\"./6.jpg\" alt=\"6\" style=\"zoom: 50%;\">\n\n<p>用来监测是否有人的</p>\n<ul>\n<li>Wireless Door/Window Sensor 门窗传感器</li>\n</ul>\n<img src=\"./7.jpg\" alt=\"7\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>Wireless Switch 无线按键</li>\n</ul>\n<img src=\"./8.jpg\" alt=\"8\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>Temperature and Humidity Sensor 温湿度传感器</li>\n</ul>\n<img src=\"./9.jpg\" alt=\"9\" style=\"zoom: 50%;\">\n\n\n\n<h2 id=\"安装吐槽\"><a href=\"#安装吐槽\" class=\"headerlink\" title=\"安装吐槽\"></a>安装吐槽</h2><ol>\n<li>网关电源是 micro usb ，但是没有附带线</li>\n<li>网关、人体红外、门窗等设备的配网按键都是需要拿针去捅按键，但是整个套件没有附带根针，为了配网找针找了半天</li>\n</ol>\n<img src=\"./3.jpg\" alt=\"3\" style=\"zoom: 50%;\">\n\n<ol start=\"3\">\n<li>子设备拿到手还要打开外壳，将电池的绝缘垫抽出才能使用。外壳卡扣这么紧，也没有工具方便拆开，我掏出了两个螺丝刀翘外壳，一度以为要把外壳翘坏了，边缘不可避免会被划到。</li>\n<li>每个子设备外壳打开后的结构还不一样…</li>\n</ol>\n<img src=\"./11.jpg\" alt=\"11\" style=\"zoom: 50%;\">\n\n\n\n<img src=\"./12.jpg\" alt=\"12\" style=\"zoom: 50%;\">\n\n\n\n\n\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>为自己的生活添加点智能设备？</p>\n<h2 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h2><p>包括ZigBee网关、无线按键传感器、温湿度传感器、门窗传感器、人体红外传感器</p>\n<img src=\"./2.jpg\" alt=\"2\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>ZigBee Bridge 网关</li>\n</ul>\n<img src=\"./4.jpg\" alt=\"4\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>Motion Sensor 人体红外传感器</li>\n</ul>\n<img src=\"./6.jpg\" alt=\"6\" style=\"zoom: 50%;\">\n\n<p>用来监测是否有人的</p>\n<ul>\n<li>Wireless Door/Window Sensor 门窗传感器</li>\n</ul>\n<img src=\"./7.jpg\" alt=\"7\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>Wireless Switch 无线按键</li>\n</ul>\n<img src=\"./8.jpg\" alt=\"8\" style=\"zoom: 50%;\">\n\n\n\n<ul>\n<li>Temperature and Humidity Sensor 温湿度传感器</li>\n</ul>\n<img src=\"./9.jpg\" alt=\"9\" style=\"zoom: 50%;\">\n\n\n\n<h2 id=\"安装吐槽\"><a href=\"#安装吐槽\" class=\"headerlink\" title=\"安装吐槽\"></a>安装吐槽</h2><ol>\n<li>网关电源是 micro usb ，但是没有附带线</li>\n<li>网关、人体红外、门窗等设备的配网按键都是需要拿针去捅按键，但是整个套件没有附带根针，为了配网找针找了半天</li>\n</ol>\n<img src=\"./3.jpg\" alt=\"3\" style=\"zoom: 50%;\">\n\n<ol start=\"3\">\n<li>子设备拿到手还要打开外壳，将电池的绝缘垫抽出才能使用。外壳卡扣这么紧，也没有工具方便拆开，我掏出了两个螺丝刀翘外壳，一度以为要把外壳翘坏了，边缘不可避免会被划到。</li>\n<li>每个子设备外壳打开后的结构还不一样…</li>\n</ol>\n<img src=\"./11.jpg\" alt=\"11\" style=\"zoom: 50%;\">\n\n\n\n<img src=\"./12.jpg\" alt=\"12\" style=\"zoom: 50%;\">\n\n\n\n\n\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"},{"title":"【其他】SmartGit申请非商业版证书","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-10-25T09:39:56.000Z","password":null,"summary":"SmartGit个人使用可以申请非商业证书，避免每次等待30s","_content":"\n## 前言\n\nSmartGit 作为一个不错的Git图形化工具，没有证书情况下每次打开时候都会提醒你，要等30秒才可以关闭提示窗口。作为个人在家使用是可以申请非商业证书来解决这一烦人的问题。\n\n## 步骤\n\n- 打开 https://www.syntevo.com/cn/smartgit/register-non-commercial/\n- 只勾选“在家”选项\n\n![勾选在家](勾选在家.png)\n\n- 填写相关信息（只要邮箱正确即可）**注意：此处填写的邮箱要与项目邮箱一致，不然还是会有弹窗提示**\n\n![填写信息](填写信息.png)\n\n- 等待邮箱收件，附件里面有个 smartgit.lic 证书文件，下载下来备用\n\n![收到邮件](收到邮件.png)\n\n- 打开 SmartGit ，点击 “Help -> Register”，选择刚才下载的证书文件即可\n\n![选择证书](选择证书.png)\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","source":"_posts/【其他】SmartGit申请非商业版证书.md","raw":"---\ntitle: 【其他】SmartGit申请非商业版证书\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-10-25 17:39:56\npassword:\nsummary: SmartGit个人使用可以申请非商业证书，避免每次等待30s\ntags:\n- 其他\ncategories:\n- 其他\n---\n\n## 前言\n\nSmartGit 作为一个不错的Git图形化工具，没有证书情况下每次打开时候都会提醒你，要等30秒才可以关闭提示窗口。作为个人在家使用是可以申请非商业证书来解决这一烦人的问题。\n\n## 步骤\n\n- 打开 https://www.syntevo.com/cn/smartgit/register-non-commercial/\n- 只勾选“在家”选项\n\n![勾选在家](勾选在家.png)\n\n- 填写相关信息（只要邮箱正确即可）**注意：此处填写的邮箱要与项目邮箱一致，不然还是会有弹窗提示**\n\n![填写信息](填写信息.png)\n\n- 等待邮箱收件，附件里面有个 smartgit.lic 证书文件，下载下来备用\n\n![收到邮件](收到邮件.png)\n\n- 打开 SmartGit ，点击 “Help -> Register”，选择刚才下载的证书文件即可\n\n![选择证书](选择证书.png)\n\n\n\n\n\n*如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~*","slug":"【其他】SmartGit申请非商业版证书","published":1,"updated":"2020-11-23T16:26:07.211Z","_id":"ckhuqdfe70001iagpsr8gfrfb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SmartGit 作为一个不错的Git图形化工具，没有证书情况下每次打开时候都会提醒你，要等30秒才可以关闭提示窗口。作为个人在家使用是可以申请非商业证书来解决这一烦人的问题。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>打开 <a href=\"https://www.syntevo.com/cn/smartgit/register-non-commercial/\" target=\"_blank\" rel=\"noopener\">https://www.syntevo.com/cn/smartgit/register-non-commercial/</a></li>\n<li>只勾选“在家”选项</li>\n</ul>\n<p><img src=\"%E5%8B%BE%E9%80%89%E5%9C%A8%E5%AE%B6.png\" alt=\"勾选在家\"></p>\n<ul>\n<li>填写相关信息（只要邮箱正确即可）<strong>注意：此处填写的邮箱要与项目邮箱一致，不然还是会有弹窗提示</strong></li>\n</ul>\n<p><img src=\"%E5%A1%AB%E5%86%99%E4%BF%A1%E6%81%AF.png\" alt=\"填写信息\"></p>\n<ul>\n<li>等待邮箱收件，附件里面有个 smartgit.lic 证书文件，下载下来备用</li>\n</ul>\n<p><img src=\"%E6%94%B6%E5%88%B0%E9%82%AE%E4%BB%B6.png\" alt=\"收到邮件\"></p>\n<ul>\n<li>打开 SmartGit ，点击 “Help -&gt; Register”，选择刚才下载的证书文件即可</li>\n</ul>\n<p><img src=\"%E9%80%89%E6%8B%A9%E8%AF%81%E4%B9%A6.png\" alt=\"选择证书\"></p>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SmartGit 作为一个不错的Git图形化工具，没有证书情况下每次打开时候都会提醒你，要等30秒才可以关闭提示窗口。作为个人在家使用是可以申请非商业证书来解决这一烦人的问题。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>打开 <a href=\"https://www.syntevo.com/cn/smartgit/register-non-commercial/\" target=\"_blank\" rel=\"noopener\">https://www.syntevo.com/cn/smartgit/register-non-commercial/</a></li>\n<li>只勾选“在家”选项</li>\n</ul>\n<p><img src=\"%E5%8B%BE%E9%80%89%E5%9C%A8%E5%AE%B6.png\" alt=\"勾选在家\"></p>\n<ul>\n<li>填写相关信息（只要邮箱正确即可）<strong>注意：此处填写的邮箱要与项目邮箱一致，不然还是会有弹窗提示</strong></li>\n</ul>\n<p><img src=\"%E5%A1%AB%E5%86%99%E4%BF%A1%E6%81%AF.png\" alt=\"填写信息\"></p>\n<ul>\n<li>等待邮箱收件，附件里面有个 smartgit.lic 证书文件，下载下来备用</li>\n</ul>\n<p><img src=\"%E6%94%B6%E5%88%B0%E9%82%AE%E4%BB%B6.png\" alt=\"收到邮件\"></p>\n<ul>\n<li>打开 SmartGit ，点击 “Help -&gt; Register”，选择刚才下载的证书文件即可</li>\n</ul>\n<p><img src=\"%E9%80%89%E6%8B%A9%E8%AF%81%E4%B9%A6.png\" alt=\"选择证书\"></p>\n<p><em>如果觉得本文对你有所帮助，欢迎点击右上角GitHub图标给个Star呗~</em></p>\n"}],"PostAsset":[{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷到开发板.jpg","slug":"刷到开发板.jpg","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁system.jpg","slug":"解锁system.jpg","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【JAVA】AtomicLong-LongAdder-性能对比/breachmark.png","slug":"breachmark.png","post":"ckhuq03m20001y8gpfye9f2vy","modified":0,"renderable":0},{"_id":"source/_posts/【JAVA】AtomicLong-LongAdder-性能对比/线程池测试并发.png","slug":"线程池测试并发.png","post":"ckhuq03m20001y8gpfye9f2vy","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/11.jpg","slug":"11.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/12.jpg","slug":"12.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/2.jpg","slug":"2.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/3.jpg","slug":"3.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/4.jpg","slug":"4.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/6.jpg","slug":"6.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/7.jpg","slug":"7.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/8.jpg","slug":"8.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【开箱】Sonoff-ZigBee-套装初体验/9.jpg","slug":"9.jpg","post":"ckhuq03mi000fy8gpy4d8mux3","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/50验证失败.png","slug":"50验证失败.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root1.png","slug":"root1.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root2.png","slug":"root2.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root3.png","slug":"root3.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root4.png","slug":"root4.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/root5.png","slug":"root5.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/下载TWRP.png","slug":"下载TWRP.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/下载小米解锁工具.png","slug":"下载小米解锁工具.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/准备开始解锁.png","slug":"准备开始解锁.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷入REC.png","slug":"刷入REC.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷入REC1.png","slug":"刷入REC1.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/刷入REC成功.png","slug":"刷入REC成功.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/安装驱动.png","slug":"安装驱动.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/手机系统信息.jpg","slug":"手机系统信息.jpg","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/手机连接上解锁工具.png","slug":"手机连接上解锁工具.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/打开搞机助手.png","slug":"打开搞机助手.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/搞机助手安装修复补丁.png","slug":"搞机助手安装修复补丁.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/检测不到手机.png","slug":"检测不到手机.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/登录小米解锁工具.png","slug":"登录小米解锁工具.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/线刷中.png","slug":"线刷中.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/线刷完成.png","slug":"线刷完成.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/获取root权限提示太多.jpg","slug":"获取root权限提示太多.jpg","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁完成后手机状态.jpg","slug":"解锁完成后手机状态.jpg","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁工具连接上手机.png","slug":"解锁工具连接上手机.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁成功.png","slug":"解锁成功.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/设备解锁状态-未解锁.jpg","slug":"设备解锁状态-未解锁.jpg","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/勾选在家.png","slug":"勾选在家.png","post":"ckhuqdfe70001iagpsr8gfrfb","modified":0,"renderable":0},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/填写信息.png","slug":"填写信息.png","post":"ckhuqdfe70001iagpsr8gfrfb","modified":0,"renderable":0},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/收到邮件.png","slug":"收到邮件.png","post":"ckhuqdfe70001iagpsr8gfrfb","modified":0,"renderable":0},{"_id":"source/_posts/【其他】SmartGit申请非商业版证书/选择证书.png","slug":"选择证书.png","post":"ckhuqdfe70001iagpsr8gfrfb","modified":0,"renderable":0},{"_id":"source/_posts/【其他】小米6解BL锁，获取ROOT权限/解锁到95.png","slug":"解锁到95.png","post":"ckhuq03mg000by8gpv8fvrc76","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckhuq03m20001y8gpfye9f2vy","category_id":"ckhuq03m80005y8gplanyajbt","_id":"ckhuq03mk000iy8gpeh4xil7f"},{"post_id":"ckhuq03m60003y8gp3ql87z8w","category_id":"ckhuq03m80005y8gplanyajbt","_id":"ckhuq03mk000ky8gpbyowluwe"},{"post_id":"ckhuq03m90007y8gppq01h682","category_id":"ckhuq03mk000hy8gpf42bkwt9","_id":"ckhuq03ml000oy8gpbwbnerxp"},{"post_id":"ckhuq03mc0009y8gpri5efxg9","category_id":"ckhuq03mk000ly8gpip6e3cuf","_id":"ckhuq03mm000uy8gpmyzedn2z"},{"post_id":"ckhuq03mg000by8gpv8fvrc76","category_id":"ckhuq03mk000ly8gpip6e3cuf","_id":"ckhuq03mm000wy8gp1cbu08vn"},{"post_id":"ckhuq03mi000fy8gpy4d8mux3","category_id":"ckhuq03mm000ty8gpzgvmgcvb","_id":"ckhuq03mn0014y8gp1b8z5usw"},{"post_id":"ckhuq03mi000fy8gpy4d8mux3","category_id":"ckhuq03mn000zy8gp0wcmlno7","_id":"ckhuq03mo0016y8gpihd8xt5s"},{"post_id":"ckhuqdfe70001iagpsr8gfrfb","category_id":"ckhuqf9bj000biagpp78x6wkm","_id":"ckhuqzvo9000iiagpmz9uzaxk"}],"PostTag":[{"post_id":"ckhuq03m20001y8gpfye9f2vy","tag_id":"ckhuq03m90006y8gpmm25j2lh","_id":"ckhuq03ml000ny8gpitt8viwc"},{"post_id":"ckhuq03m20001y8gpfye9f2vy","tag_id":"ckhuq03mh000dy8gp8wcq3orf","_id":"ckhuq03ml000py8gpm4uzv0s2"},{"post_id":"ckhuq03m20001y8gpfye9f2vy","tag_id":"ckhuq03mk000jy8gp1o826mb6","_id":"ckhuq03mm000sy8gp2w94rbbi"},{"post_id":"ckhuq03m60003y8gp3ql87z8w","tag_id":"ckhuq03m90006y8gpmm25j2lh","_id":"ckhuq03mn000yy8gp4oe3zzta"},{"post_id":"ckhuq03m60003y8gp3ql87z8w","tag_id":"ckhuq03mh000dy8gp8wcq3orf","_id":"ckhuq03mn0010y8gpn6jj4oxp"},{"post_id":"ckhuq03m60003y8gp3ql87z8w","tag_id":"ckhuq03mm000vy8gp765sw0s0","_id":"ckhuq03mn0012y8gpq0s04fzd"},{"post_id":"ckhuq03m90007y8gppq01h682","tag_id":"ckhuq03mm000xy8gphyz72ndq","_id":"ckhuq03mn0015y8gpnv3gqn5o"},{"post_id":"ckhuq03m90007y8gppq01h682","tag_id":"ckhuq03mn0011y8gp33iwb8wf","_id":"ckhuq03mo0017y8gpurxjry0g"},{"post_id":"ckhuq03mc0009y8gpri5efxg9","tag_id":"ckhuq03mn0013y8gphlneik18","_id":"ckhuq03mo001ay8gpef4t53lt"},{"post_id":"ckhuq03mc0009y8gpri5efxg9","tag_id":"ckhuq03mo0018y8gpkwm8o8wq","_id":"ckhuq03mo001by8gp39iw2ap5"},{"post_id":"ckhuq03mg000by8gpv8fvrc76","tag_id":"ckhuq03mo0019y8gparv3yhng","_id":"ckhuq03mo001ey8gpl7k3auza"},{"post_id":"ckhuq03mg000by8gpv8fvrc76","tag_id":"ckhuq03mo001cy8gpi9xcxj12","_id":"ckhuq03mo001fy8gp92uxue0y"},{"post_id":"ckhuq03mi000fy8gpy4d8mux3","tag_id":"ckhuq03mo001dy8gpv5wp9qjc","_id":"ckhuq03mp001iy8gpxqlh6zj3"},{"post_id":"ckhuq03mi000fy8gpy4d8mux3","tag_id":"ckhuq03mo001gy8gpje6jrzj7","_id":"ckhuq03mp001jy8gpv0amrjuo"},{"post_id":"ckhuq03mi000fy8gpy4d8mux3","tag_id":"ckhuq03mp001hy8gpah3iim3x","_id":"ckhuq03mp001ky8gppo1e4yst"},{"post_id":"ckhuqdfe70001iagpsr8gfrfb","tag_id":"ckhuq03mo0019y8gparv3yhng","_id":"ckhuqzvo9000hiagpgncyk5dt"}],"Tag":[{"name":"JAVA","_id":"ckhuq03m90006y8gpmm25j2lh"},{"name":"源码分析","_id":"ckhuq03mh000dy8gp8wcq3orf"},{"name":"程序员的一天","_id":"ckhuq03mk000jy8gp1o826mb6"},{"name":"线程池","_id":"ckhuq03mm000vy8gp765sw0s0"},{"name":"Python","_id":"ckhuq03mm000xy8gphyz72ndq"},{"name":"内存","_id":"ckhuq03mn0011y8gp33iwb8wf"},{"name":"Unraid","_id":"ckhuq03mn0013y8gphlneik18"},{"name":"NAS","_id":"ckhuq03mo0018y8gpkwm8o8wq"},{"name":"其他","_id":"ckhuq03mo0019y8gparv3yhng"},{"name":"刷机","_id":"ckhuq03mo001cy8gpi9xcxj12"},{"name":"开箱","_id":"ckhuq03mo001dy8gpv5wp9qjc"},{"name":"折腾","_id":"ckhuq03mo001gy8gpje6jrzj7"},{"name":"ZigBee","_id":"ckhuq03mp001hy8gpah3iim3x"}]}}